
stm32_eeprom_burner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052a8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000944  08005448  08005448  00006448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d8c  08005d8c  00007094  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005d8c  08005d8c  00006d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d94  08005d94  00007094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d94  08005d94  00006d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d98  08005d98  00006d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08005d9c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  20000094  08005e30  00007094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  08005e30  000074ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ddd6  00000000  00000000  000070c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c7  00000000  00000000  00014e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  00017168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b75  00000000  00000000  00018030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f5f  00000000  00000000  00018ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116e0  00000000  00000000  00030b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009165a  00000000  00000000  000421e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d383e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047e0  00000000  00000000  000d3884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000d8064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005430 	.word	0x08005430

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	08005430 	.word	0x08005430

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d013      	beq.n	80005ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00b      	beq.n	80005ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d4:	e000      	b.n	80005d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0f9      	beq.n	80005d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005ec:	687b      	ldr	r3, [r7, #4]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <instruction_struct_setup>:
typedef struct control_unit_lut{
	uint8_t addresses[200];
	uint16_t set_control_bits[200];
}control_unit_lut_t;

void instruction_struct_setup(instruction_t temp, instruction_t *target){
 80005fa:	b084      	sub	sp, #16
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	f107 0c18 	add.w	ip, r7, #24
 8000606:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  for(int i = 0; i < sizeof(temp.mnemonic); i++){
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	e00c      	b.n	800062a <instruction_struct_setup+0x30>
		  target->mnemonic[i] = temp.mnemonic[i];
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	3318      	adds	r3, #24
 8000614:	443b      	add	r3, r7
 8000616:	7819      	ldrb	r1, [r3, #0]
 8000618:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	4413      	add	r3, r2
 8000620:	460a      	mov	r2, r1
 8000622:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < sizeof(temp.mnemonic); i++){
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	3301      	adds	r3, #1
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	2b02      	cmp	r3, #2
 800062e:	d9ef      	bls.n	8000610 <instruction_struct_setup+0x16>
	  }
	  target->id = temp.id;
 8000630:	7efa      	ldrb	r2, [r7, #27]
 8000632:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000636:	70da      	strb	r2, [r3, #3]
	  target->step = temp.step;
 8000638:	7f3a      	ldrb	r2, [r7, #28]
 800063a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800063e:	711a      	strb	r2, [r3, #4]
	  for(int i = 0; i < temp.step; i++){
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	e035      	b.n	80006b2 <instruction_struct_setup+0xb8>
		  target->step_bit_count_list[i] = temp.step_bit_count_list[i];
 8000646:	f107 021d 	add.w	r2, r7, #29
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	4413      	add	r3, r2
 800064e:	7819      	ldrb	r1, [r3, #0]
 8000650:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4413      	add	r3, r2
 8000658:	3305      	adds	r3, #5
 800065a:	460a      	mov	r2, r1
 800065c:	701a      	strb	r2, [r3, #0]
		  for(int j = 0; j < temp.step_bit_count_list[i]; j++){
 800065e:	2300      	movs	r3, #0
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	e01a      	b.n	800069a <instruction_struct_setup+0xa0>
			  target->control_bits[i][j] = temp.control_bits[i][j];
 8000664:	68ba      	ldr	r2, [r7, #8]
 8000666:	4613      	mov	r3, r2
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	4413      	add	r3, r2
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	3318      	adds	r3, #24
 8000670:	19da      	adds	r2, r3, r7
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	330f      	adds	r3, #15
 8000678:	7818      	ldrb	r0, [r3, #0]
 800067a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	4613      	mov	r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	18ca      	adds	r2, r1, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	330f      	adds	r3, #15
 8000690:	4602      	mov	r2, r0
 8000692:	701a      	strb	r2, [r3, #0]
		  for(int j = 0; j < temp.step_bit_count_list[i]; j++){
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3301      	adds	r3, #1
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	f107 021d 	add.w	r2, r7, #29
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	4413      	add	r3, r2
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4293      	cmp	r3, r2
 80006aa:	dbdb      	blt.n	8000664 <instruction_struct_setup+0x6a>
	  for(int i = 0; i < temp.step; i++){
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	3301      	adds	r3, #1
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	7f3b      	ldrb	r3, [r7, #28]
 80006b4:	461a      	mov	r2, r3
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	4293      	cmp	r3, r2
 80006ba:	dbc4      	blt.n	8000646 <instruction_struct_setup+0x4c>
		  }
	  }
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	b004      	add	sp, #16
 80006ca:	4770      	bx	lr

080006cc <generate_eeprom_ISA_CU_table>:


uint8_t generate_eeprom_ISA_CU_table(instruction_t **instruction_list, control_unit_lut_t *output_CU_LUT, uint8_t total_instr){
 80006cc:	b480      	push	{r7}
 80006ce:	b087      	sub	sp, #28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	4613      	mov	r3, r2
 80006d8:	71fb      	strb	r3, [r7, #7]
	uint8_t _lines = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i = 0; i < total_instr; i++){
 80006de:	2300      	movs	r3, #0
 80006e0:	75bb      	strb	r3, [r7, #22]
 80006e2:	e05d      	b.n	80007a0 <generate_eeprom_ISA_CU_table+0xd4>
		for(uint8_t j = 0; j < instruction_list[i]->step; j++){
 80006e4:	2300      	movs	r3, #0
 80006e6:	757b      	strb	r3, [r7, #21]
 80006e8:	e04e      	b.n	8000788 <generate_eeprom_ISA_CU_table+0xbc>
			uint8_t _addr = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	743b      	strb	r3, [r7, #16]
			uint16_t _cbits = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	827b      	strh	r3, [r7, #18]
			_addr |= (instruction_list[i]->id << 3) | ((uint8_t)j);
 80006f2:	7dbb      	ldrb	r3, [r7, #22]
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	4413      	add	r3, r2
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	78db      	ldrb	r3, [r3, #3]
 80006fe:	b25b      	sxtb	r3, r3
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	b25a      	sxtb	r2, r3
 8000704:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000708:	4313      	orrs	r3, r2
 800070a:	b25a      	sxtb	r2, r3
 800070c:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8000710:	4313      	orrs	r3, r2
 8000712:	b25b      	sxtb	r3, r3
 8000714:	743b      	strb	r3, [r7, #16]

			for(uint8_t k = 0; k < instruction_list[i]->step_bit_count_list[j]; k++){
 8000716:	2300      	movs	r3, #0
 8000718:	747b      	strb	r3, [r7, #17]
 800071a:	e01a      	b.n	8000752 <generate_eeprom_ISA_CU_table+0x86>
				_cbits |= (1 << (instruction_list[i]->control_bits[j][k]));
 800071c:	7dbb      	ldrb	r3, [r7, #22]
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	4413      	add	r3, r2
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	7d7a      	ldrb	r2, [r7, #21]
 8000728:	7c79      	ldrb	r1, [r7, #17]
 800072a:	4613      	mov	r3, r2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	4413      	add	r3, r2
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	4403      	add	r3, r0
 8000734:	440b      	add	r3, r1
 8000736:	330f      	adds	r3, #15
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	461a      	mov	r2, r3
 800073c:	2301      	movs	r3, #1
 800073e:	4093      	lsls	r3, r2
 8000740:	b21a      	sxth	r2, r3
 8000742:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000746:	4313      	orrs	r3, r2
 8000748:	b21b      	sxth	r3, r3
 800074a:	827b      	strh	r3, [r7, #18]
			for(uint8_t k = 0; k < instruction_list[i]->step_bit_count_list[j]; k++){
 800074c:	7c7b      	ldrb	r3, [r7, #17]
 800074e:	3301      	adds	r3, #1
 8000750:	747b      	strb	r3, [r7, #17]
 8000752:	7dbb      	ldrb	r3, [r7, #22]
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	4413      	add	r3, r2
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	7d7b      	ldrb	r3, [r7, #21]
 800075e:	4413      	add	r3, r2
 8000760:	795b      	ldrb	r3, [r3, #5]
 8000762:	7c7a      	ldrb	r2, [r7, #17]
 8000764:	429a      	cmp	r2, r3
 8000766:	d3d9      	bcc.n	800071c <generate_eeprom_ISA_CU_table+0x50>
			}
			output_CU_LUT->addresses[_lines] = _addr;
 8000768:	7dfb      	ldrb	r3, [r7, #23]
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	7c39      	ldrb	r1, [r7, #16]
 800076e:	54d1      	strb	r1, [r2, r3]
			output_CU_LUT->set_control_bits[_lines] = _cbits;
 8000770:	7dfa      	ldrb	r2, [r7, #23]
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	3264      	adds	r2, #100	@ 0x64
 8000776:	8a79      	ldrh	r1, [r7, #18]
 8000778:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			_lines++;
 800077c:	7dfb      	ldrb	r3, [r7, #23]
 800077e:	3301      	adds	r3, #1
 8000780:	75fb      	strb	r3, [r7, #23]
		for(uint8_t j = 0; j < instruction_list[i]->step; j++){
 8000782:	7d7b      	ldrb	r3, [r7, #21]
 8000784:	3301      	adds	r3, #1
 8000786:	757b      	strb	r3, [r7, #21]
 8000788:	7dbb      	ldrb	r3, [r7, #22]
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	4413      	add	r3, r2
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	791b      	ldrb	r3, [r3, #4]
 8000794:	7d7a      	ldrb	r2, [r7, #21]
 8000796:	429a      	cmp	r2, r3
 8000798:	d3a7      	bcc.n	80006ea <generate_eeprom_ISA_CU_table+0x1e>
	for(uint8_t i = 0; i < total_instr; i++){
 800079a:	7dbb      	ldrb	r3, [r7, #22]
 800079c:	3301      	adds	r3, #1
 800079e:	75bb      	strb	r3, [r7, #22]
 80007a0:	7dba      	ldrb	r2, [r7, #22]
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d39d      	bcc.n	80006e4 <generate_eeprom_ISA_CU_table+0x18>
		}
	}
	return _lines;
 80007a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	371c      	adds	r7, #28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
	...

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007bc:	f5ad 6de1 	sub.w	sp, sp, #1800	@ 0x708
 80007c0:	af1a      	add	r7, sp, #104	@ 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c2:	f001 fd5f 	bl	8002284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c6:	f000 fdcf 	bl	8001368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ca:	f000 feb3 	bl	8001534 <MX_GPIO_Init>
  MX_TIM1_Init();
 80007ce:	f000 fe61 	bl	8001494 <MX_TIM1_Init>
  MX_I2C1_Init();
 80007d2:	f000 fe31 	bl	8001438 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */




  ssd1306_Init();
 80007d6:	f001 fb55 	bl	8001e84 <ssd1306_Init>
  ssd1306_Fill(Black);
 80007da:	2000      	movs	r0, #0
 80007dc:	f001 fbbc 	bl	8001f58 <ssd1306_Fill>
  ssd1306_SetCursor(15, 2);
 80007e0:	2102      	movs	r1, #2
 80007e2:	200f      	movs	r0, #15
 80007e4:	f001 fd04 	bl	80021f0 <ssd1306_SetCursor>
  ssd1306_WriteString(welcomeText, Font_7x10, White);
 80007e8:	4bec      	ldr	r3, [pc, #944]	@ (8000b9c <main+0x3e4>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	9200      	str	r2, [sp, #0]
 80007ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007f0:	48eb      	ldr	r0, [pc, #940]	@ (8000ba0 <main+0x3e8>)
 80007f2:	f001 fcd7 	bl	80021a4 <ssd1306_WriteString>
  ssd1306_SetCursor(40, 14);
 80007f6:	210e      	movs	r1, #14
 80007f8:	2028      	movs	r0, #40	@ 0x28
 80007fa:	f001 fcf9 	bl	80021f0 <ssd1306_SetCursor>
  ssd1306_WriteString(arafText, Font_7x10, White);
 80007fe:	4be7      	ldr	r3, [pc, #924]	@ (8000b9c <main+0x3e4>)
 8000800:	2201      	movs	r2, #1
 8000802:	9200      	str	r2, [sp, #0]
 8000804:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000806:	48e7      	ldr	r0, [pc, #924]	@ (8000ba4 <main+0x3ec>)
 8000808:	f001 fccc 	bl	80021a4 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800080c:	f001 fbbc 	bl	8001f88 <ssd1306_UpdateScreen>
  HAL_Delay(500);
 8000810:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000814:	f001 fda8 	bl	8002368 <HAL_Delay>


  HAL_TIM_Base_Start(&htim1);
 8000818:	48e3      	ldr	r0, [pc, #908]	@ (8000ba8 <main+0x3f0>)
 800081a:	f003 f9e7 	bl	8003bec <HAL_TIM_Base_Start>
  printf("  ARAF  EEPROM  BURNER  \n\n");
 800081e:	48e3      	ldr	r0, [pc, #908]	@ (8000bac <main+0x3f4>)
 8000820:	f003 fe7a 	bl	8004518 <puts>


#define PROGRAM_EEPROM EEPROM_LSB


  printf("  Control Unit Decoder  \n\n");
 8000824:	48e2      	ldr	r0, [pc, #904]	@ (8000bb0 <main+0x3f8>)
 8000826:	f003 fe77 	bl	8004518 <puts>
  /* | HLT | MI | RI | RO | IO | II | AI | AO | EO | SUB | BI | BO | OE | PCE | PCO | J | */
  instruction_t *zro = (instruction_t*)malloc(sizeof(instruction_t));
 800082a:	2073      	movs	r0, #115	@ 0x73
 800082c:	f003 fc94 	bl	8004158 <malloc>
 8000830:	4603      	mov	r3, r0
 8000832:	f8c7 3694 	str.w	r3, [r7, #1684]	@ 0x694
  instruction_t temp1 = {"zro", 0b0000, 2, {2, 3}, {{MI, PCO}, {RO, II, PCE}}};
 8000836:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 800083a:	2273      	movs	r2, #115	@ 0x73
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f003 ff6c 	bl	800471c <memset>
 8000844:	4adb      	ldr	r2, [pc, #876]	@ (8000bb4 <main+0x3fc>)
 8000846:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 800084a:	6812      	ldr	r2, [r2, #0]
 800084c:	4611      	mov	r1, r2
 800084e:	8019      	strh	r1, [r3, #0]
 8000850:	3302      	adds	r3, #2
 8000852:	0c12      	lsrs	r2, r2, #16
 8000854:	701a      	strb	r2, [r3, #0]
 8000856:	2302      	movs	r3, #2
 8000858:	f887 35fc 	strb.w	r3, [r7, #1532]	@ 0x5fc
 800085c:	4ad6      	ldr	r2, [pc, #856]	@ (8000bb8 <main+0x400>)
 800085e:	f207 53fd 	addw	r3, r7, #1533	@ 0x5fd
 8000862:	8811      	ldrh	r1, [r2, #0]
 8000864:	7892      	ldrb	r2, [r2, #2]
 8000866:	8019      	strh	r1, [r3, #0]
 8000868:	709a      	strb	r2, [r3, #2]
 800086a:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	f8c3 2003 	str.w	r2, [r3, #3]
 8000876:	230e      	movs	r3, #14
 8000878:	f887 3607 	strb.w	r3, [r7, #1543]	@ 0x607
 800087c:	2301      	movs	r3, #1
 800087e:	f887 3608 	strb.w	r3, [r7, #1544]	@ 0x608
 8000882:	230c      	movs	r3, #12
 8000884:	f887 3611 	strb.w	r3, [r7, #1553]	@ 0x611
 8000888:	230a      	movs	r3, #10
 800088a:	f887 3612 	strb.w	r3, [r7, #1554]	@ 0x612
 800088e:	2302      	movs	r3, #2
 8000890:	f887 3613 	strb.w	r3, [r7, #1555]	@ 0x613
  instruction_struct_setup(temp1, zro);
 8000894:	f8d7 3694 	ldr.w	r3, [r7, #1684]	@ 0x694
 8000898:	9319      	str	r3, [sp, #100]	@ 0x64
 800089a:	4668      	mov	r0, sp
 800089c:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 80008a0:	2263      	movs	r2, #99	@ 0x63
 80008a2:	4619      	mov	r1, r3
 80008a4:	f003 ffc5 	bl	8004832 <memcpy>
 80008a8:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 80008ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ae:	f7ff fea4 	bl	80005fa <instruction_struct_setup>


  instruction_t *lda = (instruction_t*)malloc(sizeof(instruction_t));
 80008b2:	2073      	movs	r0, #115	@ 0x73
 80008b4:	f003 fc50 	bl	8004158 <malloc>
 80008b8:	4603      	mov	r3, r0
 80008ba:	f8c7 3690 	str.w	r3, [r7, #1680]	@ 0x690
  instruction_t temp2 = {"lda", 0b0001, 5, {2, 3, 2, 2, 0}, {{MI, PCO}, {RO, II, PCE}, {MI, IO}, {RO, AI}, {0}}};
 80008be:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 80008c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80008c6:	4618      	mov	r0, r3
 80008c8:	2373      	movs	r3, #115	@ 0x73
 80008ca:	461a      	mov	r2, r3
 80008cc:	2100      	movs	r1, #0
 80008ce:	f003 ff25 	bl	800471c <memset>
 80008d2:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 80008d6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80008da:	4ab8      	ldr	r2, [pc, #736]	@ (8000bbc <main+0x404>)
 80008dc:	6812      	ldr	r2, [r2, #0]
 80008de:	4611      	mov	r1, r2
 80008e0:	8019      	strh	r1, [r3, #0]
 80008e2:	3302      	adds	r3, #2
 80008e4:	0c12      	lsrs	r2, r2, #16
 80008e6:	701a      	strb	r2, [r3, #0]
 80008e8:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 80008ec:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80008f0:	2201      	movs	r2, #1
 80008f2:	70da      	strb	r2, [r3, #3]
 80008f4:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 80008f8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80008fc:	2205      	movs	r2, #5
 80008fe:	711a      	strb	r2, [r3, #4]
 8000900:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000904:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000908:	49ad      	ldr	r1, [pc, #692]	@ (8000bc0 <main+0x408>)
 800090a:	1d5a      	adds	r2, r3, #5
 800090c:	6808      	ldr	r0, [r1, #0]
 800090e:	6010      	str	r0, [r2, #0]
 8000910:	8889      	ldrh	r1, [r1, #4]
 8000912:	8091      	strh	r1, [r2, #4]
 8000914:	330b      	adds	r3, #11
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 800091e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000922:	220e      	movs	r2, #14
 8000924:	73da      	strb	r2, [r3, #15]
 8000926:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 800092a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800092e:	2201      	movs	r2, #1
 8000930:	741a      	strb	r2, [r3, #16]
 8000932:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000936:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800093a:	220c      	movs	r2, #12
 800093c:	765a      	strb	r2, [r3, #25]
 800093e:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000942:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000946:	220a      	movs	r2, #10
 8000948:	769a      	strb	r2, [r3, #26]
 800094a:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 800094e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000952:	2202      	movs	r2, #2
 8000954:	76da      	strb	r2, [r3, #27]
 8000956:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 800095a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800095e:	220e      	movs	r2, #14
 8000960:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8000964:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000968:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800096c:	220b      	movs	r2, #11
 800096e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8000972:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000976:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800097a:	220c      	movs	r2, #12
 800097c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8000980:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000984:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000988:	2209      	movs	r2, #9
 800098a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  instruction_struct_setup(temp2, lda);
 800098e:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000992:	f5a3 748e 	sub.w	r4, r3, #284	@ 0x11c
 8000996:	f8d7 3690 	ldr.w	r3, [r7, #1680]	@ 0x690
 800099a:	9319      	str	r3, [sp, #100]	@ 0x64
 800099c:	4668      	mov	r0, sp
 800099e:	f104 0310 	add.w	r3, r4, #16
 80009a2:	2263      	movs	r2, #99	@ 0x63
 80009a4:	4619      	mov	r1, r3
 80009a6:	f003 ff44 	bl	8004832 <memcpy>
 80009aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009ae:	f7ff fe24 	bl	80005fa <instruction_struct_setup>


  instruction_t *add = (instruction_t*)malloc(sizeof(instruction_t));
 80009b2:	2073      	movs	r0, #115	@ 0x73
 80009b4:	f003 fbd0 	bl	8004158 <malloc>
 80009b8:	4603      	mov	r3, r0
 80009ba:	f8c7 368c 	str.w	r3, [r7, #1676]	@ 0x68c
  instruction_t temp3 = {"add", 0b0010, 5, {2, 3, 2, 2, 2}, {{MI, PCO}, {RO, II, PCE}, {MI, IO}, {RO, BI}, {AI, EO}}};
 80009be:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 80009c2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80009c6:	4618      	mov	r0, r3
 80009c8:	2373      	movs	r3, #115	@ 0x73
 80009ca:	461a      	mov	r2, r3
 80009cc:	2100      	movs	r1, #0
 80009ce:	f003 fea5 	bl	800471c <memset>
 80009d2:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 80009d6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80009da:	4a7a      	ldr	r2, [pc, #488]	@ (8000bc4 <main+0x40c>)
 80009dc:	6812      	ldr	r2, [r2, #0]
 80009de:	4611      	mov	r1, r2
 80009e0:	8019      	strh	r1, [r3, #0]
 80009e2:	3302      	adds	r3, #2
 80009e4:	0c12      	lsrs	r2, r2, #16
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 80009ec:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80009f0:	2202      	movs	r2, #2
 80009f2:	70da      	strb	r2, [r3, #3]
 80009f4:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 80009f8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80009fc:	2205      	movs	r2, #5
 80009fe:	711a      	strb	r2, [r3, #4]
 8000a00:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000a04:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000a08:	496f      	ldr	r1, [pc, #444]	@ (8000bc8 <main+0x410>)
 8000a0a:	1d5a      	adds	r2, r3, #5
 8000a0c:	6808      	ldr	r0, [r1, #0]
 8000a0e:	6010      	str	r0, [r2, #0]
 8000a10:	8889      	ldrh	r1, [r1, #4]
 8000a12:	8091      	strh	r1, [r2, #4]
 8000a14:	330b      	adds	r3, #11
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000a1e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000a22:	220e      	movs	r2, #14
 8000a24:	73da      	strb	r2, [r3, #15]
 8000a26:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000a2a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000a2e:	2201      	movs	r2, #1
 8000a30:	741a      	strb	r2, [r3, #16]
 8000a32:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000a36:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	765a      	strb	r2, [r3, #25]
 8000a3e:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000a42:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000a46:	220a      	movs	r2, #10
 8000a48:	769a      	strb	r2, [r3, #26]
 8000a4a:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000a4e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000a52:	2202      	movs	r2, #2
 8000a54:	76da      	strb	r2, [r3, #27]
 8000a56:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000a5a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000a5e:	220e      	movs	r2, #14
 8000a60:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8000a64:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000a68:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000a6c:	220b      	movs	r2, #11
 8000a6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8000a72:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000a76:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8000a80:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000a84:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000a88:	2205      	movs	r2, #5
 8000a8a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8000a8e:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000a92:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000a96:	2209      	movs	r2, #9
 8000a98:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
 8000a9c:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000aa0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  instruction_struct_setup(temp3, add);
 8000aaa:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000aae:	f5a3 74c8 	sub.w	r4, r3, #400	@ 0x190
 8000ab2:	f8d7 368c 	ldr.w	r3, [r7, #1676]	@ 0x68c
 8000ab6:	9319      	str	r3, [sp, #100]	@ 0x64
 8000ab8:	4668      	mov	r0, sp
 8000aba:	f104 0310 	add.w	r3, r4, #16
 8000abe:	2263      	movs	r2, #99	@ 0x63
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f003 feb6 	bl	8004832 <memcpy>
 8000ac6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000aca:	f7ff fd96 	bl	80005fa <instruction_struct_setup>


  instruction_t *out = (instruction_t*)malloc(sizeof(instruction_t));
 8000ace:	2073      	movs	r0, #115	@ 0x73
 8000ad0:	f003 fb42 	bl	8004158 <malloc>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	f8c7 3688 	str.w	r3, [r7, #1672]	@ 0x688
  instruction_t temp4 = {"out", 0b1110, 5, {2, 3, 2, 0, 0}, {{MI, PCO}, {RO, II, PCE}, {AO, OE}, {0}, {0}}};
 8000ada:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000ade:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	2373      	movs	r3, #115	@ 0x73
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	2100      	movs	r1, #0
 8000aea:	f003 fe17 	bl	800471c <memset>
 8000aee:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000af2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000af6:	4a35      	ldr	r2, [pc, #212]	@ (8000bcc <main+0x414>)
 8000af8:	6812      	ldr	r2, [r2, #0]
 8000afa:	4611      	mov	r1, r2
 8000afc:	8019      	strh	r1, [r3, #0]
 8000afe:	3302      	adds	r3, #2
 8000b00:	0c12      	lsrs	r2, r2, #16
 8000b02:	701a      	strb	r2, [r3, #0]
 8000b04:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000b08:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b0c:	220e      	movs	r2, #14
 8000b0e:	70da      	strb	r2, [r3, #3]
 8000b10:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000b14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b18:	2205      	movs	r2, #5
 8000b1a:	711a      	strb	r2, [r3, #4]
 8000b1c:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000b20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b24:	492a      	ldr	r1, [pc, #168]	@ (8000bd0 <main+0x418>)
 8000b26:	1d5a      	adds	r2, r3, #5
 8000b28:	6808      	ldr	r0, [r1, #0]
 8000b2a:	6010      	str	r0, [r2, #0]
 8000b2c:	8889      	ldrh	r1, [r1, #4]
 8000b2e:	8091      	strh	r1, [r2, #4]
 8000b30:	330b      	adds	r3, #11
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000b3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b3e:	220e      	movs	r2, #14
 8000b40:	73da      	strb	r2, [r3, #15]
 8000b42:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000b46:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	741a      	strb	r2, [r3, #16]
 8000b4e:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000b52:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b56:	220c      	movs	r2, #12
 8000b58:	765a      	strb	r2, [r3, #25]
 8000b5a:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000b5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b62:	220a      	movs	r2, #10
 8000b64:	769a      	strb	r2, [r3, #26]
 8000b66:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000b6a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b6e:	2202      	movs	r2, #2
 8000b70:	76da      	strb	r2, [r3, #27]
 8000b72:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000b76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b7a:	2208      	movs	r2, #8
 8000b7c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8000b80:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000b84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b88:	2203      	movs	r2, #3
 8000b8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  instruction_struct_setup(temp4, out);
 8000b8e:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000b92:	f5a3 7401 	sub.w	r4, r3, #516	@ 0x204
 8000b96:	f8d7 3688 	ldr.w	r3, [r7, #1672]	@ 0x688
 8000b9a:	e01b      	b.n	8000bd4 <main+0x41c>
 8000b9c:	08005d4c 	.word	0x08005d4c
 8000ba0:	20000014 	.word	0x20000014
 8000ba4:	20000024 	.word	0x20000024
 8000ba8:	20000104 	.word	0x20000104
 8000bac:	08005448 	.word	0x08005448
 8000bb0:	08005464 	.word	0x08005464
 8000bb4:	080054bc 	.word	0x080054bc
 8000bb8:	080054c0 	.word	0x080054c0
 8000bbc:	080054cc 	.word	0x080054cc
 8000bc0:	080054d0 	.word	0x080054d0
 8000bc4:	080054dc 	.word	0x080054dc
 8000bc8:	080054e0 	.word	0x080054e0
 8000bcc:	080054ec 	.word	0x080054ec
 8000bd0:	080054f0 	.word	0x080054f0
 8000bd4:	9319      	str	r3, [sp, #100]	@ 0x64
 8000bd6:	4668      	mov	r0, sp
 8000bd8:	f104 0310 	add.w	r3, r4, #16
 8000bdc:	2263      	movs	r2, #99	@ 0x63
 8000bde:	4619      	mov	r1, r3
 8000be0:	f003 fe27 	bl	8004832 <memcpy>
 8000be4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000be8:	f7ff fd07 	bl	80005fa <instruction_struct_setup>


  instruction_t *hlt = (instruction_t*)malloc(sizeof(instruction_t));
 8000bec:	2073      	movs	r0, #115	@ 0x73
 8000bee:	f003 fab3 	bl	8004158 <malloc>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	f8c7 3684 	str.w	r3, [r7, #1668]	@ 0x684
  instruction_t temp5 = {"hlt", 0b1111, 5, {2, 3, 1, 0, 0}, {{MI, PCO}, {RO, II, PCE}, {HLT}, {0}, {0}}};
 8000bf8:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000bfc:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8000c00:	4618      	mov	r0, r3
 8000c02:	2373      	movs	r3, #115	@ 0x73
 8000c04:	461a      	mov	r2, r3
 8000c06:	2100      	movs	r1, #0
 8000c08:	f003 fd88 	bl	800471c <memset>
 8000c0c:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000c10:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8000c14:	4af2      	ldr	r2, [pc, #968]	@ (8000fe0 <main+0x828>)
 8000c16:	6812      	ldr	r2, [r2, #0]
 8000c18:	4611      	mov	r1, r2
 8000c1a:	8019      	strh	r1, [r3, #0]
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	0c12      	lsrs	r2, r2, #16
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000c26:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8000c2a:	220f      	movs	r2, #15
 8000c2c:	70da      	strb	r2, [r3, #3]
 8000c2e:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000c32:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8000c36:	2205      	movs	r2, #5
 8000c38:	711a      	strb	r2, [r3, #4]
 8000c3a:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000c3e:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8000c42:	49e8      	ldr	r1, [pc, #928]	@ (8000fe4 <main+0x82c>)
 8000c44:	1d5a      	adds	r2, r3, #5
 8000c46:	6808      	ldr	r0, [r1, #0]
 8000c48:	6010      	str	r0, [r2, #0]
 8000c4a:	8889      	ldrh	r1, [r1, #4]
 8000c4c:	8091      	strh	r1, [r2, #4]
 8000c4e:	330b      	adds	r3, #11
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000c58:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8000c5c:	220e      	movs	r2, #14
 8000c5e:	73da      	strb	r2, [r3, #15]
 8000c60:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000c64:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8000c68:	2201      	movs	r2, #1
 8000c6a:	741a      	strb	r2, [r3, #16]
 8000c6c:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000c70:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8000c74:	220c      	movs	r2, #12
 8000c76:	765a      	strb	r2, [r3, #25]
 8000c78:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000c7c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8000c80:	220a      	movs	r2, #10
 8000c82:	769a      	strb	r2, [r3, #26]
 8000c84:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000c88:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	76da      	strb	r2, [r3, #27]
 8000c90:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000c94:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8000c98:	220f      	movs	r2, #15
 8000c9a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  instruction_struct_setup(temp5, hlt);
 8000c9e:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000ca2:	f5a3 741e 	sub.w	r4, r3, #632	@ 0x278
 8000ca6:	f8d7 3684 	ldr.w	r3, [r7, #1668]	@ 0x684
 8000caa:	9319      	str	r3, [sp, #100]	@ 0x64
 8000cac:	4668      	mov	r0, sp
 8000cae:	f104 0310 	add.w	r3, r4, #16
 8000cb2:	2263      	movs	r2, #99	@ 0x63
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f003 fdbc 	bl	8004832 <memcpy>
 8000cba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cbe:	f7ff fc9c 	bl	80005fa <instruction_struct_setup>

  instruction_t *sub = (instruction_t*)malloc(sizeof(instruction_t));
 8000cc2:	2073      	movs	r0, #115	@ 0x73
 8000cc4:	f003 fa48 	bl	8004158 <malloc>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	f8c7 3680 	str.w	r3, [r7, #1664]	@ 0x680
  instruction_t temp6 = {"sub", 0b0011, 5, {2, 3, 2, 2, 3}, {{MI, PCO}, {RO, II, PCE}, {MI, IO}, {RO, BI}, {AI, EO, SUB}}};
 8000cce:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000cd2:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	2373      	movs	r3, #115	@ 0x73
 8000cda:	461a      	mov	r2, r3
 8000cdc:	2100      	movs	r1, #0
 8000cde:	f003 fd1d 	bl	800471c <memset>
 8000ce2:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000ce6:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8000cea:	4abf      	ldr	r2, [pc, #764]	@ (8000fe8 <main+0x830>)
 8000cec:	6812      	ldr	r2, [r2, #0]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	8019      	strh	r1, [r3, #0]
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	0c12      	lsrs	r2, r2, #16
 8000cf6:	701a      	strb	r2, [r3, #0]
 8000cf8:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000cfc:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8000d00:	2203      	movs	r2, #3
 8000d02:	70da      	strb	r2, [r3, #3]
 8000d04:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000d08:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8000d0c:	2205      	movs	r2, #5
 8000d0e:	711a      	strb	r2, [r3, #4]
 8000d10:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000d14:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8000d18:	49b4      	ldr	r1, [pc, #720]	@ (8000fec <main+0x834>)
 8000d1a:	1d5a      	adds	r2, r3, #5
 8000d1c:	6808      	ldr	r0, [r1, #0]
 8000d1e:	6010      	str	r0, [r2, #0]
 8000d20:	8889      	ldrh	r1, [r1, #4]
 8000d22:	8091      	strh	r1, [r2, #4]
 8000d24:	330b      	adds	r3, #11
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000d2e:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8000d32:	220e      	movs	r2, #14
 8000d34:	73da      	strb	r2, [r3, #15]
 8000d36:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000d3a:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8000d3e:	2201      	movs	r2, #1
 8000d40:	741a      	strb	r2, [r3, #16]
 8000d42:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000d46:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	765a      	strb	r2, [r3, #25]
 8000d4e:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000d52:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8000d56:	220a      	movs	r2, #10
 8000d58:	769a      	strb	r2, [r3, #26]
 8000d5a:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000d5e:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8000d62:	2202      	movs	r2, #2
 8000d64:	76da      	strb	r2, [r3, #27]
 8000d66:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000d6a:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8000d6e:	220e      	movs	r2, #14
 8000d70:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8000d74:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000d78:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8000d7c:	220b      	movs	r2, #11
 8000d7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8000d82:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000d86:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8000d90:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000d94:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8000d98:	2205      	movs	r2, #5
 8000d9a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8000d9e:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000da2:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8000da6:	2209      	movs	r2, #9
 8000da8:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
 8000dac:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000db0:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8000db4:	2207      	movs	r2, #7
 8000db6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8000dba:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000dbe:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8000dc2:	2206      	movs	r2, #6
 8000dc4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  instruction_struct_setup(temp6, sub);
 8000dc8:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000dcc:	f5a3 743b 	sub.w	r4, r3, #748	@ 0x2ec
 8000dd0:	f8d7 3680 	ldr.w	r3, [r7, #1664]	@ 0x680
 8000dd4:	9319      	str	r3, [sp, #100]	@ 0x64
 8000dd6:	4668      	mov	r0, sp
 8000dd8:	f104 0310 	add.w	r3, r4, #16
 8000ddc:	2263      	movs	r2, #99	@ 0x63
 8000dde:	4619      	mov	r1, r3
 8000de0:	f003 fd27 	bl	8004832 <memcpy>
 8000de4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000de8:	f7ff fc07 	bl	80005fa <instruction_struct_setup>

  instruction_t *sta = (instruction_t*)malloc(sizeof(instruction_t));
 8000dec:	2073      	movs	r0, #115	@ 0x73
 8000dee:	f003 f9b3 	bl	8004158 <malloc>
 8000df2:	4603      	mov	r3, r0
 8000df4:	f8c7 367c 	str.w	r3, [r7, #1660]	@ 0x67c
  instruction_t temp7 = {"sta", 0b0100, 5, {2, 3, 2, 2, 0}, {{MI, PCO}, {RO, II, PCE}, {MI, IO}, {AO, RI}, {0}}};
 8000df8:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000dfc:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8000e00:	4618      	mov	r0, r3
 8000e02:	2373      	movs	r3, #115	@ 0x73
 8000e04:	461a      	mov	r2, r3
 8000e06:	2100      	movs	r1, #0
 8000e08:	f003 fc88 	bl	800471c <memset>
 8000e0c:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000e10:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8000e14:	4a76      	ldr	r2, [pc, #472]	@ (8000ff0 <main+0x838>)
 8000e16:	6812      	ldr	r2, [r2, #0]
 8000e18:	4611      	mov	r1, r2
 8000e1a:	8019      	strh	r1, [r3, #0]
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	0c12      	lsrs	r2, r2, #16
 8000e20:	701a      	strb	r2, [r3, #0]
 8000e22:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000e26:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	70da      	strb	r2, [r3, #3]
 8000e2e:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000e32:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8000e36:	2205      	movs	r2, #5
 8000e38:	711a      	strb	r2, [r3, #4]
 8000e3a:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000e3e:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8000e42:	496c      	ldr	r1, [pc, #432]	@ (8000ff4 <main+0x83c>)
 8000e44:	1d5a      	adds	r2, r3, #5
 8000e46:	6808      	ldr	r0, [r1, #0]
 8000e48:	6010      	str	r0, [r2, #0]
 8000e4a:	8889      	ldrh	r1, [r1, #4]
 8000e4c:	8091      	strh	r1, [r2, #4]
 8000e4e:	330b      	adds	r3, #11
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000e58:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8000e5c:	220e      	movs	r2, #14
 8000e5e:	73da      	strb	r2, [r3, #15]
 8000e60:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000e64:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8000e68:	2201      	movs	r2, #1
 8000e6a:	741a      	strb	r2, [r3, #16]
 8000e6c:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000e70:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8000e74:	220c      	movs	r2, #12
 8000e76:	765a      	strb	r2, [r3, #25]
 8000e78:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000e7c:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8000e80:	220a      	movs	r2, #10
 8000e82:	769a      	strb	r2, [r3, #26]
 8000e84:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000e88:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	76da      	strb	r2, [r3, #27]
 8000e90:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000e94:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8000e98:	220e      	movs	r2, #14
 8000e9a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8000e9e:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000ea2:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8000ea6:	220b      	movs	r2, #11
 8000ea8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8000eac:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000eb0:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8000eba:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000ebe:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8000ec2:	220d      	movs	r2, #13
 8000ec4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  instruction_struct_setup(temp7, sta);
 8000ec8:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000ecc:	f5a3 7458 	sub.w	r4, r3, #864	@ 0x360
 8000ed0:	f8d7 367c 	ldr.w	r3, [r7, #1660]	@ 0x67c
 8000ed4:	9319      	str	r3, [sp, #100]	@ 0x64
 8000ed6:	4668      	mov	r0, sp
 8000ed8:	f104 0310 	add.w	r3, r4, #16
 8000edc:	2263      	movs	r2, #99	@ 0x63
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f003 fca7 	bl	8004832 <memcpy>
 8000ee4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ee8:	f7ff fb87 	bl	80005fa <instruction_struct_setup>

  instruction_t *ldi = (instruction_t*)malloc(sizeof(instruction_t));
 8000eec:	2073      	movs	r0, #115	@ 0x73
 8000eee:	f003 f933 	bl	8004158 <malloc>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	f8c7 3678 	str.w	r3, [r7, #1656]	@ 0x678
  instruction_t temp8 = {"ldi", 0b0101, 5, {2, 3, 2, 0, 0}, {{MI, PCO}, {RO, II, PCE}, {AI, IO}, {0}, {0}}};
 8000ef8:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000efc:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8000f00:	4618      	mov	r0, r3
 8000f02:	2373      	movs	r3, #115	@ 0x73
 8000f04:	461a      	mov	r2, r3
 8000f06:	2100      	movs	r1, #0
 8000f08:	f003 fc08 	bl	800471c <memset>
 8000f0c:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000f10:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8000f14:	4a38      	ldr	r2, [pc, #224]	@ (8000ff8 <main+0x840>)
 8000f16:	6812      	ldr	r2, [r2, #0]
 8000f18:	4611      	mov	r1, r2
 8000f1a:	8019      	strh	r1, [r3, #0]
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	0c12      	lsrs	r2, r2, #16
 8000f20:	701a      	strb	r2, [r3, #0]
 8000f22:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000f26:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8000f2a:	2205      	movs	r2, #5
 8000f2c:	70da      	strb	r2, [r3, #3]
 8000f2e:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000f32:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8000f36:	2205      	movs	r2, #5
 8000f38:	711a      	strb	r2, [r3, #4]
 8000f3a:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000f3e:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8000f42:	492e      	ldr	r1, [pc, #184]	@ (8000ffc <main+0x844>)
 8000f44:	1d5a      	adds	r2, r3, #5
 8000f46:	6808      	ldr	r0, [r1, #0]
 8000f48:	6010      	str	r0, [r2, #0]
 8000f4a:	8889      	ldrh	r1, [r1, #4]
 8000f4c:	8091      	strh	r1, [r2, #4]
 8000f4e:	330b      	adds	r3, #11
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000f58:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8000f5c:	220e      	movs	r2, #14
 8000f5e:	73da      	strb	r2, [r3, #15]
 8000f60:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000f64:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8000f68:	2201      	movs	r2, #1
 8000f6a:	741a      	strb	r2, [r3, #16]
 8000f6c:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000f70:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8000f74:	220c      	movs	r2, #12
 8000f76:	765a      	strb	r2, [r3, #25]
 8000f78:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000f7c:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8000f80:	220a      	movs	r2, #10
 8000f82:	769a      	strb	r2, [r3, #26]
 8000f84:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000f88:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	76da      	strb	r2, [r3, #27]
 8000f90:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000f94:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8000f98:	2209      	movs	r2, #9
 8000f9a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8000f9e:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000fa2:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8000fa6:	220b      	movs	r2, #11
 8000fa8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  instruction_struct_setup(temp8, ldi);
 8000fac:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8000fb0:	f5a3 7475 	sub.w	r4, r3, #980	@ 0x3d4
 8000fb4:	f8d7 3678 	ldr.w	r3, [r7, #1656]	@ 0x678
 8000fb8:	9319      	str	r3, [sp, #100]	@ 0x64
 8000fba:	4668      	mov	r0, sp
 8000fbc:	f104 0310 	add.w	r3, r4, #16
 8000fc0:	2263      	movs	r2, #99	@ 0x63
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f003 fc35 	bl	8004832 <memcpy>
 8000fc8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fcc:	f7ff fb15 	bl	80005fa <instruction_struct_setup>

  instruction_t *jmp = (instruction_t*)malloc(sizeof(instruction_t));
 8000fd0:	2073      	movs	r0, #115	@ 0x73
 8000fd2:	f003 f8c1 	bl	8004158 <malloc>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	f8c7 3674 	str.w	r3, [r7, #1652]	@ 0x674
 8000fdc:	e010      	b.n	8001000 <main+0x848>
 8000fde:	bf00      	nop
 8000fe0:	080054fc 	.word	0x080054fc
 8000fe4:	08005500 	.word	0x08005500
 8000fe8:	0800550c 	.word	0x0800550c
 8000fec:	08005510 	.word	0x08005510
 8000ff0:	0800551c 	.word	0x0800551c
 8000ff4:	080054d0 	.word	0x080054d0
 8000ff8:	08005520 	.word	0x08005520
 8000ffc:	080054f0 	.word	0x080054f0
  instruction_t temp9 = {"jmp", 0b0110, 5, {2, 3, 2, 0, 0}, {{MI, PCO}, {RO, II, PCE}, {J, IO}, {0}, {0}}};
 8001000:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8001004:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8001008:	4618      	mov	r0, r3
 800100a:	2373      	movs	r3, #115	@ 0x73
 800100c:	461a      	mov	r2, r3
 800100e:	2100      	movs	r1, #0
 8001010:	f003 fb84 	bl	800471c <memset>
 8001014:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8001018:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800101c:	4ac8      	ldr	r2, [pc, #800]	@ (8001340 <main+0xb88>)
 800101e:	6812      	ldr	r2, [r2, #0]
 8001020:	4611      	mov	r1, r2
 8001022:	8019      	strh	r1, [r3, #0]
 8001024:	3302      	adds	r3, #2
 8001026:	0c12      	lsrs	r2, r2, #16
 8001028:	701a      	strb	r2, [r3, #0]
 800102a:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 800102e:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8001032:	2206      	movs	r2, #6
 8001034:	70da      	strb	r2, [r3, #3]
 8001036:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 800103a:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800103e:	2205      	movs	r2, #5
 8001040:	711a      	strb	r2, [r3, #4]
 8001042:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8001046:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800104a:	49be      	ldr	r1, [pc, #760]	@ (8001344 <main+0xb8c>)
 800104c:	1d5a      	adds	r2, r3, #5
 800104e:	6808      	ldr	r0, [r1, #0]
 8001050:	6010      	str	r0, [r2, #0]
 8001052:	8889      	ldrh	r1, [r1, #4]
 8001054:	8091      	strh	r1, [r2, #4]
 8001056:	330b      	adds	r3, #11
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8001060:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8001064:	220e      	movs	r2, #14
 8001066:	73da      	strb	r2, [r3, #15]
 8001068:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 800106c:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8001070:	2201      	movs	r2, #1
 8001072:	741a      	strb	r2, [r3, #16]
 8001074:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8001078:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 800107c:	220c      	movs	r2, #12
 800107e:	765a      	strb	r2, [r3, #25]
 8001080:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8001084:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8001088:	220a      	movs	r2, #10
 800108a:	769a      	strb	r2, [r3, #26]
 800108c:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8001090:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8001094:	2202      	movs	r2, #2
 8001096:	76da      	strb	r2, [r3, #27]
 8001098:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 800109c:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80010a0:	220b      	movs	r2, #11
 80010a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  instruction_struct_setup(temp9, jmp);
 80010a6:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 80010aa:	f5a3 6489 	sub.w	r4, r3, #1096	@ 0x448
 80010ae:	f8d7 3674 	ldr.w	r3, [r7, #1652]	@ 0x674
 80010b2:	9319      	str	r3, [sp, #100]	@ 0x64
 80010b4:	4668      	mov	r0, sp
 80010b6:	f104 0310 	add.w	r3, r4, #16
 80010ba:	2263      	movs	r2, #99	@ 0x63
 80010bc:	4619      	mov	r1, r3
 80010be:	f003 fbb8 	bl	8004832 <memcpy>
 80010c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010c6:	f7ff fa98 	bl	80005fa <instruction_struct_setup>

  uint8_t intr_list = 9;
 80010ca:	2309      	movs	r3, #9
 80010cc:	f887 3673 	strb.w	r3, [r7, #1651]	@ 0x673
  instruction_t **list = (instruction_t**)malloc(intr_list*sizeof(instruction_t*));
 80010d0:	f897 3673 	ldrb.w	r3, [r7, #1651]	@ 0x673
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 f83e 	bl	8004158 <malloc>
 80010dc:	4603      	mov	r3, r0
 80010de:	f8c7 366c 	str.w	r3, [r7, #1644]	@ 0x66c
  list[0] = zro;
 80010e2:	f8d7 366c 	ldr.w	r3, [r7, #1644]	@ 0x66c
 80010e6:	f8d7 2694 	ldr.w	r2, [r7, #1684]	@ 0x694
 80010ea:	601a      	str	r2, [r3, #0]
  list[1] = lda;
 80010ec:	f8d7 366c 	ldr.w	r3, [r7, #1644]	@ 0x66c
 80010f0:	3304      	adds	r3, #4
 80010f2:	f8d7 2690 	ldr.w	r2, [r7, #1680]	@ 0x690
 80010f6:	601a      	str	r2, [r3, #0]
  list[2] = add;
 80010f8:	f8d7 366c 	ldr.w	r3, [r7, #1644]	@ 0x66c
 80010fc:	3308      	adds	r3, #8
 80010fe:	f8d7 268c 	ldr.w	r2, [r7, #1676]	@ 0x68c
 8001102:	601a      	str	r2, [r3, #0]
  list[3] = out;
 8001104:	f8d7 366c 	ldr.w	r3, [r7, #1644]	@ 0x66c
 8001108:	330c      	adds	r3, #12
 800110a:	f8d7 2688 	ldr.w	r2, [r7, #1672]	@ 0x688
 800110e:	601a      	str	r2, [r3, #0]
  list[4] = hlt;
 8001110:	f8d7 366c 	ldr.w	r3, [r7, #1644]	@ 0x66c
 8001114:	3310      	adds	r3, #16
 8001116:	f8d7 2684 	ldr.w	r2, [r7, #1668]	@ 0x684
 800111a:	601a      	str	r2, [r3, #0]
  list[5] = sub;
 800111c:	f8d7 366c 	ldr.w	r3, [r7, #1644]	@ 0x66c
 8001120:	3314      	adds	r3, #20
 8001122:	f8d7 2680 	ldr.w	r2, [r7, #1664]	@ 0x680
 8001126:	601a      	str	r2, [r3, #0]
  list[6] = sta;
 8001128:	f8d7 366c 	ldr.w	r3, [r7, #1644]	@ 0x66c
 800112c:	3318      	adds	r3, #24
 800112e:	f8d7 267c 	ldr.w	r2, [r7, #1660]	@ 0x67c
 8001132:	601a      	str	r2, [r3, #0]
  list[7] = ldi;
 8001134:	f8d7 366c 	ldr.w	r3, [r7, #1644]	@ 0x66c
 8001138:	331c      	adds	r3, #28
 800113a:	f8d7 2678 	ldr.w	r2, [r7, #1656]	@ 0x678
 800113e:	601a      	str	r2, [r3, #0]
  list[8] = jmp;
 8001140:	f8d7 366c 	ldr.w	r3, [r7, #1644]	@ 0x66c
 8001144:	3320      	adds	r3, #32
 8001146:	f8d7 2674 	ldr.w	r2, [r7, #1652]	@ 0x674
 800114a:	601a      	str	r2, [r3, #0]


  control_unit_lut_t output_CU_LUT = {0};
 800114c:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8001150:	f5a3 63d4 	sub.w	r3, r3, #1696	@ 0x6a0
 8001154:	4618      	mov	r0, r3
 8001156:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800115a:	461a      	mov	r2, r3
 800115c:	2100      	movs	r1, #0
 800115e:	f003 fadd 	bl	800471c <memset>

  uint8_t ISA_CU_Lines = generate_eeprom_ISA_CU_table(list, &output_CU_LUT, intr_list);
 8001162:	f897 2673 	ldrb.w	r2, [r7, #1651]	@ 0x673
 8001166:	463b      	mov	r3, r7
 8001168:	4619      	mov	r1, r3
 800116a:	f8d7 066c 	ldr.w	r0, [r7, #1644]	@ 0x66c
 800116e:	f7ff faad 	bl	80006cc <generate_eeprom_ISA_CU_table>
 8001172:	4603      	mov	r3, r0
 8001174:	f887 366b 	strb.w	r3, [r7, #1643]	@ 0x66b

  int _temp = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	f8c7 369c 	str.w	r3, [r7, #1692]	@ 0x69c
  for(int i = 0; i < ISA_CU_Lines; i++){
 800117e:	2300      	movs	r3, #0
 8001180:	f8c7 3698 	str.w	r3, [r7, #1688]	@ 0x698
 8001184:	e026      	b.n	80011d4 <main+0xa1c>
	  _temp += write_eeprom_addr(output_CU_LUT.addresses[i], eeprom_control_unit_converter(output_CU_LUT.set_control_bits[i], PROGRAM_EEPROM));
 8001186:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 800118a:	f5a3 62d4 	sub.w	r2, r3, #1696	@ 0x6a0
 800118e:	f8d7 3698 	ldr.w	r3, [r7, #1688]	@ 0x698
 8001192:	4413      	add	r3, r2
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461c      	mov	r4, r3
 8001198:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 800119c:	f5a3 63d4 	sub.w	r3, r3, #1696	@ 0x6a0
 80011a0:	f8d7 2698 	ldr.w	r2, [r7, #1688]	@ 0x698
 80011a4:	3264      	adds	r2, #100	@ 0x64
 80011a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80011aa:	210b      	movs	r1, #11
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 fe13 	bl	8001dd8 <eeprom_control_unit_converter>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4619      	mov	r1, r3
 80011b6:	4620      	mov	r0, r4
 80011b8:	f000 fd65 	bl	8001c86 <write_eeprom_addr>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	f8d7 369c 	ldr.w	r3, [r7, #1692]	@ 0x69c
 80011c4:	4413      	add	r3, r2
 80011c6:	f8c7 369c 	str.w	r3, [r7, #1692]	@ 0x69c
  for(int i = 0; i < ISA_CU_Lines; i++){
 80011ca:	f8d7 3698 	ldr.w	r3, [r7, #1688]	@ 0x698
 80011ce:	3301      	adds	r3, #1
 80011d0:	f8c7 3698 	str.w	r3, [r7, #1688]	@ 0x698
 80011d4:	f897 366b 	ldrb.w	r3, [r7, #1643]	@ 0x66b
 80011d8:	f8d7 2698 	ldr.w	r2, [r7, #1688]	@ 0x698
 80011dc:	429a      	cmp	r2, r3
 80011de:	dbd2      	blt.n	8001186 <main+0x9ce>
  }
  printf("\nWrote %d/%d bytes to EEPROM.\n\n", _temp, ISA_CU_Lines);
 80011e0:	f897 366b 	ldrb.w	r3, [r7, #1643]	@ 0x66b
 80011e4:	461a      	mov	r2, r3
 80011e6:	f8d7 169c 	ldr.w	r1, [r7, #1692]	@ 0x69c
 80011ea:	4857      	ldr	r0, [pc, #348]	@ (8001348 <main+0xb90>)
 80011ec:	f003 f92c 	bl	8004448 <iprintf>

  printContents();
 80011f0:	f000 fd7a 	bl	8001ce8 <printContents>

  display_addr = 0;
 80011f4:	4b55      	ldr	r3, [pc, #340]	@ (800134c <main+0xb94>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(IN1_GPIO_Port, IN1_Pin) == GPIO_PIN_SET){
 80011fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011fe:	4854      	ldr	r0, [pc, #336]	@ (8001350 <main+0xb98>)
 8001200:	f001 fb40 	bl	8002884 <HAL_GPIO_ReadPin>
 8001204:	4603      	mov	r3, r0
 8001206:	2b01      	cmp	r3, #1
 8001208:	d108      	bne.n	800121c <main+0xa64>
		  display_addr += 4;
 800120a:	4b50      	ldr	r3, [pc, #320]	@ (800134c <main+0xb94>)
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	3304      	adds	r3, #4
 8001210:	b29a      	uxth	r2, r3
 8001212:	4b4e      	ldr	r3, [pc, #312]	@ (800134c <main+0xb94>)
 8001214:	801a      	strh	r2, [r3, #0]
		  HAL_Delay(50);
 8001216:	2032      	movs	r0, #50	@ 0x32
 8001218:	f001 f8a6 	bl	8002368 <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(IN2_GPIO_Port, IN2_Pin) == GPIO_PIN_SET){
 800121c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001220:	484c      	ldr	r0, [pc, #304]	@ (8001354 <main+0xb9c>)
 8001222:	f001 fb2f 	bl	8002884 <HAL_GPIO_ReadPin>
 8001226:	4603      	mov	r3, r0
 8001228:	2b01      	cmp	r3, #1
 800122a:	d108      	bne.n	800123e <main+0xa86>
		  display_addr -= 4;
 800122c:	4b47      	ldr	r3, [pc, #284]	@ (800134c <main+0xb94>)
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	3b04      	subs	r3, #4
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b45      	ldr	r3, [pc, #276]	@ (800134c <main+0xb94>)
 8001236:	801a      	strh	r2, [r3, #0]
		  HAL_Delay(50);
 8001238:	2032      	movs	r0, #50	@ 0x32
 800123a:	f001 f895 	bl	8002368 <HAL_Delay>
	  }

	  ssd1306_Fill(Black);
 800123e:	2000      	movs	r0, #0
 8001240:	f000 fe8a 	bl	8001f58 <ssd1306_Fill>
	  sprintf(dataText, "%04x %02x %02x %02x %02x", display_addr, read_eeprom_addr(display_addr), read_eeprom_addr(display_addr + 1), read_eeprom_addr(display_addr + 2), read_eeprom_addr(display_addr + 3));
 8001244:	4b41      	ldr	r3, [pc, #260]	@ (800134c <main+0xb94>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	461e      	mov	r6, r3
 800124a:	4b40      	ldr	r3, [pc, #256]	@ (800134c <main+0xb94>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fcfa 	bl	8001c48 <read_eeprom_addr>
 8001254:	4603      	mov	r3, r0
 8001256:	4698      	mov	r8, r3
 8001258:	4b3c      	ldr	r3, [pc, #240]	@ (800134c <main+0xb94>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	b29b      	uxth	r3, r3
 8001260:	4618      	mov	r0, r3
 8001262:	f000 fcf1 	bl	8001c48 <read_eeprom_addr>
 8001266:	4603      	mov	r3, r0
 8001268:	461c      	mov	r4, r3
 800126a:	4b38      	ldr	r3, [pc, #224]	@ (800134c <main+0xb94>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	3302      	adds	r3, #2
 8001270:	b29b      	uxth	r3, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f000 fce8 	bl	8001c48 <read_eeprom_addr>
 8001278:	4603      	mov	r3, r0
 800127a:	461d      	mov	r5, r3
 800127c:	4b33      	ldr	r3, [pc, #204]	@ (800134c <main+0xb94>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	3303      	adds	r3, #3
 8001282:	b29b      	uxth	r3, r3
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fcdf 	bl	8001c48 <read_eeprom_addr>
 800128a:	4603      	mov	r3, r0
 800128c:	9302      	str	r3, [sp, #8]
 800128e:	9501      	str	r5, [sp, #4]
 8001290:	9400      	str	r4, [sp, #0]
 8001292:	4643      	mov	r3, r8
 8001294:	4632      	mov	r2, r6
 8001296:	4930      	ldr	r1, [pc, #192]	@ (8001358 <main+0xba0>)
 8001298:	4830      	ldr	r0, [pc, #192]	@ (800135c <main+0xba4>)
 800129a:	f003 f945 	bl	8004528 <siprintf>
	  ssd1306_SetCursor(5, 1);
 800129e:	2101      	movs	r1, #1
 80012a0:	2005      	movs	r0, #5
 80012a2:	f000 ffa5 	bl	80021f0 <ssd1306_SetCursor>
	  retVal = ssd1306_WriteString(dataText, Font_7x10, White);
 80012a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001360 <main+0xba8>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	9200      	str	r2, [sp, #0]
 80012ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ae:	482b      	ldr	r0, [pc, #172]	@ (800135c <main+0xba4>)
 80012b0:	f000 ff78 	bl	80021a4 <ssd1306_WriteString>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001364 <main+0xbac>)
 80012ba:	701a      	strb	r2, [r3, #0]

	  sprintf(dataText, "%04x %02x %02x %02x %02x", (display_addr + 4), read_eeprom_addr(display_addr + 4), read_eeprom_addr(display_addr + 5), read_eeprom_addr(display_addr + 6), read_eeprom_addr(display_addr + 7));
 80012bc:	4b23      	ldr	r3, [pc, #140]	@ (800134c <main+0xb94>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	1d1c      	adds	r4, r3, #4
 80012c2:	4b22      	ldr	r3, [pc, #136]	@ (800134c <main+0xb94>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	3304      	adds	r3, #4
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 fcbc 	bl	8001c48 <read_eeprom_addr>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4698      	mov	r8, r3
 80012d4:	4b1d      	ldr	r3, [pc, #116]	@ (800134c <main+0xb94>)
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	3305      	adds	r3, #5
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fcb3 	bl	8001c48 <read_eeprom_addr>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461d      	mov	r5, r3
 80012e6:	4b19      	ldr	r3, [pc, #100]	@ (800134c <main+0xb94>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	3306      	adds	r3, #6
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fcaa 	bl	8001c48 <read_eeprom_addr>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461e      	mov	r6, r3
 80012f8:	4b14      	ldr	r3, [pc, #80]	@ (800134c <main+0xb94>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	3307      	adds	r3, #7
 80012fe:	b29b      	uxth	r3, r3
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fca1 	bl	8001c48 <read_eeprom_addr>
 8001306:	4603      	mov	r3, r0
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	9601      	str	r6, [sp, #4]
 800130c:	9500      	str	r5, [sp, #0]
 800130e:	4643      	mov	r3, r8
 8001310:	4622      	mov	r2, r4
 8001312:	4911      	ldr	r1, [pc, #68]	@ (8001358 <main+0xba0>)
 8001314:	4811      	ldr	r0, [pc, #68]	@ (800135c <main+0xba4>)
 8001316:	f003 f907 	bl	8004528 <siprintf>
	  ssd1306_SetCursor(5, 15);
 800131a:	210f      	movs	r1, #15
 800131c:	2005      	movs	r0, #5
 800131e:	f000 ff67 	bl	80021f0 <ssd1306_SetCursor>
	  retVal = ssd1306_WriteString(dataText, Font_7x10, White);
 8001322:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <main+0xba8>)
 8001324:	2201      	movs	r2, #1
 8001326:	9200      	str	r2, [sp, #0]
 8001328:	cb0e      	ldmia	r3, {r1, r2, r3}
 800132a:	480c      	ldr	r0, [pc, #48]	@ (800135c <main+0xba4>)
 800132c:	f000 ff3a 	bl	80021a4 <ssd1306_WriteString>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	4b0b      	ldr	r3, [pc, #44]	@ (8001364 <main+0xbac>)
 8001336:	701a      	strb	r2, [r3, #0]
	  ssd1306_UpdateScreen();
 8001338:	f000 fe26 	bl	8001f88 <ssd1306_UpdateScreen>
	  if(HAL_GPIO_ReadPin(IN1_GPIO_Port, IN1_Pin) == GPIO_PIN_SET){
 800133c:	e75d      	b.n	80011fa <main+0xa42>
 800133e:	bf00      	nop
 8001340:	08005524 	.word	0x08005524
 8001344:	080054f0 	.word	0x080054f0
 8001348:	08005480 	.word	0x08005480
 800134c:	2000014e 	.word	0x2000014e
 8001350:	40020400 	.word	0x40020400
 8001354:	40020000 	.word	0x40020000
 8001358:	080054a0 	.word	0x080054a0
 800135c:	20000000 	.word	0x20000000
 8001360:	08005d4c 	.word	0x08005d4c
 8001364:	2000014c 	.word	0x2000014c

08001368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b094      	sub	sp, #80	@ 0x50
 800136c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136e:	f107 0320 	add.w	r3, r7, #32
 8001372:	2230      	movs	r2, #48	@ 0x30
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f003 f9d0 	bl	800471c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800138c:	2300      	movs	r3, #0
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	4b27      	ldr	r3, [pc, #156]	@ (8001430 <SystemClock_Config+0xc8>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	4a26      	ldr	r2, [pc, #152]	@ (8001430 <SystemClock_Config+0xc8>)
 8001396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800139a:	6413      	str	r3, [r2, #64]	@ 0x40
 800139c:	4b24      	ldr	r3, [pc, #144]	@ (8001430 <SystemClock_Config+0xc8>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a8:	2300      	movs	r3, #0
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	4b21      	ldr	r3, [pc, #132]	@ (8001434 <SystemClock_Config+0xcc>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a20      	ldr	r2, [pc, #128]	@ (8001434 <SystemClock_Config+0xcc>)
 80013b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001434 <SystemClock_Config+0xcc>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013c4:	2301      	movs	r3, #1
 80013c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ce:	2302      	movs	r3, #2
 80013d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013d8:	2304      	movs	r3, #4
 80013da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80013dc:	2364      	movs	r3, #100	@ 0x64
 80013de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013e4:	2304      	movs	r3, #4
 80013e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e8:	f107 0320 	add.w	r3, r7, #32
 80013ec:	4618      	mov	r0, r3
 80013ee:	f001 ff29 	bl	8003244 <HAL_RCC_OscConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013f8:	f000 f960 	bl	80016bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fc:	230f      	movs	r3, #15
 80013fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001400:	2302      	movs	r3, #2
 8001402:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001408:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800140c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	2103      	movs	r1, #3
 8001418:	4618      	mov	r0, r3
 800141a:	f002 f98b 	bl	8003734 <HAL_RCC_ClockConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001424:	f000 f94a 	bl	80016bc <Error_Handler>
  }
}
 8001428:	bf00      	nop
 800142a:	3750      	adds	r7, #80	@ 0x50
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	40007000 	.word	0x40007000

08001438 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <MX_I2C1_Init+0x50>)
 800143e:	4a13      	ldr	r2, [pc, #76]	@ (800148c <MX_I2C1_Init+0x54>)
 8001440:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001442:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <MX_I2C1_Init+0x50>)
 8001444:	4a12      	ldr	r2, [pc, #72]	@ (8001490 <MX_I2C1_Init+0x58>)
 8001446:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001448:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <MX_I2C1_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800144e:	4b0e      	ldr	r3, [pc, #56]	@ (8001488 <MX_I2C1_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001454:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <MX_I2C1_Init+0x50>)
 8001456:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800145a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800145c:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <MX_I2C1_Init+0x50>)
 800145e:	2200      	movs	r2, #0
 8001460:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001462:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <MX_I2C1_Init+0x50>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001468:	4b07      	ldr	r3, [pc, #28]	@ (8001488 <MX_I2C1_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146e:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <MX_I2C1_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001474:	4804      	ldr	r0, [pc, #16]	@ (8001488 <MX_I2C1_Init+0x50>)
 8001476:	f001 fa37 	bl	80028e8 <HAL_I2C_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001480:	f000 f91c 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200000b0 	.word	0x200000b0
 800148c:	40005400 	.word	0x40005400
 8001490:	000186a0 	.word	0x000186a0

08001494 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a8:	463b      	mov	r3, r7
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014b0:	4b1e      	ldr	r3, [pc, #120]	@ (800152c <MX_TIM1_Init+0x98>)
 80014b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001530 <MX_TIM1_Init+0x9c>)
 80014b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014b6:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <MX_TIM1_Init+0x98>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <MX_TIM1_Init+0x98>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <MX_TIM1_Init+0x98>)
 80014c4:	220a      	movs	r2, #10
 80014c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c8:	4b18      	ldr	r3, [pc, #96]	@ (800152c <MX_TIM1_Init+0x98>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ce:	4b17      	ldr	r3, [pc, #92]	@ (800152c <MX_TIM1_Init+0x98>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014d4:	4b15      	ldr	r3, [pc, #84]	@ (800152c <MX_TIM1_Init+0x98>)
 80014d6:	2280      	movs	r2, #128	@ 0x80
 80014d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014da:	4814      	ldr	r0, [pc, #80]	@ (800152c <MX_TIM1_Init+0x98>)
 80014dc:	f002 fb36 	bl	8003b4c <HAL_TIM_Base_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80014e6:	f000 f8e9 	bl	80016bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014f0:	f107 0308 	add.w	r3, r7, #8
 80014f4:	4619      	mov	r1, r3
 80014f6:	480d      	ldr	r0, [pc, #52]	@ (800152c <MX_TIM1_Init+0x98>)
 80014f8:	f002 fbd2 	bl	8003ca0 <HAL_TIM_ConfigClockSource>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001502:	f000 f8db 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800150e:	463b      	mov	r3, r7
 8001510:	4619      	mov	r1, r3
 8001512:	4806      	ldr	r0, [pc, #24]	@ (800152c <MX_TIM1_Init+0x98>)
 8001514:	f002 fdb2 	bl	800407c <HAL_TIMEx_MasterConfigSynchronization>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800151e:	f000 f8cd 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000104 	.word	0x20000104
 8001530:	40010000 	.word	0x40010000

08001534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	@ 0x28
 8001538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	4b49      	ldr	r3, [pc, #292]	@ (8001674 <MX_GPIO_Init+0x140>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	4a48      	ldr	r2, [pc, #288]	@ (8001674 <MX_GPIO_Init+0x140>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6313      	str	r3, [r2, #48]	@ 0x30
 800155a:	4b46      	ldr	r3, [pc, #280]	@ (8001674 <MX_GPIO_Init+0x140>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b42      	ldr	r3, [pc, #264]	@ (8001674 <MX_GPIO_Init+0x140>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a41      	ldr	r2, [pc, #260]	@ (8001674 <MX_GPIO_Init+0x140>)
 8001570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b3f      	ldr	r3, [pc, #252]	@ (8001674 <MX_GPIO_Init+0x140>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	4b3b      	ldr	r3, [pc, #236]	@ (8001674 <MX_GPIO_Init+0x140>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	4a3a      	ldr	r2, [pc, #232]	@ (8001674 <MX_GPIO_Init+0x140>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	@ 0x30
 8001592:	4b38      	ldr	r3, [pc, #224]	@ (8001674 <MX_GPIO_Init+0x140>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	4b34      	ldr	r3, [pc, #208]	@ (8001674 <MX_GPIO_Init+0x140>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	4a33      	ldr	r2, [pc, #204]	@ (8001674 <MX_GPIO_Init+0x140>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ae:	4b31      	ldr	r3, [pc, #196]	@ (8001674 <MX_GPIO_Init+0x140>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GREEN_Pin|WRITE_LED_Pin|READ_LED_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80015c0:	482d      	ldr	r0, [pc, #180]	@ (8001678 <MX_GPIO_Init+0x144>)
 80015c2:	f001 f977 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD0_Pin|AD1_Pin|AD2_Pin|AD3_Pin
 80015c6:	2200      	movs	r2, #0
 80015c8:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 80015cc:	482b      	ldr	r0, [pc, #172]	@ (800167c <MX_GPIO_Init+0x148>)
 80015ce:	f001 f971 	bl	80028b4 <HAL_GPIO_WritePin>
                          |AD4_Pin|AD5_Pin|AD6_Pin|AD7_Pin
                          |AD8_Pin|AD9_Pin|AD10_Pin|AD11_Pin
                          |AD12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, WE_Pin|OE_Pin|CE_Pin|IO4_Pin
 80015d2:	2200      	movs	r2, #0
 80015d4:	f24f 01f7 	movw	r1, #61687	@ 0xf0f7
 80015d8:	4829      	ldr	r0, [pc, #164]	@ (8001680 <MX_GPIO_Init+0x14c>)
 80015da:	f001 f96b 	bl	80028b4 <HAL_GPIO_WritePin>
                          |IO5_Pin|IO6_Pin|IO7_Pin|IO0_Pin
                          |IO1_Pin|IO2_Pin|IO3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : GREEN_Pin WRITE_LED_Pin READ_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin|WRITE_LED_Pin|READ_LED_Pin;
 80015de:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80015e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	4820      	ldr	r0, [pc, #128]	@ (8001678 <MX_GPIO_Init+0x144>)
 80015f8:	f000 ffc0 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : AD0_Pin AD1_Pin AD2_Pin AD3_Pin
                           AD4_Pin AD5_Pin AD6_Pin AD7_Pin
                           AD8_Pin AD9_Pin AD10_Pin AD11_Pin
                           AD12_Pin */
  GPIO_InitStruct.Pin = AD0_Pin|AD1_Pin|AD2_Pin|AD3_Pin
 80015fc:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001600:	617b      	str	r3, [r7, #20]
                          |AD4_Pin|AD5_Pin|AD6_Pin|AD7_Pin
                          |AD8_Pin|AD9_Pin|AD10_Pin|AD11_Pin
                          |AD12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	2301      	movs	r3, #1
 8001604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	4819      	ldr	r0, [pc, #100]	@ (800167c <MX_GPIO_Init+0x148>)
 8001616:	f000 ffb1 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : WE_Pin OE_Pin CE_Pin IO4_Pin
                           IO5_Pin IO6_Pin IO7_Pin IO0_Pin
                           IO1_Pin IO2_Pin IO3_Pin */
  GPIO_InitStruct.Pin = WE_Pin|OE_Pin|CE_Pin|IO4_Pin
 800161a:	f24f 03f7 	movw	r3, #61687	@ 0xf0f7
 800161e:	617b      	str	r3, [r7, #20]
                          |IO5_Pin|IO6_Pin|IO7_Pin|IO0_Pin
                          |IO1_Pin|IO2_Pin|IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001620:	2301      	movs	r3, #1
 8001622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4813      	ldr	r0, [pc, #76]	@ (8001680 <MX_GPIO_Init+0x14c>)
 8001634:	f000 ffa2 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_Pin */
  GPIO_InitStruct.Pin = IN1_Pin;
 8001638:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800163c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001642:	2302      	movs	r3, #2
 8001644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN1_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	480c      	ldr	r0, [pc, #48]	@ (8001680 <MX_GPIO_Init+0x14c>)
 800164e:	f000 ff95 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN2_Pin */
  GPIO_InitStruct.Pin = IN2_Pin;
 8001652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800165c:	2302      	movs	r3, #2
 800165e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN2_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	4805      	ldr	r0, [pc, #20]	@ (800167c <MX_GPIO_Init+0x148>)
 8001668:	f000 ff88 	bl	800257c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800166c:	bf00      	nop
 800166e:	3728      	adds	r7, #40	@ 0x28
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40023800 	.word	0x40023800
 8001678:	40020800 	.word	0x40020800
 800167c:	40020000 	.word	0x40020000
 8001680:	40020400 	.word	0x40020400

08001684 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	e009      	b.n	80016aa <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	60ba      	str	r2, [r7, #8]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff84 	bl	80005ac <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3301      	adds	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	dbf1      	blt.n	8001696 <_write+0x12>
  }
  return len;
 80016b2:	687b      	ldr	r3, [r7, #4]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c0:	b672      	cpsid	i
}
 80016c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <Error_Handler+0x8>

080016c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	4b10      	ldr	r3, [pc, #64]	@ (8001714 <HAL_MspInit+0x4c>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001714 <HAL_MspInit+0x4c>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80016de:	4b0d      	ldr	r3, [pc, #52]	@ (8001714 <HAL_MspInit+0x4c>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	603b      	str	r3, [r7, #0]
 80016ee:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <HAL_MspInit+0x4c>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	4a08      	ldr	r2, [pc, #32]	@ (8001714 <HAL_MspInit+0x4c>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fa:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <HAL_MspInit+0x4c>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800

08001718 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	@ 0x28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a19      	ldr	r2, [pc, #100]	@ (800179c <HAL_I2C_MspInit+0x84>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d12c      	bne.n	8001794 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	4b18      	ldr	r3, [pc, #96]	@ (80017a0 <HAL_I2C_MspInit+0x88>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a17      	ldr	r2, [pc, #92]	@ (80017a0 <HAL_I2C_MspInit+0x88>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <HAL_I2C_MspInit+0x88>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001756:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800175a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800175c:	2312      	movs	r3, #18
 800175e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001768:	2304      	movs	r3, #4
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	480c      	ldr	r0, [pc, #48]	@ (80017a4 <HAL_I2C_MspInit+0x8c>)
 8001774:	f000 ff02 	bl	800257c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	4b08      	ldr	r3, [pc, #32]	@ (80017a0 <HAL_I2C_MspInit+0x88>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001780:	4a07      	ldr	r2, [pc, #28]	@ (80017a0 <HAL_I2C_MspInit+0x88>)
 8001782:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001786:	6413      	str	r3, [r2, #64]	@ 0x40
 8001788:	4b05      	ldr	r3, [pc, #20]	@ (80017a0 <HAL_I2C_MspInit+0x88>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001794:	bf00      	nop
 8001796:	3728      	adds	r7, #40	@ 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40005400 	.word	0x40005400
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40020400 	.word	0x40020400

080017a8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0b      	ldr	r2, [pc, #44]	@ (80017e4 <HAL_TIM_Base_MspInit+0x3c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d10d      	bne.n	80017d6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	4b0a      	ldr	r3, [pc, #40]	@ (80017e8 <HAL_TIM_Base_MspInit+0x40>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	4a09      	ldr	r2, [pc, #36]	@ (80017e8 <HAL_TIM_Base_MspInit+0x40>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ca:	4b07      	ldr	r3, [pc, #28]	@ (80017e8 <HAL_TIM_Base_MspInit+0x40>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40010000 	.word	0x40010000
 80017e8:	40023800 	.word	0x40023800

080017ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <NMI_Handler+0x4>

080017f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <MemManage_Handler+0x4>

08001804 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <UsageFault_Handler+0x4>

08001814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001842:	f000 fd71 	bl	8002328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}

0800184a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b086      	sub	sp, #24
 800184e:	af00      	add	r7, sp, #0
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	e00a      	b.n	8001872 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800185c:	f3af 8000 	nop.w
 8001860:	4601      	mov	r1, r0
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	60ba      	str	r2, [r7, #8]
 8001868:	b2ca      	uxtb	r2, r1
 800186a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	3301      	adds	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	429a      	cmp	r2, r3
 8001878:	dbf0      	blt.n	800185c <_read+0x12>
  }

  return len;
 800187a:	687b      	ldr	r3, [r7, #4]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018ac:	605a      	str	r2, [r3, #4]
  return 0;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <_isatty>:

int _isatty(int file)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018c4:	2301      	movs	r3, #1
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b085      	sub	sp, #20
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f4:	4a14      	ldr	r2, [pc, #80]	@ (8001948 <_sbrk+0x5c>)
 80018f6:	4b15      	ldr	r3, [pc, #84]	@ (800194c <_sbrk+0x60>)
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001900:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001908:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <_sbrk+0x64>)
 800190a:	4a12      	ldr	r2, [pc, #72]	@ (8001954 <_sbrk+0x68>)
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190e:	4b10      	ldr	r3, [pc, #64]	@ (8001950 <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	429a      	cmp	r2, r3
 800191a:	d207      	bcs.n	800192c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800191c:	f002 ff5c 	bl	80047d8 <__errno>
 8001920:	4603      	mov	r3, r0
 8001922:	220c      	movs	r2, #12
 8001924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	e009      	b.n	8001940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800192c:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001932:	4b07      	ldr	r3, [pc, #28]	@ (8001950 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	4a05      	ldr	r2, [pc, #20]	@ (8001950 <_sbrk+0x64>)
 800193c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20020000 	.word	0x20020000
 800194c:	00000400 	.word	0x00000400
 8001950:	20000150 	.word	0x20000150
 8001954:	200004b0 	.word	0x200004b0

08001958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800195c:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <SystemInit+0x20>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001962:	4a05      	ldr	r2, [pc, #20]	@ (8001978 <SystemInit+0x20>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800197c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001980:	f7ff ffea 	bl	8001958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001984:	480c      	ldr	r0, [pc, #48]	@ (80019b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001986:	490d      	ldr	r1, [pc, #52]	@ (80019bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001988:	4a0d      	ldr	r2, [pc, #52]	@ (80019c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800198c:	e002      	b.n	8001994 <LoopCopyDataInit>

0800198e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001992:	3304      	adds	r3, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001998:	d3f9      	bcc.n	800198e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199a:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800199c:	4c0a      	ldr	r4, [pc, #40]	@ (80019c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a0:	e001      	b.n	80019a6 <LoopFillZerobss>

080019a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a4:	3204      	adds	r2, #4

080019a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a8:	d3fb      	bcc.n	80019a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019aa:	f002 ff1b 	bl	80047e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ae:	f7fe ff03 	bl	80007b8 <main>
  bx  lr    
 80019b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019bc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80019c0:	08005d9c 	.word	0x08005d9c
  ldr r2, =_sbss
 80019c4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80019c8:	200004ac 	.word	0x200004ac

080019cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <ADC_IRQHandler>
	...

080019d0 <_READ_LED_ON>:

void _GREEN_LED_OFF(){
	HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, RESET);
}

void _READ_LED_ON(){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(READ_LED_GPIO_Port, READ_LED_Pin, SET);
 80019d4:	2201      	movs	r2, #1
 80019d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019da:	4802      	ldr	r0, [pc, #8]	@ (80019e4 <_READ_LED_ON+0x14>)
 80019dc:	f000 ff6a 	bl	80028b4 <HAL_GPIO_WritePin>
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40020800 	.word	0x40020800

080019e8 <_READ_LED_OFF>:

void _READ_LED_OFF(){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(READ_LED_GPIO_Port, READ_LED_Pin, RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019f2:	4802      	ldr	r0, [pc, #8]	@ (80019fc <_READ_LED_OFF+0x14>)
 80019f4:	f000 ff5e 	bl	80028b4 <HAL_GPIO_WritePin>
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40020800 	.word	0x40020800

08001a00 <_WRITE_LED_ON>:

void _WRITE_LED_ON(){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WRITE_LED_GPIO_Port, WRITE_LED_Pin, SET);
 8001a04:	2201      	movs	r2, #1
 8001a06:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a0a:	4802      	ldr	r0, [pc, #8]	@ (8001a14 <_WRITE_LED_ON+0x14>)
 8001a0c:	f000 ff52 	bl	80028b4 <HAL_GPIO_WritePin>
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40020800 	.word	0x40020800

08001a18 <_WRITE_LED_OFF>:

void _WRITE_LED_OFF(){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WRITE_LED_GPIO_Port, WRITE_LED_Pin, RESET);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a22:	4802      	ldr	r0, [pc, #8]	@ (8001a2c <_WRITE_LED_OFF+0x14>)
 8001a24:	f000 ff46 	bl	80028b4 <HAL_GPIO_WritePin>
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40020800 	.word	0x40020800

08001a30 <delay_ns>:

void delay_ns (uint16_t ns)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001a3a:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <delay_ns+0x30>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < ns);  // wait for the counter to reach the us input in the parameter
 8001a42:	bf00      	nop
 8001a44:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <delay_ns+0x30>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d3f9      	bcc.n	8001a44 <delay_ns+0x14>
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000104 	.word	0x20000104

08001a64 <set_eeprom_addr>:

void set_eeprom_addr(uint16_t addr){
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	80fb      	strh	r3, [r7, #6]
	GPIOA->ODR &= ~(0x1FFF);
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <set_eeprom_addr+0x38>)
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	4a0a      	ldr	r2, [pc, #40]	@ (8001a9c <set_eeprom_addr+0x38>)
 8001a74:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8001a78:	f023 031f 	bic.w	r3, r3, #31
 8001a7c:	6153      	str	r3, [r2, #20]
	GPIOA->ODR |= (0x1FFF) & addr;
 8001a7e:	4b07      	ldr	r3, [pc, #28]	@ (8001a9c <set_eeprom_addr+0x38>)
 8001a80:	695a      	ldr	r2, [r3, #20]
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a88:	4904      	ldr	r1, [pc, #16]	@ (8001a9c <set_eeprom_addr+0x38>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	614b      	str	r3, [r1, #20]
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40020000 	.word	0x40020000

08001aa0 <set_eeprom_io>:

void set_eeprom_io(uint8_t q){
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
	GPIOB->ODR &= ~(0xF << 4);
 8001aaa:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <set_eeprom_io+0x50>)
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	4a10      	ldr	r2, [pc, #64]	@ (8001af0 <set_eeprom_io+0x50>)
 8001ab0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ab4:	6153      	str	r3, [r2, #20]
	GPIOB->ODR &= ~(0xF << 12);
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8001af0 <set_eeprom_io+0x50>)
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	4a0d      	ldr	r2, [pc, #52]	@ (8001af0 <set_eeprom_io+0x50>)
 8001abc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001ac0:	6153      	str	r3, [r2, #20]
	GPIOB->ODR |= (((0x0F) & q) << 4);
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8001af0 <set_eeprom_io+0x50>)
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	4908      	ldr	r1, [pc, #32]	@ (8001af0 <set_eeprom_io+0x50>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	614b      	str	r3, [r1, #20]
	GPIOB->ODR |= ((q >> 4) << 12);
 8001ad2:	4b07      	ldr	r3, [pc, #28]	@ (8001af0 <set_eeprom_io+0x50>)
 8001ad4:	695a      	ldr	r2, [r3, #20]
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	031b      	lsls	r3, r3, #12
 8001ade:	4904      	ldr	r1, [pc, #16]	@ (8001af0 <set_eeprom_io+0x50>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	614b      	str	r3, [r1, #20]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	40020400 	.word	0x40020400

08001af4 <set_eeprom_io_state>:

void set_eeprom_io_state(uint8_t state){
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
	if(state == IO_READ){
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10b      	bne.n	8001b1c <set_eeprom_io_state+0x28>
		GPIOB->MODER &= ~(0xFF << 8);
 8001b04:	4b16      	ldr	r3, [pc, #88]	@ (8001b60 <set_eeprom_io_state+0x6c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a15      	ldr	r2, [pc, #84]	@ (8001b60 <set_eeprom_io_state+0x6c>)
 8001b0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001b0e:	6013      	str	r3, [r2, #0]
		GPIOB->MODER &= ~(0xFF << 24);
 8001b10:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <set_eeprom_io_state+0x6c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a12      	ldr	r2, [pc, #72]	@ (8001b60 <set_eeprom_io_state+0x6c>)
 8001b16:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001b1a:	6013      	str	r3, [r2, #0]
	}
	if(state == IO_WRITE){
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d117      	bne.n	8001b52 <set_eeprom_io_state+0x5e>
		GPIOB->MODER &= ~(0xFF << 8);
 8001b22:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <set_eeprom_io_state+0x6c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a0e      	ldr	r2, [pc, #56]	@ (8001b60 <set_eeprom_io_state+0x6c>)
 8001b28:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001b2c:	6013      	str	r3, [r2, #0]
		GPIOB->MODER &= ~(0xFF << 24);
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <set_eeprom_io_state+0x6c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a0b      	ldr	r2, [pc, #44]	@ (8001b60 <set_eeprom_io_state+0x6c>)
 8001b34:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001b38:	6013      	str	r3, [r2, #0]
		GPIOB->MODER |= (0b01010101 << 8);
 8001b3a:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <set_eeprom_io_state+0x6c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a08      	ldr	r2, [pc, #32]	@ (8001b60 <set_eeprom_io_state+0x6c>)
 8001b40:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 8001b44:	6013      	str	r3, [r2, #0]
		GPIOB->MODER |= (0b01010101 << 24);
 8001b46:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <set_eeprom_io_state+0x6c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a05      	ldr	r2, [pc, #20]	@ (8001b60 <set_eeprom_io_state+0x6c>)
 8001b4c:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8001b50:	6013      	str	r3, [r2, #0]
	}
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40020400 	.word	0x40020400

08001b64 <read_eeprom_io>:

uint8_t read_eeprom_io(){
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	71fb      	strb	r3, [r7, #7]
	data = ((GPIOB->IDR & 0xF000) >> 8);
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <read_eeprom_io+0x38>)
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	0a1b      	lsrs	r3, r3, #8
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	f023 030f 	bic.w	r3, r3, #15
 8001b7a:	71fb      	strb	r3, [r7, #7]
	data |= ((GPIOB->IDR & 0x00F0) >> 4);
 8001b7c:	4b07      	ldr	r3, [pc, #28]	@ (8001b9c <read_eeprom_io+0x38>)
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	71fb      	strb	r3, [r7, #7]
	return data;
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	40020400 	.word	0x40020400

08001ba0 <set_eeprom_control_bits>:

void set_eeprom_control_bits(uint8_t state){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
	if(state == IO_READ){
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10e      	bne.n	8001bce <set_eeprom_control_bits+0x2e>
		  HAL_GPIO_WritePin(WE_GPIO_Port, WE_Pin, SET);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	4823      	ldr	r0, [pc, #140]	@ (8001c44 <set_eeprom_control_bits+0xa4>)
 8001bb6:	f000 fe7d 	bl	80028b4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2102      	movs	r1, #2
 8001bbe:	4821      	ldr	r0, [pc, #132]	@ (8001c44 <set_eeprom_control_bits+0xa4>)
 8001bc0:	f000 fe78 	bl	80028b4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2104      	movs	r1, #4
 8001bc8:	481e      	ldr	r0, [pc, #120]	@ (8001c44 <set_eeprom_control_bits+0xa4>)
 8001bca:	f000 fe73 	bl	80028b4 <HAL_GPIO_WritePin>
	}
	if(state == IO_WRITE){
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d121      	bne.n	8001c18 <set_eeprom_control_bits+0x78>
		  HAL_GPIO_WritePin(WE_GPIO_Port, WE_Pin, SET);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	481a      	ldr	r0, [pc, #104]	@ (8001c44 <set_eeprom_control_bits+0xa4>)
 8001bda:	f000 fe6b 	bl	80028b4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, SET);
 8001bde:	2201      	movs	r2, #1
 8001be0:	2102      	movs	r1, #2
 8001be2:	4818      	ldr	r0, [pc, #96]	@ (8001c44 <set_eeprom_control_bits+0xa4>)
 8001be4:	f000 fe66 	bl	80028b4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2104      	movs	r1, #4
 8001bec:	4815      	ldr	r0, [pc, #84]	@ (8001c44 <set_eeprom_control_bits+0xa4>)
 8001bee:	f000 fe61 	bl	80028b4 <HAL_GPIO_WritePin>
		  delay_ns(3);
 8001bf2:	2003      	movs	r0, #3
 8001bf4:	f7ff ff1c 	bl	8001a30 <delay_ns>
		  HAL_GPIO_WritePin(WE_GPIO_Port, WE_Pin, RESET);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	4811      	ldr	r0, [pc, #68]	@ (8001c44 <set_eeprom_control_bits+0xa4>)
 8001bfe:	f000 fe59 	bl	80028b4 <HAL_GPIO_WritePin>
		  delay_ns(1);
 8001c02:	2001      	movs	r0, #1
 8001c04:	f7ff ff14 	bl	8001a30 <delay_ns>
		  HAL_GPIO_WritePin(WE_GPIO_Port, WE_Pin, SET);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	480d      	ldr	r0, [pc, #52]	@ (8001c44 <set_eeprom_control_bits+0xa4>)
 8001c0e:	f000 fe51 	bl	80028b4 <HAL_GPIO_WritePin>
		  HAL_Delay(8);
 8001c12:	2008      	movs	r0, #8
 8001c14:	f000 fba8 	bl	8002368 <HAL_Delay>

	}
	if(state == IO_IDLE){
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d10e      	bne.n	8001c3c <set_eeprom_control_bits+0x9c>
		  HAL_GPIO_WritePin(WE_GPIO_Port, WE_Pin, SET);
 8001c1e:	2201      	movs	r2, #1
 8001c20:	2101      	movs	r1, #1
 8001c22:	4808      	ldr	r0, [pc, #32]	@ (8001c44 <set_eeprom_control_bits+0xa4>)
 8001c24:	f000 fe46 	bl	80028b4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, SET);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	2102      	movs	r1, #2
 8001c2c:	4805      	ldr	r0, [pc, #20]	@ (8001c44 <set_eeprom_control_bits+0xa4>)
 8001c2e:	f000 fe41 	bl	80028b4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, SET);
 8001c32:	2201      	movs	r2, #1
 8001c34:	2104      	movs	r1, #4
 8001c36:	4803      	ldr	r0, [pc, #12]	@ (8001c44 <set_eeprom_control_bits+0xa4>)
 8001c38:	f000 fe3c 	bl	80028b4 <HAL_GPIO_WritePin>
	}
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40020400 	.word	0x40020400

08001c48 <read_eeprom_addr>:


uint8_t read_eeprom_addr(uint16_t addr){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	80fb      	strh	r3, [r7, #6]
	_READ_LED_ON();
 8001c52:	f7ff febd 	bl	80019d0 <_READ_LED_ON>
	uint8_t _temp;
	set_eeprom_io_state(IO_READ);
 8001c56:	2000      	movs	r0, #0
 8001c58:	f7ff ff4c 	bl	8001af4 <set_eeprom_io_state>
	set_eeprom_addr(addr);
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff ff00 	bl	8001a64 <set_eeprom_addr>
	set_eeprom_control_bits(IO_READ);
 8001c64:	2000      	movs	r0, #0
 8001c66:	f7ff ff9b 	bl	8001ba0 <set_eeprom_control_bits>
	_temp = read_eeprom_io();
 8001c6a:	f7ff ff7b 	bl	8001b64 <read_eeprom_io>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73fb      	strb	r3, [r7, #15]
	set_eeprom_control_bits(IO_IDLE);
 8001c72:	2002      	movs	r0, #2
 8001c74:	f7ff ff94 	bl	8001ba0 <set_eeprom_control_bits>
	_READ_LED_OFF();
 8001c78:	f7ff feb6 	bl	80019e8 <_READ_LED_OFF>
	return _temp;
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]

}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <write_eeprom_addr>:

uint8_t write_eeprom_addr(uint16_t addr, uint8_t data){
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b084      	sub	sp, #16
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	460a      	mov	r2, r1
 8001c90:	80fb      	strh	r3, [r7, #6]
 8001c92:	4613      	mov	r3, r2
 8001c94:	717b      	strb	r3, [r7, #5]
	_WRITE_LED_ON();
 8001c96:	f7ff feb3 	bl	8001a00 <_WRITE_LED_ON>
	uint8_t _temp;
	set_eeprom_io_state(IO_WRITE);
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f7ff ff2a 	bl	8001af4 <set_eeprom_io_state>
	set_eeprom_addr(addr);
 8001ca0:	88fb      	ldrh	r3, [r7, #6]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fede 	bl	8001a64 <set_eeprom_addr>
	set_eeprom_control_bits(IO_IDLE);
 8001ca8:	2002      	movs	r0, #2
 8001caa:	f7ff ff79 	bl	8001ba0 <set_eeprom_control_bits>
	set_eeprom_io(data);
 8001cae:	797b      	ldrb	r3, [r7, #5]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fef5 	bl	8001aa0 <set_eeprom_io>
	set_eeprom_control_bits(IO_WRITE);
 8001cb6:	2001      	movs	r0, #1
 8001cb8:	f7ff ff72 	bl	8001ba0 <set_eeprom_control_bits>
	set_eeprom_control_bits(IO_IDLE);
 8001cbc:	2002      	movs	r0, #2
 8001cbe:	f7ff ff6f 	bl	8001ba0 <set_eeprom_control_bits>
	_temp = read_eeprom_addr(addr);
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ffbf 	bl	8001c48 <read_eeprom_addr>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	73fb      	strb	r3, [r7, #15]
	_WRITE_LED_OFF();
 8001cce:	f7ff fea3 	bl	8001a18 <_WRITE_LED_OFF>
	if(_temp == data){
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	797b      	ldrb	r3, [r7, #5]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d101      	bne.n	8001cde <write_eeprom_addr+0x58>
		return OK;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <write_eeprom_addr+0x5a>
	}else{
		return ERROR;
 8001cde:	2300      	movs	r3, #0
	}
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <printContents>:
	printf("Done\n");
	printf("\nDeleted %d data\n\n", _temp);

}

void printContents(){
 8001ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cea:	b09d      	sub	sp, #116	@ 0x74
 8001cec:	af0e      	add	r7, sp, #56	@ 0x38
	  for(int base = 0; base < 256; base += 16){
 8001cee:	2300      	movs	r3, #0
 8001cf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cf2:	e066      	b.n	8001dc2 <printContents+0xda>
		  uint8_t data[16];
		  for(int offset = 0; offset < 16; offset += 1){
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cf8:	e013      	b.n	8001d22 <printContents+0x3a>
			  data[offset] = read_eeprom_addr(base + offset);
 8001cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff ff9e 	bl	8001c48 <read_eeprom_addr>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f107 0220 	add.w	r2, r7, #32
 8001d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d16:	4413      	add	r3, r2
 8001d18:	460a      	mov	r2, r1
 8001d1a:	701a      	strb	r2, [r3, #0]
		  for(int offset = 0; offset < 16; offset += 1){
 8001d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d1e:	3301      	adds	r3, #1
 8001d20:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d24:	2b0f      	cmp	r3, #15
 8001d26:	dde8      	ble.n	8001cfa <printContents+0x12>
		  }

		  printf("  %04x: %02x %02x %02x %02x %02x %02x %02x %02x   %02x %02x %02x %02x %02x %02x %02x %02x \n",
				  	base, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7],
 8001d28:	f897 3020 	ldrb.w	r3, [r7, #32]
		  printf("  %04x: %02x %02x %02x %02x %02x %02x %02x %02x   %02x %02x %02x %02x %02x %02x %02x %02x \n",
 8001d2c:	469c      	mov	ip, r3
				  	base, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7],
 8001d2e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
		  printf("  %04x: %02x %02x %02x %02x %02x %02x %02x %02x   %02x %02x %02x %02x %02x %02x %02x %02x \n",
 8001d32:	469e      	mov	lr, r3
				  	base, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7],
 8001d34:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
		  printf("  %04x: %02x %02x %02x %02x %02x %02x %02x %02x   %02x %02x %02x %02x %02x %02x %02x %02x \n",
 8001d38:	4618      	mov	r0, r3
				  	base, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7],
 8001d3a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
		  printf("  %04x: %02x %02x %02x %02x %02x %02x %02x %02x   %02x %02x %02x %02x %02x %02x %02x %02x \n",
 8001d3e:	461c      	mov	r4, r3
				  	base, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7],
 8001d40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
		  printf("  %04x: %02x %02x %02x %02x %02x %02x %02x %02x   %02x %02x %02x %02x %02x %02x %02x %02x \n",
 8001d44:	461d      	mov	r5, r3
				  	base, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7],
 8001d46:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
		  printf("  %04x: %02x %02x %02x %02x %02x %02x %02x %02x   %02x %02x %02x %02x %02x %02x %02x %02x \n",
 8001d4a:	461e      	mov	r6, r3
				  	base, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7],
 8001d4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
		  printf("  %04x: %02x %02x %02x %02x %02x %02x %02x %02x   %02x %02x %02x %02x %02x %02x %02x %02x \n",
 8001d50:	61fb      	str	r3, [r7, #28]
				  	base, data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7],
 8001d52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
		  printf("  %04x: %02x %02x %02x %02x %02x %02x %02x %02x   %02x %02x %02x %02x %02x %02x %02x %02x \n",
 8001d56:	61bb      	str	r3, [r7, #24]
						  data[8], data[9], data[10], data[11], data[12], data[13], data[14], data[15]);
 8001d58:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
		  printf("  %04x: %02x %02x %02x %02x %02x %02x %02x %02x   %02x %02x %02x %02x %02x %02x %02x %02x \n",
 8001d5c:	617b      	str	r3, [r7, #20]
						  data[8], data[9], data[10], data[11], data[12], data[13], data[14], data[15]);
 8001d5e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
		  printf("  %04x: %02x %02x %02x %02x %02x %02x %02x %02x   %02x %02x %02x %02x %02x %02x %02x %02x \n",
 8001d62:	613b      	str	r3, [r7, #16]
						  data[8], data[9], data[10], data[11], data[12], data[13], data[14], data[15]);
 8001d64:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
		  printf("  %04x: %02x %02x %02x %02x %02x %02x %02x %02x   %02x %02x %02x %02x %02x %02x %02x %02x \n",
 8001d68:	60fb      	str	r3, [r7, #12]
						  data[8], data[9], data[10], data[11], data[12], data[13], data[14], data[15]);
 8001d6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
		  printf("  %04x: %02x %02x %02x %02x %02x %02x %02x %02x   %02x %02x %02x %02x %02x %02x %02x %02x \n",
 8001d6e:	60bb      	str	r3, [r7, #8]
						  data[8], data[9], data[10], data[11], data[12], data[13], data[14], data[15]);
 8001d70:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
		  printf("  %04x: %02x %02x %02x %02x %02x %02x %02x %02x   %02x %02x %02x %02x %02x %02x %02x %02x \n",
 8001d74:	607b      	str	r3, [r7, #4]
						  data[8], data[9], data[10], data[11], data[12], data[13], data[14], data[15]);
 8001d76:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
		  printf("  %04x: %02x %02x %02x %02x %02x %02x %02x %02x   %02x %02x %02x %02x %02x %02x %02x %02x \n",
 8001d7a:	4619      	mov	r1, r3
						  data[8], data[9], data[10], data[11], data[12], data[13], data[14], data[15]);
 8001d7c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
		  printf("  %04x: %02x %02x %02x %02x %02x %02x %02x %02x   %02x %02x %02x %02x %02x %02x %02x %02x \n",
 8001d80:	461a      	mov	r2, r3
						  data[8], data[9], data[10], data[11], data[12], data[13], data[14], data[15]);
 8001d82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
		  printf("  %04x: %02x %02x %02x %02x %02x %02x %02x %02x   %02x %02x %02x %02x %02x %02x %02x %02x \n",
 8001d86:	930d      	str	r3, [sp, #52]	@ 0x34
 8001d88:	920c      	str	r2, [sp, #48]	@ 0x30
 8001d8a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	920a      	str	r2, [sp, #40]	@ 0x28
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	9209      	str	r2, [sp, #36]	@ 0x24
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	9208      	str	r2, [sp, #32]
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	9207      	str	r2, [sp, #28]
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	9206      	str	r2, [sp, #24]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	9205      	str	r2, [sp, #20]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	9304      	str	r3, [sp, #16]
 8001da8:	9603      	str	r6, [sp, #12]
 8001daa:	9502      	str	r5, [sp, #8]
 8001dac:	9401      	str	r4, [sp, #4]
 8001dae:	9000      	str	r0, [sp, #0]
 8001db0:	4673      	mov	r3, lr
 8001db2:	4662      	mov	r2, ip
 8001db4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001db6:	4807      	ldr	r0, [pc, #28]	@ (8001dd4 <printContents+0xec>)
 8001db8:	f002 fb46 	bl	8004448 <iprintf>
	  for(int base = 0; base < 256; base += 16){
 8001dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dbe:	3310      	adds	r3, #16
 8001dc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dc4:	2bff      	cmp	r3, #255	@ 0xff
 8001dc6:	dd95      	ble.n	8001cf4 <printContents+0xc>
	  }
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	373c      	adds	r7, #60	@ 0x3c
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	0800556c 	.word	0x0800556c

08001dd8 <eeprom_control_unit_converter>:

uint8_t eeprom_control_unit_converter(uint16_t control_bits, uint8_t eeprom){
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	460a      	mov	r2, r1
 8001de2:	80fb      	strh	r3, [r7, #6]
 8001de4:	4613      	mov	r3, r2
 8001de6:	717b      	strb	r3, [r7, #5]
	if(eeprom == EEPROM_MSB){
 8001de8:	797b      	ldrb	r3, [r7, #5]
 8001dea:	2b16      	cmp	r3, #22
 8001dec:	d104      	bne.n	8001df8 <eeprom_control_unit_converter+0x20>
		return (control_bits >> 8);
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	e006      	b.n	8001e06 <eeprom_control_unit_converter+0x2e>
	}
	if(eeprom == EEPROM_LSB){
 8001df8:	797b      	ldrb	r3, [r7, #5]
 8001dfa:	2b0b      	cmp	r3, #11
 8001dfc:	d102      	bne.n	8001e04 <eeprom_control_unit_converter+0x2c>
		return (0x00FF & control_bits);
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	e000      	b.n	8001e06 <eeprom_control_unit_converter+0x2e>
	}
	return 0;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af04      	add	r7, sp, #16
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2e:	9302      	str	r3, [sp, #8]
 8001e30:	2301      	movs	r3, #1
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	1dfb      	adds	r3, r7, #7
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2301      	movs	r3, #1
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2178      	movs	r1, #120	@ 0x78
 8001e3e:	4803      	ldr	r0, [pc, #12]	@ (8001e4c <ssd1306_WriteCommand+0x2c>)
 8001e40:	f000 fe96 	bl	8002b70 <HAL_I2C_Mem_Write>
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200000b0 	.word	0x200000b0

08001e50 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af04      	add	r7, sp, #16
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e62:	9202      	str	r2, [sp, #8]
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	2240      	movs	r2, #64	@ 0x40
 8001e6e:	2178      	movs	r1, #120	@ 0x78
 8001e70:	4803      	ldr	r0, [pc, #12]	@ (8001e80 <ssd1306_WriteData+0x30>)
 8001e72:	f000 fe7d 	bl	8002b70 <HAL_I2C_Mem_Write>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200000b0 	.word	0x200000b0

08001e84 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001e88:	f7ff ffc3 	bl	8001e12 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001e8c:	2064      	movs	r0, #100	@ 0x64
 8001e8e:	f000 fa6b 	bl	8002368 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001e92:	2000      	movs	r0, #0
 8001e94:	f000 f9d8 	bl	8002248 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001e98:	2020      	movs	r0, #32
 8001e9a:	f7ff ffc1 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7ff ffbe 	bl	8001e20 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001ea4:	20b0      	movs	r0, #176	@ 0xb0
 8001ea6:	f7ff ffbb 	bl	8001e20 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001eaa:	20c8      	movs	r0, #200	@ 0xc8
 8001eac:	f7ff ffb8 	bl	8001e20 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f7ff ffb5 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001eb6:	2010      	movs	r0, #16
 8001eb8:	f7ff ffb2 	bl	8001e20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001ebc:	2040      	movs	r0, #64	@ 0x40
 8001ebe:	f7ff ffaf 	bl	8001e20 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001ec2:	20ff      	movs	r0, #255	@ 0xff
 8001ec4:	f000 f9ac 	bl	8002220 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001ec8:	20a1      	movs	r0, #161	@ 0xa1
 8001eca:	f7ff ffa9 	bl	8001e20 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001ece:	20a6      	movs	r0, #166	@ 0xa6
 8001ed0:	f7ff ffa6 	bl	8001e20 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001ed4:	20a8      	movs	r0, #168	@ 0xa8
 8001ed6:	f7ff ffa3 	bl	8001e20 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8001eda:	201f      	movs	r0, #31
 8001edc:	f7ff ffa0 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001ee0:	20a4      	movs	r0, #164	@ 0xa4
 8001ee2:	f7ff ff9d 	bl	8001e20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001ee6:	20d3      	movs	r0, #211	@ 0xd3
 8001ee8:	f7ff ff9a 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001eec:	2000      	movs	r0, #0
 8001eee:	f7ff ff97 	bl	8001e20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ef2:	20d5      	movs	r0, #213	@ 0xd5
 8001ef4:	f7ff ff94 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001ef8:	20f0      	movs	r0, #240	@ 0xf0
 8001efa:	f7ff ff91 	bl	8001e20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001efe:	20d9      	movs	r0, #217	@ 0xd9
 8001f00:	f7ff ff8e 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001f04:	2022      	movs	r0, #34	@ 0x22
 8001f06:	f7ff ff8b 	bl	8001e20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001f0a:	20da      	movs	r0, #218	@ 0xda
 8001f0c:	f7ff ff88 	bl	8001e20 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8001f10:	2002      	movs	r0, #2
 8001f12:	f7ff ff85 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001f16:	20db      	movs	r0, #219	@ 0xdb
 8001f18:	f7ff ff82 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001f1c:	2020      	movs	r0, #32
 8001f1e:	f7ff ff7f 	bl	8001e20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001f22:	208d      	movs	r0, #141	@ 0x8d
 8001f24:	f7ff ff7c 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001f28:	2014      	movs	r0, #20
 8001f2a:	f7ff ff79 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f000 f98a 	bl	8002248 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001f34:	2000      	movs	r0, #0
 8001f36:	f000 f80f 	bl	8001f58 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001f3a:	f000 f825 	bl	8001f88 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001f3e:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <ssd1306_Init+0xd0>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001f44:	4b03      	ldr	r3, [pc, #12]	@ (8001f54 <ssd1306_Init+0xd0>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001f4a:	4b02      	ldr	r3, [pc, #8]	@ (8001f54 <ssd1306_Init+0xd0>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	711a      	strb	r2, [r3, #4]
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000354 	.word	0x20000354

08001f58 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <ssd1306_Fill+0x14>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e000      	b.n	8001f6e <ssd1306_Fill+0x16>
 8001f6c:	23ff      	movs	r3, #255	@ 0xff
 8001f6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f72:	4619      	mov	r1, r3
 8001f74:	4803      	ldr	r0, [pc, #12]	@ (8001f84 <ssd1306_Fill+0x2c>)
 8001f76:	f002 fbd1 	bl	800471c <memset>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000154 	.word	0x20000154

08001f88 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001f8e:	2300      	movs	r3, #0
 8001f90:	71fb      	strb	r3, [r7, #7]
 8001f92:	e016      	b.n	8001fc2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	3b50      	subs	r3, #80	@ 0x50
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff40 	bl	8001e20 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f7ff ff3d 	bl	8001e20 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001fa6:	2010      	movs	r0, #16
 8001fa8:	f7ff ff3a 	bl	8001e20 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	01db      	lsls	r3, r3, #7
 8001fb0:	4a08      	ldr	r2, [pc, #32]	@ (8001fd4 <ssd1306_UpdateScreen+0x4c>)
 8001fb2:	4413      	add	r3, r2
 8001fb4:	2180      	movs	r1, #128	@ 0x80
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ff4a 	bl	8001e50 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	71fb      	strb	r3, [r7, #7]
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d9e5      	bls.n	8001f94 <ssd1306_UpdateScreen+0xc>
    }
}
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000154 	.word	0x20000154

08001fd8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	71bb      	strb	r3, [r7, #6]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	db3d      	blt.n	800206e <ssd1306_DrawPixel+0x96>
 8001ff2:	79bb      	ldrb	r3, [r7, #6]
 8001ff4:	2b1f      	cmp	r3, #31
 8001ff6:	d83a      	bhi.n	800206e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001ff8:	797b      	ldrb	r3, [r7, #5]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d11a      	bne.n	8002034 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ffe:	79fa      	ldrb	r2, [r7, #7]
 8002000:	79bb      	ldrb	r3, [r7, #6]
 8002002:	08db      	lsrs	r3, r3, #3
 8002004:	b2d8      	uxtb	r0, r3
 8002006:	4603      	mov	r3, r0
 8002008:	01db      	lsls	r3, r3, #7
 800200a:	4413      	add	r3, r2
 800200c:	4a1b      	ldr	r2, [pc, #108]	@ (800207c <ssd1306_DrawPixel+0xa4>)
 800200e:	5cd3      	ldrb	r3, [r2, r3]
 8002010:	b25a      	sxtb	r2, r3
 8002012:	79bb      	ldrb	r3, [r7, #6]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	2101      	movs	r1, #1
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	b25b      	sxtb	r3, r3
 8002020:	4313      	orrs	r3, r2
 8002022:	b259      	sxtb	r1, r3
 8002024:	79fa      	ldrb	r2, [r7, #7]
 8002026:	4603      	mov	r3, r0
 8002028:	01db      	lsls	r3, r3, #7
 800202a:	4413      	add	r3, r2
 800202c:	b2c9      	uxtb	r1, r1
 800202e:	4a13      	ldr	r2, [pc, #76]	@ (800207c <ssd1306_DrawPixel+0xa4>)
 8002030:	54d1      	strb	r1, [r2, r3]
 8002032:	e01d      	b.n	8002070 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002034:	79fa      	ldrb	r2, [r7, #7]
 8002036:	79bb      	ldrb	r3, [r7, #6]
 8002038:	08db      	lsrs	r3, r3, #3
 800203a:	b2d8      	uxtb	r0, r3
 800203c:	4603      	mov	r3, r0
 800203e:	01db      	lsls	r3, r3, #7
 8002040:	4413      	add	r3, r2
 8002042:	4a0e      	ldr	r2, [pc, #56]	@ (800207c <ssd1306_DrawPixel+0xa4>)
 8002044:	5cd3      	ldrb	r3, [r2, r3]
 8002046:	b25a      	sxtb	r2, r3
 8002048:	79bb      	ldrb	r3, [r7, #6]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	2101      	movs	r1, #1
 8002050:	fa01 f303 	lsl.w	r3, r1, r3
 8002054:	b25b      	sxtb	r3, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	b25b      	sxtb	r3, r3
 800205a:	4013      	ands	r3, r2
 800205c:	b259      	sxtb	r1, r3
 800205e:	79fa      	ldrb	r2, [r7, #7]
 8002060:	4603      	mov	r3, r0
 8002062:	01db      	lsls	r3, r3, #7
 8002064:	4413      	add	r3, r2
 8002066:	b2c9      	uxtb	r1, r1
 8002068:	4a04      	ldr	r2, [pc, #16]	@ (800207c <ssd1306_DrawPixel+0xa4>)
 800206a:	54d1      	strb	r1, [r2, r3]
 800206c:	e000      	b.n	8002070 <ssd1306_DrawPixel+0x98>
        return;
 800206e:	bf00      	nop
    }
}
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000154 	.word	0x20000154

08002080 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002080:	b590      	push	{r4, r7, lr}
 8002082:	b089      	sub	sp, #36	@ 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	4604      	mov	r4, r0
 8002088:	4638      	mov	r0, r7
 800208a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800208e:	4623      	mov	r3, r4
 8002090:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	2b1f      	cmp	r3, #31
 8002096:	d902      	bls.n	800209e <ssd1306_WriteChar+0x1e>
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	2b7e      	cmp	r3, #126	@ 0x7e
 800209c:	d901      	bls.n	80020a2 <ssd1306_WriteChar+0x22>
        return 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	e079      	b.n	8002196 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <ssd1306_WriteChar+0x34>
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	3b20      	subs	r3, #32
 80020ae:	4413      	add	r3, r2
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	e000      	b.n	80020b6 <ssd1306_WriteChar+0x36>
 80020b4:	783b      	ldrb	r3, [r7, #0]
 80020b6:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80020b8:	4b39      	ldr	r3, [pc, #228]	@ (80021a0 <ssd1306_WriteChar+0x120>)
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	461a      	mov	r2, r3
 80020be:	7dfb      	ldrb	r3, [r7, #23]
 80020c0:	4413      	add	r3, r2
 80020c2:	2b80      	cmp	r3, #128	@ 0x80
 80020c4:	dc06      	bgt.n	80020d4 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80020c6:	4b36      	ldr	r3, [pc, #216]	@ (80021a0 <ssd1306_WriteChar+0x120>)
 80020c8:	885b      	ldrh	r3, [r3, #2]
 80020ca:	461a      	mov	r2, r3
 80020cc:	787b      	ldrb	r3, [r7, #1]
 80020ce:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	dd01      	ble.n	80020d8 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	e05e      	b.n	8002196 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80020d8:	2300      	movs	r3, #0
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	e04d      	b.n	800217a <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	3b20      	subs	r3, #32
 80020e4:	7879      	ldrb	r1, [r7, #1]
 80020e6:	fb01 f303 	mul.w	r3, r1, r3
 80020ea:	4619      	mov	r1, r3
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	440b      	add	r3, r1
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80020f8:	2300      	movs	r3, #0
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	e036      	b.n	800216c <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d013      	beq.n	8002136 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800210e:	4b24      	ldr	r3, [pc, #144]	@ (80021a0 <ssd1306_WriteChar+0x120>)
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	b2da      	uxtb	r2, r3
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	4413      	add	r3, r2
 800211a:	b2d8      	uxtb	r0, r3
 800211c:	4b20      	ldr	r3, [pc, #128]	@ (80021a0 <ssd1306_WriteChar+0x120>)
 800211e:	885b      	ldrh	r3, [r3, #2]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	4413      	add	r3, r2
 8002128:	b2db      	uxtb	r3, r3
 800212a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800212e:	4619      	mov	r1, r3
 8002130:	f7ff ff52 	bl	8001fd8 <ssd1306_DrawPixel>
 8002134:	e017      	b.n	8002166 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002136:	4b1a      	ldr	r3, [pc, #104]	@ (80021a0 <ssd1306_WriteChar+0x120>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	4413      	add	r3, r2
 8002142:	b2d8      	uxtb	r0, r3
 8002144:	4b16      	ldr	r3, [pc, #88]	@ (80021a0 <ssd1306_WriteChar+0x120>)
 8002146:	885b      	ldrh	r3, [r3, #2]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	4413      	add	r3, r2
 8002150:	b2d9      	uxtb	r1, r3
 8002152:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf0c      	ite	eq
 800215a:	2301      	moveq	r3, #1
 800215c:	2300      	movne	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	f7ff ff39 	bl	8001fd8 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	3301      	adds	r3, #1
 800216a:	61bb      	str	r3, [r7, #24]
 800216c:	7dfb      	ldrb	r3, [r7, #23]
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	429a      	cmp	r2, r3
 8002172:	d3c4      	bcc.n	80020fe <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	3301      	adds	r3, #1
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	787b      	ldrb	r3, [r7, #1]
 800217c:	461a      	mov	r2, r3
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	4293      	cmp	r3, r2
 8002182:	d3ac      	bcc.n	80020de <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8002184:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <ssd1306_WriteChar+0x120>)
 8002186:	881a      	ldrh	r2, [r3, #0]
 8002188:	7dfb      	ldrb	r3, [r7, #23]
 800218a:	b29b      	uxth	r3, r3
 800218c:	4413      	add	r3, r2
 800218e:	b29a      	uxth	r2, r3
 8002190:	4b03      	ldr	r3, [pc, #12]	@ (80021a0 <ssd1306_WriteChar+0x120>)
 8002192:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002194:	7bfb      	ldrb	r3, [r7, #15]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3724      	adds	r7, #36	@ 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd90      	pop	{r4, r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000354 	.word	0x20000354

080021a4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	4638      	mov	r0, r7
 80021ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80021b2:	e013      	b.n	80021dc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	7818      	ldrb	r0, [r3, #0]
 80021b8:	7e3b      	ldrb	r3, [r7, #24]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	463b      	mov	r3, r7
 80021be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c0:	f7ff ff5e 	bl	8002080 <ssd1306_WriteChar>
 80021c4:	4603      	mov	r3, r0
 80021c6:	461a      	mov	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d002      	beq.n	80021d6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	e008      	b.n	80021e8 <ssd1306_WriteString+0x44>
        }
        str++;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3301      	adds	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1e7      	bne.n	80021b4 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	781b      	ldrb	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	460a      	mov	r2, r1
 80021fa:	71fb      	strb	r3, [r7, #7]
 80021fc:	4613      	mov	r3, r2
 80021fe:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	b29a      	uxth	r2, r3
 8002204:	4b05      	ldr	r3, [pc, #20]	@ (800221c <ssd1306_SetCursor+0x2c>)
 8002206:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002208:	79bb      	ldrb	r3, [r7, #6]
 800220a:	b29a      	uxth	r2, r3
 800220c:	4b03      	ldr	r3, [pc, #12]	@ (800221c <ssd1306_SetCursor+0x2c>)
 800220e:	805a      	strh	r2, [r3, #2]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	20000354 	.word	0x20000354

08002220 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800222a:	2381      	movs	r3, #129	@ 0x81
 800222c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fdf5 	bl	8001e20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fdf1 	bl	8001e20 <ssd1306_WriteCommand>
}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002258:	23af      	movs	r3, #175	@ 0xaf
 800225a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800225c:	4b08      	ldr	r3, [pc, #32]	@ (8002280 <ssd1306_SetDisplayOn+0x38>)
 800225e:	2201      	movs	r2, #1
 8002260:	715a      	strb	r2, [r3, #5]
 8002262:	e004      	b.n	800226e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002264:	23ae      	movs	r3, #174	@ 0xae
 8002266:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002268:	4b05      	ldr	r3, [pc, #20]	@ (8002280 <ssd1306_SetDisplayOn+0x38>)
 800226a:	2200      	movs	r2, #0
 800226c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fdd5 	bl	8001e20 <ssd1306_WriteCommand>
}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000354 	.word	0x20000354

08002284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002288:	4b0e      	ldr	r3, [pc, #56]	@ (80022c4 <HAL_Init+0x40>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0d      	ldr	r2, [pc, #52]	@ (80022c4 <HAL_Init+0x40>)
 800228e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002292:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002294:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <HAL_Init+0x40>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a0a      	ldr	r2, [pc, #40]	@ (80022c4 <HAL_Init+0x40>)
 800229a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800229e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a0:	4b08      	ldr	r3, [pc, #32]	@ (80022c4 <HAL_Init+0x40>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a07      	ldr	r2, [pc, #28]	@ (80022c4 <HAL_Init+0x40>)
 80022a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ac:	2003      	movs	r0, #3
 80022ae:	f000 f931 	bl	8002514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022b2:	200f      	movs	r0, #15
 80022b4:	f000 f808 	bl	80022c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b8:	f7ff fa06 	bl	80016c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40023c00 	.word	0x40023c00

080022c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d0:	4b12      	ldr	r3, [pc, #72]	@ (800231c <HAL_InitTick+0x54>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <HAL_InitTick+0x58>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	4619      	mov	r1, r3
 80022da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022de:	fbb3 f3f1 	udiv	r3, r3, r1
 80022e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f93b 	bl	8002562 <HAL_SYSTICK_Config>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00e      	b.n	8002314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b0f      	cmp	r3, #15
 80022fa:	d80a      	bhi.n	8002312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022fc:	2200      	movs	r2, #0
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	f000 f911 	bl	800252a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002308:	4a06      	ldr	r2, [pc, #24]	@ (8002324 <HAL_InitTick+0x5c>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	e000      	b.n	8002314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	2000002c 	.word	0x2000002c
 8002320:	20000034 	.word	0x20000034
 8002324:	20000030 	.word	0x20000030

08002328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800232c:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <HAL_IncTick+0x20>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	4b06      	ldr	r3, [pc, #24]	@ (800234c <HAL_IncTick+0x24>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4413      	add	r3, r2
 8002338:	4a04      	ldr	r2, [pc, #16]	@ (800234c <HAL_IncTick+0x24>)
 800233a:	6013      	str	r3, [r2, #0]
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20000034 	.word	0x20000034
 800234c:	2000035c 	.word	0x2000035c

08002350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return uwTick;
 8002354:	4b03      	ldr	r3, [pc, #12]	@ (8002364 <HAL_GetTick+0x14>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	2000035c 	.word	0x2000035c

08002368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002370:	f7ff ffee 	bl	8002350 <HAL_GetTick>
 8002374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002380:	d005      	beq.n	800238e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002382:	4b0a      	ldr	r3, [pc, #40]	@ (80023ac <HAL_Delay+0x44>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4413      	add	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800238e:	bf00      	nop
 8002390:	f7ff ffde 	bl	8002350 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	429a      	cmp	r2, r3
 800239e:	d8f7      	bhi.n	8002390 <HAL_Delay+0x28>
  {
  }
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000034 	.word	0x20000034

080023b0 <__NVIC_SetPriorityGrouping>:
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c0:	4b0c      	ldr	r3, [pc, #48]	@ (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023cc:	4013      	ands	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e2:	4a04      	ldr	r2, [pc, #16]	@ (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	60d3      	str	r3, [r2, #12]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <__NVIC_GetPriorityGrouping>:
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023fc:	4b04      	ldr	r3, [pc, #16]	@ (8002410 <__NVIC_GetPriorityGrouping+0x18>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	f003 0307 	and.w	r3, r3, #7
}
 8002406:	4618      	mov	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_SetPriority>:
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	6039      	str	r1, [r7, #0]
 800241e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002424:	2b00      	cmp	r3, #0
 8002426:	db0a      	blt.n	800243e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	b2da      	uxtb	r2, r3
 800242c:	490c      	ldr	r1, [pc, #48]	@ (8002460 <__NVIC_SetPriority+0x4c>)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	0112      	lsls	r2, r2, #4
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	440b      	add	r3, r1
 8002438:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800243c:	e00a      	b.n	8002454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4908      	ldr	r1, [pc, #32]	@ (8002464 <__NVIC_SetPriority+0x50>)
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	3b04      	subs	r3, #4
 800244c:	0112      	lsls	r2, r2, #4
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	440b      	add	r3, r1
 8002452:	761a      	strb	r2, [r3, #24]
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000e100 	.word	0xe000e100
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <NVIC_EncodePriority>:
{
 8002468:	b480      	push	{r7}
 800246a:	b089      	sub	sp, #36	@ 0x24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f1c3 0307 	rsb	r3, r3, #7
 8002482:	2b04      	cmp	r3, #4
 8002484:	bf28      	it	cs
 8002486:	2304      	movcs	r3, #4
 8002488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3304      	adds	r3, #4
 800248e:	2b06      	cmp	r3, #6
 8002490:	d902      	bls.n	8002498 <NVIC_EncodePriority+0x30>
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3b03      	subs	r3, #3
 8002496:	e000      	b.n	800249a <NVIC_EncodePriority+0x32>
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249c:	f04f 32ff 	mov.w	r2, #4294967295
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43da      	mvns	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	401a      	ands	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b0:	f04f 31ff 	mov.w	r1, #4294967295
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ba:	43d9      	mvns	r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c0:	4313      	orrs	r3, r2
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3724      	adds	r7, #36	@ 0x24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <SysTick_Config>:
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024e0:	d301      	bcc.n	80024e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80024e2:	2301      	movs	r3, #1
 80024e4:	e00f      	b.n	8002506 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002510 <SysTick_Config+0x40>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ee:	210f      	movs	r1, #15
 80024f0:	f04f 30ff 	mov.w	r0, #4294967295
 80024f4:	f7ff ff8e 	bl	8002414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f8:	4b05      	ldr	r3, [pc, #20]	@ (8002510 <SysTick_Config+0x40>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024fe:	4b04      	ldr	r3, [pc, #16]	@ (8002510 <SysTick_Config+0x40>)
 8002500:	2207      	movs	r2, #7
 8002502:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	e000e010 	.word	0xe000e010

08002514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ff47 	bl	80023b0 <__NVIC_SetPriorityGrouping>
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	4603      	mov	r3, r0
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800253c:	f7ff ff5c 	bl	80023f8 <__NVIC_GetPriorityGrouping>
 8002540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	6978      	ldr	r0, [r7, #20]
 8002548:	f7ff ff8e 	bl	8002468 <NVIC_EncodePriority>
 800254c:	4602      	mov	r2, r0
 800254e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff5d 	bl	8002414 <__NVIC_SetPriority>
}
 800255a:	bf00      	nop
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff ffb0 	bl	80024d0 <SysTick_Config>
 8002570:	4603      	mov	r3, r0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	@ 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800258e:	2300      	movs	r3, #0
 8002590:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	e159      	b.n	800284c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002598:	2201      	movs	r2, #1
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	f040 8148 	bne.w	8002846 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d005      	beq.n	80025ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d130      	bne.n	8002630 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	2203      	movs	r2, #3
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002604:	2201      	movs	r2, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	091b      	lsrs	r3, r3, #4
 800261a:	f003 0201 	and.w	r2, r3, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b03      	cmp	r3, #3
 800263a:	d017      	beq.n	800266c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	2203      	movs	r2, #3
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d123      	bne.n	80026c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	08da      	lsrs	r2, r3, #3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3208      	adds	r2, #8
 8002680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	220f      	movs	r2, #15
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	08da      	lsrs	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3208      	adds	r2, #8
 80026ba:	69b9      	ldr	r1, [r7, #24]
 80026bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2203      	movs	r2, #3
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 0203 	and.w	r2, r3, #3
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80a2 	beq.w	8002846 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	4b57      	ldr	r3, [pc, #348]	@ (8002864 <HAL_GPIO_Init+0x2e8>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270a:	4a56      	ldr	r2, [pc, #344]	@ (8002864 <HAL_GPIO_Init+0x2e8>)
 800270c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002710:	6453      	str	r3, [r2, #68]	@ 0x44
 8002712:	4b54      	ldr	r3, [pc, #336]	@ (8002864 <HAL_GPIO_Init+0x2e8>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002716:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800271e:	4a52      	ldr	r2, [pc, #328]	@ (8002868 <HAL_GPIO_Init+0x2ec>)
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	089b      	lsrs	r3, r3, #2
 8002724:	3302      	adds	r3, #2
 8002726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	220f      	movs	r2, #15
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a49      	ldr	r2, [pc, #292]	@ (800286c <HAL_GPIO_Init+0x2f0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d019      	beq.n	800277e <HAL_GPIO_Init+0x202>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a48      	ldr	r2, [pc, #288]	@ (8002870 <HAL_GPIO_Init+0x2f4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d013      	beq.n	800277a <HAL_GPIO_Init+0x1fe>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a47      	ldr	r2, [pc, #284]	@ (8002874 <HAL_GPIO_Init+0x2f8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00d      	beq.n	8002776 <HAL_GPIO_Init+0x1fa>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a46      	ldr	r2, [pc, #280]	@ (8002878 <HAL_GPIO_Init+0x2fc>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d007      	beq.n	8002772 <HAL_GPIO_Init+0x1f6>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a45      	ldr	r2, [pc, #276]	@ (800287c <HAL_GPIO_Init+0x300>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d101      	bne.n	800276e <HAL_GPIO_Init+0x1f2>
 800276a:	2304      	movs	r3, #4
 800276c:	e008      	b.n	8002780 <HAL_GPIO_Init+0x204>
 800276e:	2307      	movs	r3, #7
 8002770:	e006      	b.n	8002780 <HAL_GPIO_Init+0x204>
 8002772:	2303      	movs	r3, #3
 8002774:	e004      	b.n	8002780 <HAL_GPIO_Init+0x204>
 8002776:	2302      	movs	r3, #2
 8002778:	e002      	b.n	8002780 <HAL_GPIO_Init+0x204>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <HAL_GPIO_Init+0x204>
 800277e:	2300      	movs	r3, #0
 8002780:	69fa      	ldr	r2, [r7, #28]
 8002782:	f002 0203 	and.w	r2, r2, #3
 8002786:	0092      	lsls	r2, r2, #2
 8002788:	4093      	lsls	r3, r2
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002790:	4935      	ldr	r1, [pc, #212]	@ (8002868 <HAL_GPIO_Init+0x2ec>)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	3302      	adds	r3, #2
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800279e:	4b38      	ldr	r3, [pc, #224]	@ (8002880 <HAL_GPIO_Init+0x304>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027c2:	4a2f      	ldr	r2, [pc, #188]	@ (8002880 <HAL_GPIO_Init+0x304>)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002880 <HAL_GPIO_Init+0x304>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027ec:	4a24      	ldr	r2, [pc, #144]	@ (8002880 <HAL_GPIO_Init+0x304>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027f2:	4b23      	ldr	r3, [pc, #140]	@ (8002880 <HAL_GPIO_Init+0x304>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002816:	4a1a      	ldr	r2, [pc, #104]	@ (8002880 <HAL_GPIO_Init+0x304>)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800281c:	4b18      	ldr	r3, [pc, #96]	@ (8002880 <HAL_GPIO_Init+0x304>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002840:	4a0f      	ldr	r2, [pc, #60]	@ (8002880 <HAL_GPIO_Init+0x304>)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3301      	adds	r3, #1
 800284a:	61fb      	str	r3, [r7, #28]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b0f      	cmp	r3, #15
 8002850:	f67f aea2 	bls.w	8002598 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	3724      	adds	r7, #36	@ 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	40013800 	.word	0x40013800
 800286c:	40020000 	.word	0x40020000
 8002870:	40020400 	.word	0x40020400
 8002874:	40020800 	.word	0x40020800
 8002878:	40020c00 	.word	0x40020c00
 800287c:	40021000 	.word	0x40021000
 8002880:	40013c00 	.word	0x40013c00

08002884 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	887b      	ldrh	r3, [r7, #2]
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800289c:	2301      	movs	r3, #1
 800289e:	73fb      	strb	r3, [r7, #15]
 80028a0:	e001      	b.n	80028a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	807b      	strh	r3, [r7, #2]
 80028c0:	4613      	mov	r3, r2
 80028c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028c4:	787b      	ldrb	r3, [r7, #1]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ca:	887a      	ldrh	r2, [r7, #2]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028d0:	e003      	b.n	80028da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028d2:	887b      	ldrh	r3, [r7, #2]
 80028d4:	041a      	lsls	r2, r3, #16
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	619a      	str	r2, [r3, #24]
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e12b      	b.n	8002b52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe ff02 	bl	8001718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2224      	movs	r2, #36	@ 0x24
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0201 	bic.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800293a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800294a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800294c:	f001 f8ea 	bl	8003b24 <HAL_RCC_GetPCLK1Freq>
 8002950:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4a81      	ldr	r2, [pc, #516]	@ (8002b5c <HAL_I2C_Init+0x274>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d807      	bhi.n	800296c <HAL_I2C_Init+0x84>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4a80      	ldr	r2, [pc, #512]	@ (8002b60 <HAL_I2C_Init+0x278>)
 8002960:	4293      	cmp	r3, r2
 8002962:	bf94      	ite	ls
 8002964:	2301      	movls	r3, #1
 8002966:	2300      	movhi	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	e006      	b.n	800297a <HAL_I2C_Init+0x92>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4a7d      	ldr	r2, [pc, #500]	@ (8002b64 <HAL_I2C_Init+0x27c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	bf94      	ite	ls
 8002974:	2301      	movls	r3, #1
 8002976:	2300      	movhi	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e0e7      	b.n	8002b52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4a78      	ldr	r2, [pc, #480]	@ (8002b68 <HAL_I2C_Init+0x280>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	0c9b      	lsrs	r3, r3, #18
 800298c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4a6a      	ldr	r2, [pc, #424]	@ (8002b5c <HAL_I2C_Init+0x274>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d802      	bhi.n	80029bc <HAL_I2C_Init+0xd4>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	3301      	adds	r3, #1
 80029ba:	e009      	b.n	80029d0 <HAL_I2C_Init+0xe8>
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029c2:	fb02 f303 	mul.w	r3, r2, r3
 80029c6:	4a69      	ldr	r2, [pc, #420]	@ (8002b6c <HAL_I2C_Init+0x284>)
 80029c8:	fba2 2303 	umull	r2, r3, r2, r3
 80029cc:	099b      	lsrs	r3, r3, #6
 80029ce:	3301      	adds	r3, #1
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	430b      	orrs	r3, r1
 80029d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80029e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	495c      	ldr	r1, [pc, #368]	@ (8002b5c <HAL_I2C_Init+0x274>)
 80029ec:	428b      	cmp	r3, r1
 80029ee:	d819      	bhi.n	8002a24 <HAL_I2C_Init+0x13c>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1e59      	subs	r1, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80029fe:	1c59      	adds	r1, r3, #1
 8002a00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a04:	400b      	ands	r3, r1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_I2C_Init+0x138>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1e59      	subs	r1, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a18:	3301      	adds	r3, #1
 8002a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1e:	e051      	b.n	8002ac4 <HAL_I2C_Init+0x1dc>
 8002a20:	2304      	movs	r3, #4
 8002a22:	e04f      	b.n	8002ac4 <HAL_I2C_Init+0x1dc>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d111      	bne.n	8002a50 <HAL_I2C_Init+0x168>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1e58      	subs	r0, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	440b      	add	r3, r1
 8002a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	e012      	b.n	8002a76 <HAL_I2C_Init+0x18e>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1e58      	subs	r0, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	0099      	lsls	r1, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a66:	3301      	adds	r3, #1
 8002a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bf0c      	ite	eq
 8002a70:	2301      	moveq	r3, #1
 8002a72:	2300      	movne	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_I2C_Init+0x196>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e022      	b.n	8002ac4 <HAL_I2C_Init+0x1dc>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10e      	bne.n	8002aa4 <HAL_I2C_Init+0x1bc>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1e58      	subs	r0, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6859      	ldr	r1, [r3, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	440b      	add	r3, r1
 8002a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002aa2:	e00f      	b.n	8002ac4 <HAL_I2C_Init+0x1dc>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e58      	subs	r0, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	0099      	lsls	r1, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aba:	3301      	adds	r3, #1
 8002abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	6809      	ldr	r1, [r1, #0]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69da      	ldr	r2, [r3, #28]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002af2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6911      	ldr	r1, [r2, #16]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68d2      	ldr	r2, [r2, #12]
 8002afe:	4311      	orrs	r1, r2
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	430b      	orrs	r3, r1
 8002b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	000186a0 	.word	0x000186a0
 8002b60:	001e847f 	.word	0x001e847f
 8002b64:	003d08ff 	.word	0x003d08ff
 8002b68:	431bde83 	.word	0x431bde83
 8002b6c:	10624dd3 	.word	0x10624dd3

08002b70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	4608      	mov	r0, r1
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4603      	mov	r3, r0
 8002b80:	817b      	strh	r3, [r7, #10]
 8002b82:	460b      	mov	r3, r1
 8002b84:	813b      	strh	r3, [r7, #8]
 8002b86:	4613      	mov	r3, r2
 8002b88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b8a:	f7ff fbe1 	bl	8002350 <HAL_GetTick>
 8002b8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	f040 80d9 	bne.w	8002d50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	2319      	movs	r3, #25
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	496d      	ldr	r1, [pc, #436]	@ (8002d5c <HAL_I2C_Mem_Write+0x1ec>)
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f971 	bl	8002e90 <I2C_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e0cc      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_I2C_Mem_Write+0x56>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e0c5      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d007      	beq.n	8002bec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2221      	movs	r2, #33	@ 0x21
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2240      	movs	r2, #64	@ 0x40
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a3a      	ldr	r2, [r7, #32]
 8002c16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4a4d      	ldr	r2, [pc, #308]	@ (8002d60 <HAL_I2C_Mem_Write+0x1f0>)
 8002c2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c2e:	88f8      	ldrh	r0, [r7, #6]
 8002c30:	893a      	ldrh	r2, [r7, #8]
 8002c32:	8979      	ldrh	r1, [r7, #10]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f890 	bl	8002d64 <I2C_RequestMemoryWrite>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d052      	beq.n	8002cf0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e081      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 fa36 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00d      	beq.n	8002c7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d107      	bne.n	8002c76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e06b      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7e:	781a      	ldrb	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d11b      	bne.n	8002cf0 <HAL_I2C_Mem_Write+0x180>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d017      	beq.n	8002cf0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc4:	781a      	ldrb	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1aa      	bne.n	8002c4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 fa29 	bl	8003154 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00d      	beq.n	8002d24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d107      	bne.n	8002d20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e016      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e000      	b.n	8002d52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d50:	2302      	movs	r3, #2
  }
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	00100002 	.word	0x00100002
 8002d60:	ffff0000 	.word	0xffff0000

08002d64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	4611      	mov	r1, r2
 8002d70:	461a      	mov	r2, r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	817b      	strh	r3, [r7, #10]
 8002d76:	460b      	mov	r3, r1
 8002d78:	813b      	strh	r3, [r7, #8]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 f878 	bl	8002e90 <I2C_WaitOnFlagUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00d      	beq.n	8002dc2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002db4:	d103      	bne.n	8002dbe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e05f      	b.n	8002e82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dc2:	897b      	ldrh	r3, [r7, #10]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002dd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd4:	6a3a      	ldr	r2, [r7, #32]
 8002dd6:	492d      	ldr	r1, [pc, #180]	@ (8002e8c <I2C_RequestMemoryWrite+0x128>)
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f8d3 	bl	8002f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e04c      	b.n	8002e82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e00:	6a39      	ldr	r1, [r7, #32]
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f95e 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00d      	beq.n	8002e2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d107      	bne.n	8002e26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e02b      	b.n	8002e82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d105      	bne.n	8002e3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e30:	893b      	ldrh	r3, [r7, #8]
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	611a      	str	r2, [r3, #16]
 8002e3a:	e021      	b.n	8002e80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e3c:	893b      	ldrh	r3, [r7, #8]
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e4c:	6a39      	ldr	r1, [r7, #32]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f938 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00d      	beq.n	8002e76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d107      	bne.n	8002e72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e005      	b.n	8002e82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e76:	893b      	ldrh	r3, [r7, #8]
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	00010002 	.word	0x00010002

08002e90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ea0:	e048      	b.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea8:	d044      	beq.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eaa:	f7ff fa51 	bl	8002350 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d302      	bcc.n	8002ec0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d139      	bne.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	0c1b      	lsrs	r3, r3, #16
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d10d      	bne.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	43da      	mvns	r2, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	e00c      	b.n	8002f00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	43da      	mvns	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2301      	moveq	r3, #1
 8002efa:	2300      	movne	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	461a      	mov	r2, r3
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d116      	bne.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	f043 0220 	orr.w	r2, r3, #32
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e023      	b.n	8002f7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	0c1b      	lsrs	r3, r3, #16
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d10d      	bne.n	8002f5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	43da      	mvns	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	e00c      	b.n	8002f74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	43da      	mvns	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4013      	ands	r3, r2
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d093      	beq.n	8002ea2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f92:	e071      	b.n	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fa2:	d123      	bne.n	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fb2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	f043 0204 	orr.w	r2, r3, #4
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e067      	b.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff2:	d041      	beq.n	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff4:	f7ff f9ac 	bl	8002350 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	429a      	cmp	r2, r3
 8003002:	d302      	bcc.n	800300a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d136      	bne.n	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	0c1b      	lsrs	r3, r3, #16
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d10c      	bne.n	800302e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	43da      	mvns	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4013      	ands	r3, r2
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	bf14      	ite	ne
 8003026:	2301      	movne	r3, #1
 8003028:	2300      	moveq	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	e00b      	b.n	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	43da      	mvns	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4013      	ands	r3, r2
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf14      	ite	ne
 8003040:	2301      	movne	r3, #1
 8003042:	2300      	moveq	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d016      	beq.n	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	f043 0220 	orr.w	r2, r3, #32
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e021      	b.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	0c1b      	lsrs	r3, r3, #16
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b01      	cmp	r3, #1
 8003080:	d10c      	bne.n	800309c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	43da      	mvns	r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	4013      	ands	r3, r2
 800308e:	b29b      	uxth	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf14      	ite	ne
 8003094:	2301      	movne	r3, #1
 8003096:	2300      	moveq	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	e00b      	b.n	80030b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	43da      	mvns	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4013      	ands	r3, r2
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	bf14      	ite	ne
 80030ae:	2301      	movne	r3, #1
 80030b0:	2300      	moveq	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f47f af6d 	bne.w	8002f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030d0:	e034      	b.n	800313c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f886 	bl	80031e4 <I2C_IsAcknowledgeFailed>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e034      	b.n	800314c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d028      	beq.n	800313c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ea:	f7ff f931 	bl	8002350 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d302      	bcc.n	8003100 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d11d      	bne.n	800313c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800310a:	2b80      	cmp	r3, #128	@ 0x80
 800310c:	d016      	beq.n	800313c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003128:	f043 0220 	orr.w	r2, r3, #32
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e007      	b.n	800314c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003146:	2b80      	cmp	r3, #128	@ 0x80
 8003148:	d1c3      	bne.n	80030d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003160:	e034      	b.n	80031cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f83e 	bl	80031e4 <I2C_IsAcknowledgeFailed>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e034      	b.n	80031dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003178:	d028      	beq.n	80031cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317a:	f7ff f8e9 	bl	8002350 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	429a      	cmp	r2, r3
 8003188:	d302      	bcc.n	8003190 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d11d      	bne.n	80031cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b04      	cmp	r3, #4
 800319c:	d016      	beq.n	80031cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	f043 0220 	orr.w	r2, r3, #32
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e007      	b.n	80031dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d1c3      	bne.n	8003162 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031fa:	d11b      	bne.n	8003234 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003204:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	f043 0204 	orr.w	r2, r3, #4
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e267      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d075      	beq.n	800334e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003262:	4b88      	ldr	r3, [pc, #544]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 030c 	and.w	r3, r3, #12
 800326a:	2b04      	cmp	r3, #4
 800326c:	d00c      	beq.n	8003288 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800326e:	4b85      	ldr	r3, [pc, #532]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003276:	2b08      	cmp	r3, #8
 8003278:	d112      	bne.n	80032a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800327a:	4b82      	ldr	r3, [pc, #520]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003282:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003286:	d10b      	bne.n	80032a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003288:	4b7e      	ldr	r3, [pc, #504]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d05b      	beq.n	800334c <HAL_RCC_OscConfig+0x108>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d157      	bne.n	800334c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e242      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a8:	d106      	bne.n	80032b8 <HAL_RCC_OscConfig+0x74>
 80032aa:	4b76      	ldr	r3, [pc, #472]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a75      	ldr	r2, [pc, #468]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80032b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	e01d      	b.n	80032f4 <HAL_RCC_OscConfig+0xb0>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032c0:	d10c      	bne.n	80032dc <HAL_RCC_OscConfig+0x98>
 80032c2:	4b70      	ldr	r3, [pc, #448]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a6f      	ldr	r2, [pc, #444]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80032c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a6c      	ldr	r2, [pc, #432]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	e00b      	b.n	80032f4 <HAL_RCC_OscConfig+0xb0>
 80032dc:	4b69      	ldr	r3, [pc, #420]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a68      	ldr	r2, [pc, #416]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80032e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	4b66      	ldr	r3, [pc, #408]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a65      	ldr	r2, [pc, #404]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80032ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d013      	beq.n	8003324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fc:	f7ff f828 	bl	8002350 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003304:	f7ff f824 	bl	8002350 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	@ 0x64
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e207      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	4b5b      	ldr	r3, [pc, #364]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0xc0>
 8003322:	e014      	b.n	800334e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003324:	f7ff f814 	bl	8002350 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800332c:	f7ff f810 	bl	8002350 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	@ 0x64
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e1f3      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333e:	4b51      	ldr	r3, [pc, #324]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0xe8>
 800334a:	e000      	b.n	800334e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d063      	beq.n	8003422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800335a:	4b4a      	ldr	r3, [pc, #296]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00b      	beq.n	800337e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003366:	4b47      	ldr	r3, [pc, #284]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800336e:	2b08      	cmp	r3, #8
 8003370:	d11c      	bne.n	80033ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003372:	4b44      	ldr	r3, [pc, #272]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d116      	bne.n	80033ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337e:	4b41      	ldr	r3, [pc, #260]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <HAL_RCC_OscConfig+0x152>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d001      	beq.n	8003396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e1c7      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003396:	4b3b      	ldr	r3, [pc, #236]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4937      	ldr	r1, [pc, #220]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033aa:	e03a      	b.n	8003422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d020      	beq.n	80033f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b4:	4b34      	ldr	r3, [pc, #208]	@ (8003488 <HAL_RCC_OscConfig+0x244>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ba:	f7fe ffc9 	bl	8002350 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c2:	f7fe ffc5 	bl	8002350 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e1a8      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e0:	4b28      	ldr	r3, [pc, #160]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4925      	ldr	r1, [pc, #148]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	600b      	str	r3, [r1, #0]
 80033f4:	e015      	b.n	8003422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033f6:	4b24      	ldr	r3, [pc, #144]	@ (8003488 <HAL_RCC_OscConfig+0x244>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fe ffa8 	bl	8002350 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003404:	f7fe ffa4 	bl	8002350 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e187      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003416:	4b1b      	ldr	r3, [pc, #108]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d036      	beq.n	800349c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d016      	beq.n	8003464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003436:	4b15      	ldr	r3, [pc, #84]	@ (800348c <HAL_RCC_OscConfig+0x248>)
 8003438:	2201      	movs	r2, #1
 800343a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343c:	f7fe ff88 	bl	8002350 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003444:	f7fe ff84 	bl	8002350 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e167      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003456:	4b0b      	ldr	r3, [pc, #44]	@ (8003484 <HAL_RCC_OscConfig+0x240>)
 8003458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x200>
 8003462:	e01b      	b.n	800349c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003464:	4b09      	ldr	r3, [pc, #36]	@ (800348c <HAL_RCC_OscConfig+0x248>)
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346a:	f7fe ff71 	bl	8002350 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003470:	e00e      	b.n	8003490 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003472:	f7fe ff6d 	bl	8002350 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d907      	bls.n	8003490 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e150      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
 8003484:	40023800 	.word	0x40023800
 8003488:	42470000 	.word	0x42470000
 800348c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003490:	4b88      	ldr	r3, [pc, #544]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1ea      	bne.n	8003472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8097 	beq.w	80035d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034aa:	2300      	movs	r3, #0
 80034ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ae:	4b81      	ldr	r3, [pc, #516]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10f      	bne.n	80034da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	4b7d      	ldr	r3, [pc, #500]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c2:	4a7c      	ldr	r2, [pc, #496]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 80034c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ca:	4b7a      	ldr	r3, [pc, #488]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d2:	60bb      	str	r3, [r7, #8]
 80034d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034d6:	2301      	movs	r3, #1
 80034d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034da:	4b77      	ldr	r3, [pc, #476]	@ (80036b8 <HAL_RCC_OscConfig+0x474>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d118      	bne.n	8003518 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034e6:	4b74      	ldr	r3, [pc, #464]	@ (80036b8 <HAL_RCC_OscConfig+0x474>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a73      	ldr	r2, [pc, #460]	@ (80036b8 <HAL_RCC_OscConfig+0x474>)
 80034ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f2:	f7fe ff2d 	bl	8002350 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fa:	f7fe ff29 	bl	8002350 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e10c      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350c:	4b6a      	ldr	r3, [pc, #424]	@ (80036b8 <HAL_RCC_OscConfig+0x474>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d106      	bne.n	800352e <HAL_RCC_OscConfig+0x2ea>
 8003520:	4b64      	ldr	r3, [pc, #400]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003524:	4a63      	ldr	r2, [pc, #396]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	6713      	str	r3, [r2, #112]	@ 0x70
 800352c:	e01c      	b.n	8003568 <HAL_RCC_OscConfig+0x324>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b05      	cmp	r3, #5
 8003534:	d10c      	bne.n	8003550 <HAL_RCC_OscConfig+0x30c>
 8003536:	4b5f      	ldr	r3, [pc, #380]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353a:	4a5e      	ldr	r2, [pc, #376]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 800353c:	f043 0304 	orr.w	r3, r3, #4
 8003540:	6713      	str	r3, [r2, #112]	@ 0x70
 8003542:	4b5c      	ldr	r3, [pc, #368]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003546:	4a5b      	ldr	r2, [pc, #364]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	6713      	str	r3, [r2, #112]	@ 0x70
 800354e:	e00b      	b.n	8003568 <HAL_RCC_OscConfig+0x324>
 8003550:	4b58      	ldr	r3, [pc, #352]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003554:	4a57      	ldr	r2, [pc, #348]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003556:	f023 0301 	bic.w	r3, r3, #1
 800355a:	6713      	str	r3, [r2, #112]	@ 0x70
 800355c:	4b55      	ldr	r3, [pc, #340]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003560:	4a54      	ldr	r2, [pc, #336]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003562:	f023 0304 	bic.w	r3, r3, #4
 8003566:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d015      	beq.n	800359c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003570:	f7fe feee 	bl	8002350 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003576:	e00a      	b.n	800358e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003578:	f7fe feea 	bl	8002350 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003586:	4293      	cmp	r3, r2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e0cb      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358e:	4b49      	ldr	r3, [pc, #292]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0ee      	beq.n	8003578 <HAL_RCC_OscConfig+0x334>
 800359a:	e014      	b.n	80035c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359c:	f7fe fed8 	bl	8002350 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a2:	e00a      	b.n	80035ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a4:	f7fe fed4 	bl	8002350 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e0b5      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ba:	4b3e      	ldr	r3, [pc, #248]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1ee      	bne.n	80035a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035c6:	7dfb      	ldrb	r3, [r7, #23]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d105      	bne.n	80035d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035cc:	4b39      	ldr	r3, [pc, #228]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 80035ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d0:	4a38      	ldr	r2, [pc, #224]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 80035d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80a1 	beq.w	8003724 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035e2:	4b34      	ldr	r3, [pc, #208]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d05c      	beq.n	80036a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d141      	bne.n	800367a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f6:	4b31      	ldr	r3, [pc, #196]	@ (80036bc <HAL_RCC_OscConfig+0x478>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7fe fea8 	bl	8002350 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003604:	f7fe fea4 	bl	8002350 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e087      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003616:	4b27      	ldr	r3, [pc, #156]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f0      	bne.n	8003604 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69da      	ldr	r2, [r3, #28]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003630:	019b      	lsls	r3, r3, #6
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003638:	085b      	lsrs	r3, r3, #1
 800363a:	3b01      	subs	r3, #1
 800363c:	041b      	lsls	r3, r3, #16
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	061b      	lsls	r3, r3, #24
 8003646:	491b      	ldr	r1, [pc, #108]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 8003648:	4313      	orrs	r3, r2
 800364a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800364c:	4b1b      	ldr	r3, [pc, #108]	@ (80036bc <HAL_RCC_OscConfig+0x478>)
 800364e:	2201      	movs	r2, #1
 8003650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003652:	f7fe fe7d 	bl	8002350 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365a:	f7fe fe79 	bl	8002350 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e05c      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366c:	4b11      	ldr	r3, [pc, #68]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCC_OscConfig+0x416>
 8003678:	e054      	b.n	8003724 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367a:	4b10      	ldr	r3, [pc, #64]	@ (80036bc <HAL_RCC_OscConfig+0x478>)
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003680:	f7fe fe66 	bl	8002350 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003688:	f7fe fe62 	bl	8002350 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e045      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369a:	4b06      	ldr	r3, [pc, #24]	@ (80036b4 <HAL_RCC_OscConfig+0x470>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0x444>
 80036a6:	e03d      	b.n	8003724 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d107      	bne.n	80036c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e038      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40007000 	.word	0x40007000
 80036bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003730 <HAL_RCC_OscConfig+0x4ec>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d028      	beq.n	8003720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036d8:	429a      	cmp	r2, r3
 80036da:	d121      	bne.n	8003720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d11a      	bne.n	8003720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80036f0:	4013      	ands	r3, r2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d111      	bne.n	8003720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003706:	085b      	lsrs	r3, r3, #1
 8003708:	3b01      	subs	r3, #1
 800370a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800370c:	429a      	cmp	r2, r3
 800370e:	d107      	bne.n	8003720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e000      	b.n	8003726 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40023800 	.word	0x40023800

08003734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0cc      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003748:	4b68      	ldr	r3, [pc, #416]	@ (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d90c      	bls.n	8003770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b65      	ldr	r3, [pc, #404]	@ (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375e:	4b63      	ldr	r3, [pc, #396]	@ (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d001      	beq.n	8003770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0b8      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d020      	beq.n	80037be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003788:	4b59      	ldr	r3, [pc, #356]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4a58      	ldr	r2, [pc, #352]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003792:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037a0:	4b53      	ldr	r3, [pc, #332]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	4a52      	ldr	r2, [pc, #328]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ac:	4b50      	ldr	r3, [pc, #320]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	494d      	ldr	r1, [pc, #308]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d044      	beq.n	8003854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d107      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d2:	4b47      	ldr	r3, [pc, #284]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d119      	bne.n	8003812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e07f      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d003      	beq.n	80037f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d107      	bne.n	8003802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f2:	4b3f      	ldr	r3, [pc, #252]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e06f      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003802:	4b3b      	ldr	r3, [pc, #236]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e067      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003812:	4b37      	ldr	r3, [pc, #220]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f023 0203 	bic.w	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4934      	ldr	r1, [pc, #208]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003820:	4313      	orrs	r3, r2
 8003822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003824:	f7fe fd94 	bl	8002350 <HAL_GetTick>
 8003828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382a:	e00a      	b.n	8003842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382c:	f7fe fd90 	bl	8002350 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e04f      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003842:	4b2b      	ldr	r3, [pc, #172]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 020c 	and.w	r2, r3, #12
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	429a      	cmp	r2, r3
 8003852:	d1eb      	bne.n	800382c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003854:	4b25      	ldr	r3, [pc, #148]	@ (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d20c      	bcs.n	800387c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003862:	4b22      	ldr	r3, [pc, #136]	@ (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b20      	ldr	r3, [pc, #128]	@ (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e032      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003888:	4b19      	ldr	r3, [pc, #100]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4916      	ldr	r1, [pc, #88]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	4313      	orrs	r3, r2
 8003898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d009      	beq.n	80038ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038a6:	4b12      	ldr	r3, [pc, #72]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	490e      	ldr	r1, [pc, #56]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038ba:	f000 f821 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 80038be:	4602      	mov	r2, r0
 80038c0:	4b0b      	ldr	r3, [pc, #44]	@ (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	091b      	lsrs	r3, r3, #4
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	490a      	ldr	r1, [pc, #40]	@ (80038f4 <HAL_RCC_ClockConfig+0x1c0>)
 80038cc:	5ccb      	ldrb	r3, [r1, r3]
 80038ce:	fa22 f303 	lsr.w	r3, r2, r3
 80038d2:	4a09      	ldr	r2, [pc, #36]	@ (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80038d6:	4b09      	ldr	r3, [pc, #36]	@ (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe fcf4 	bl	80022c8 <HAL_InitTick>

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40023c00 	.word	0x40023c00
 80038f0:	40023800 	.word	0x40023800
 80038f4:	080055c8 	.word	0x080055c8
 80038f8:	2000002c 	.word	0x2000002c
 80038fc:	20000030 	.word	0x20000030

08003900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003904:	b094      	sub	sp, #80	@ 0x50
 8003906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003918:	4b79      	ldr	r3, [pc, #484]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 030c 	and.w	r3, r3, #12
 8003920:	2b08      	cmp	r3, #8
 8003922:	d00d      	beq.n	8003940 <HAL_RCC_GetSysClockFreq+0x40>
 8003924:	2b08      	cmp	r3, #8
 8003926:	f200 80e1 	bhi.w	8003aec <HAL_RCC_GetSysClockFreq+0x1ec>
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HAL_RCC_GetSysClockFreq+0x34>
 800392e:	2b04      	cmp	r3, #4
 8003930:	d003      	beq.n	800393a <HAL_RCC_GetSysClockFreq+0x3a>
 8003932:	e0db      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003934:	4b73      	ldr	r3, [pc, #460]	@ (8003b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8003936:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003938:	e0db      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800393a:	4b73      	ldr	r3, [pc, #460]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x208>)
 800393c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800393e:	e0d8      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003940:	4b6f      	ldr	r3, [pc, #444]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003948:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800394a:	4b6d      	ldr	r3, [pc, #436]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d063      	beq.n	8003a1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003956:	4b6a      	ldr	r3, [pc, #424]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	099b      	lsrs	r3, r3, #6
 800395c:	2200      	movs	r2, #0
 800395e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003960:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003968:	633b      	str	r3, [r7, #48]	@ 0x30
 800396a:	2300      	movs	r3, #0
 800396c:	637b      	str	r3, [r7, #52]	@ 0x34
 800396e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003972:	4622      	mov	r2, r4
 8003974:	462b      	mov	r3, r5
 8003976:	f04f 0000 	mov.w	r0, #0
 800397a:	f04f 0100 	mov.w	r1, #0
 800397e:	0159      	lsls	r1, r3, #5
 8003980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003984:	0150      	lsls	r0, r2, #5
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4621      	mov	r1, r4
 800398c:	1a51      	subs	r1, r2, r1
 800398e:	6139      	str	r1, [r7, #16]
 8003990:	4629      	mov	r1, r5
 8003992:	eb63 0301 	sbc.w	r3, r3, r1
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039a4:	4659      	mov	r1, fp
 80039a6:	018b      	lsls	r3, r1, #6
 80039a8:	4651      	mov	r1, sl
 80039aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039ae:	4651      	mov	r1, sl
 80039b0:	018a      	lsls	r2, r1, #6
 80039b2:	4651      	mov	r1, sl
 80039b4:	ebb2 0801 	subs.w	r8, r2, r1
 80039b8:	4659      	mov	r1, fp
 80039ba:	eb63 0901 	sbc.w	r9, r3, r1
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039d2:	4690      	mov	r8, r2
 80039d4:	4699      	mov	r9, r3
 80039d6:	4623      	mov	r3, r4
 80039d8:	eb18 0303 	adds.w	r3, r8, r3
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	462b      	mov	r3, r5
 80039e0:	eb49 0303 	adc.w	r3, r9, r3
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039f2:	4629      	mov	r1, r5
 80039f4:	024b      	lsls	r3, r1, #9
 80039f6:	4621      	mov	r1, r4
 80039f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039fc:	4621      	mov	r1, r4
 80039fe:	024a      	lsls	r2, r1, #9
 8003a00:	4610      	mov	r0, r2
 8003a02:	4619      	mov	r1, r3
 8003a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a06:	2200      	movs	r2, #0
 8003a08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a10:	f7fc fc36 	bl	8000280 <__aeabi_uldivmod>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4613      	mov	r3, r2
 8003a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a1c:	e058      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a1e:	4b38      	ldr	r3, [pc, #224]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	099b      	lsrs	r3, r3, #6
 8003a24:	2200      	movs	r2, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	4611      	mov	r1, r2
 8003a2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a2e:	623b      	str	r3, [r7, #32]
 8003a30:	2300      	movs	r3, #0
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a38:	4642      	mov	r2, r8
 8003a3a:	464b      	mov	r3, r9
 8003a3c:	f04f 0000 	mov.w	r0, #0
 8003a40:	f04f 0100 	mov.w	r1, #0
 8003a44:	0159      	lsls	r1, r3, #5
 8003a46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a4a:	0150      	lsls	r0, r2, #5
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4641      	mov	r1, r8
 8003a52:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a56:	4649      	mov	r1, r9
 8003a58:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a70:	ebb2 040a 	subs.w	r4, r2, sl
 8003a74:	eb63 050b 	sbc.w	r5, r3, fp
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	00eb      	lsls	r3, r5, #3
 8003a82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a86:	00e2      	lsls	r2, r4, #3
 8003a88:	4614      	mov	r4, r2
 8003a8a:	461d      	mov	r5, r3
 8003a8c:	4643      	mov	r3, r8
 8003a8e:	18e3      	adds	r3, r4, r3
 8003a90:	603b      	str	r3, [r7, #0]
 8003a92:	464b      	mov	r3, r9
 8003a94:	eb45 0303 	adc.w	r3, r5, r3
 8003a98:	607b      	str	r3, [r7, #4]
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	028b      	lsls	r3, r1, #10
 8003aaa:	4621      	mov	r1, r4
 8003aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	028a      	lsls	r2, r1, #10
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aba:	2200      	movs	r2, #0
 8003abc:	61bb      	str	r3, [r7, #24]
 8003abe:	61fa      	str	r2, [r7, #28]
 8003ac0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ac4:	f7fc fbdc 	bl	8000280 <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4613      	mov	r3, r2
 8003ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	0c1b      	lsrs	r3, r3, #16
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	3301      	adds	r3, #1
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003ae0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003aea:	e002      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003aec:	4b05      	ldr	r3, [pc, #20]	@ (8003b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8003aee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003af2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3750      	adds	r7, #80	@ 0x50
 8003af8:	46bd      	mov	sp, r7
 8003afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003afe:	bf00      	nop
 8003b00:	40023800 	.word	0x40023800
 8003b04:	00f42400 	.word	0x00f42400
 8003b08:	007a1200 	.word	0x007a1200

08003b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b10:	4b03      	ldr	r3, [pc, #12]	@ (8003b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b12:	681b      	ldr	r3, [r3, #0]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	2000002c 	.word	0x2000002c

08003b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b28:	f7ff fff0 	bl	8003b0c <HAL_RCC_GetHCLKFreq>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	4b05      	ldr	r3, [pc, #20]	@ (8003b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	0a9b      	lsrs	r3, r3, #10
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	4903      	ldr	r1, [pc, #12]	@ (8003b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b3a:	5ccb      	ldrb	r3, [r1, r3]
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40023800 	.word	0x40023800
 8003b48:	080055d8 	.word	0x080055d8

08003b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e041      	b.n	8003be2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fd fe18 	bl	80017a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3304      	adds	r3, #4
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	f000 f950 	bl	8003e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d001      	beq.n	8003c04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e03c      	b.n	8003c7e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a1e      	ldr	r2, [pc, #120]	@ (8003c8c <HAL_TIM_Base_Start+0xa0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d018      	beq.n	8003c48 <HAL_TIM_Base_Start+0x5c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c1e:	d013      	beq.n	8003c48 <HAL_TIM_Base_Start+0x5c>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a1a      	ldr	r2, [pc, #104]	@ (8003c90 <HAL_TIM_Base_Start+0xa4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00e      	beq.n	8003c48 <HAL_TIM_Base_Start+0x5c>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a19      	ldr	r2, [pc, #100]	@ (8003c94 <HAL_TIM_Base_Start+0xa8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d009      	beq.n	8003c48 <HAL_TIM_Base_Start+0x5c>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a17      	ldr	r2, [pc, #92]	@ (8003c98 <HAL_TIM_Base_Start+0xac>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d004      	beq.n	8003c48 <HAL_TIM_Base_Start+0x5c>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a16      	ldr	r2, [pc, #88]	@ (8003c9c <HAL_TIM_Base_Start+0xb0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d111      	bne.n	8003c6c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b06      	cmp	r3, #6
 8003c58:	d010      	beq.n	8003c7c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0201 	orr.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6a:	e007      	b.n	8003c7c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40010000 	.word	0x40010000
 8003c90:	40000400 	.word	0x40000400
 8003c94:	40000800 	.word	0x40000800
 8003c98:	40000c00 	.word	0x40000c00
 8003c9c:	40014000 	.word	0x40014000

08003ca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_TIM_ConfigClockSource+0x1c>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e0b4      	b.n	8003e26 <HAL_TIM_ConfigClockSource+0x186>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ce2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cf4:	d03e      	beq.n	8003d74 <HAL_TIM_ConfigClockSource+0xd4>
 8003cf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cfa:	f200 8087 	bhi.w	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003cfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d02:	f000 8086 	beq.w	8003e12 <HAL_TIM_ConfigClockSource+0x172>
 8003d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d0a:	d87f      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d0c:	2b70      	cmp	r3, #112	@ 0x70
 8003d0e:	d01a      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0xa6>
 8003d10:	2b70      	cmp	r3, #112	@ 0x70
 8003d12:	d87b      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d14:	2b60      	cmp	r3, #96	@ 0x60
 8003d16:	d050      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x11a>
 8003d18:	2b60      	cmp	r3, #96	@ 0x60
 8003d1a:	d877      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d1c:	2b50      	cmp	r3, #80	@ 0x50
 8003d1e:	d03c      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0xfa>
 8003d20:	2b50      	cmp	r3, #80	@ 0x50
 8003d22:	d873      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d24:	2b40      	cmp	r3, #64	@ 0x40
 8003d26:	d058      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x13a>
 8003d28:	2b40      	cmp	r3, #64	@ 0x40
 8003d2a:	d86f      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d2c:	2b30      	cmp	r3, #48	@ 0x30
 8003d2e:	d064      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x15a>
 8003d30:	2b30      	cmp	r3, #48	@ 0x30
 8003d32:	d86b      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	d060      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x15a>
 8003d38:	2b20      	cmp	r3, #32
 8003d3a:	d867      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d05c      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x15a>
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	d05a      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x15a>
 8003d44:	e062      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d56:	f000 f971 	bl	800403c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	609a      	str	r2, [r3, #8]
      break;
 8003d72:	e04f      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d84:	f000 f95a 	bl	800403c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d96:	609a      	str	r2, [r3, #8]
      break;
 8003d98:	e03c      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da6:	461a      	mov	r2, r3
 8003da8:	f000 f8ce 	bl	8003f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2150      	movs	r1, #80	@ 0x50
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 f927 	bl	8004006 <TIM_ITRx_SetConfig>
      break;
 8003db8:	e02c      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f000 f8ed 	bl	8003fa6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2160      	movs	r1, #96	@ 0x60
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 f917 	bl	8004006 <TIM_ITRx_SetConfig>
      break;
 8003dd8:	e01c      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de6:	461a      	mov	r2, r3
 8003de8:	f000 f8ae 	bl	8003f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2140      	movs	r1, #64	@ 0x40
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 f907 	bl	8004006 <TIM_ITRx_SetConfig>
      break;
 8003df8:	e00c      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4619      	mov	r1, r3
 8003e04:	4610      	mov	r0, r2
 8003e06:	f000 f8fe 	bl	8004006 <TIM_ITRx_SetConfig>
      break;
 8003e0a:	e003      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e10:	e000      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a3a      	ldr	r2, [pc, #232]	@ (8003f2c <TIM_Base_SetConfig+0xfc>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00f      	beq.n	8003e68 <TIM_Base_SetConfig+0x38>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e4e:	d00b      	beq.n	8003e68 <TIM_Base_SetConfig+0x38>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a37      	ldr	r2, [pc, #220]	@ (8003f30 <TIM_Base_SetConfig+0x100>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d007      	beq.n	8003e68 <TIM_Base_SetConfig+0x38>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a36      	ldr	r2, [pc, #216]	@ (8003f34 <TIM_Base_SetConfig+0x104>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <TIM_Base_SetConfig+0x38>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a35      	ldr	r2, [pc, #212]	@ (8003f38 <TIM_Base_SetConfig+0x108>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d108      	bne.n	8003e7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8003f2c <TIM_Base_SetConfig+0xfc>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d01b      	beq.n	8003eba <TIM_Base_SetConfig+0x8a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e88:	d017      	beq.n	8003eba <TIM_Base_SetConfig+0x8a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a28      	ldr	r2, [pc, #160]	@ (8003f30 <TIM_Base_SetConfig+0x100>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d013      	beq.n	8003eba <TIM_Base_SetConfig+0x8a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a27      	ldr	r2, [pc, #156]	@ (8003f34 <TIM_Base_SetConfig+0x104>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00f      	beq.n	8003eba <TIM_Base_SetConfig+0x8a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a26      	ldr	r2, [pc, #152]	@ (8003f38 <TIM_Base_SetConfig+0x108>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00b      	beq.n	8003eba <TIM_Base_SetConfig+0x8a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a25      	ldr	r2, [pc, #148]	@ (8003f3c <TIM_Base_SetConfig+0x10c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d007      	beq.n	8003eba <TIM_Base_SetConfig+0x8a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a24      	ldr	r2, [pc, #144]	@ (8003f40 <TIM_Base_SetConfig+0x110>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d003      	beq.n	8003eba <TIM_Base_SetConfig+0x8a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a23      	ldr	r2, [pc, #140]	@ (8003f44 <TIM_Base_SetConfig+0x114>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d108      	bne.n	8003ecc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8003f2c <TIM_Base_SetConfig+0xfc>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d103      	bne.n	8003f00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d105      	bne.n	8003f1e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f023 0201 	bic.w	r2, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	611a      	str	r2, [r3, #16]
  }
}
 8003f1e:	bf00      	nop
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	40000400 	.word	0x40000400
 8003f34:	40000800 	.word	0x40000800
 8003f38:	40000c00 	.word	0x40000c00
 8003f3c:	40014000 	.word	0x40014000
 8003f40:	40014400 	.word	0x40014400
 8003f44:	40014800 	.word	0x40014800

08003f48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	f023 0201 	bic.w	r2, r3, #1
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f023 030a 	bic.w	r3, r3, #10
 8003f84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	621a      	str	r2, [r3, #32]
}
 8003f9a:	bf00      	nop
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b087      	sub	sp, #28
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	f023 0210 	bic.w	r2, r3, #16
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	031b      	lsls	r3, r3, #12
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003fe2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	621a      	str	r2, [r3, #32]
}
 8003ffa:	bf00      	nop
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004006:	b480      	push	{r7}
 8004008:	b085      	sub	sp, #20
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800401c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	f043 0307 	orr.w	r3, r3, #7
 8004028:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	609a      	str	r2, [r3, #8]
}
 8004030:	bf00      	nop
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
 8004048:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004056:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	021a      	lsls	r2, r3, #8
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	431a      	orrs	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4313      	orrs	r3, r2
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	609a      	str	r2, [r3, #8]
}
 8004070:	bf00      	nop
 8004072:	371c      	adds	r7, #28
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004090:	2302      	movs	r3, #2
 8004092:	e050      	b.n	8004136 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004144 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d018      	beq.n	800410a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e0:	d013      	beq.n	800410a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a18      	ldr	r2, [pc, #96]	@ (8004148 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00e      	beq.n	800410a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a16      	ldr	r2, [pc, #88]	@ (800414c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d009      	beq.n	800410a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a15      	ldr	r2, [pc, #84]	@ (8004150 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d004      	beq.n	800410a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a13      	ldr	r2, [pc, #76]	@ (8004154 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d10c      	bne.n	8004124 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004110:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	4313      	orrs	r3, r2
 800411a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40010000 	.word	0x40010000
 8004148:	40000400 	.word	0x40000400
 800414c:	40000800 	.word	0x40000800
 8004150:	40000c00 	.word	0x40000c00
 8004154:	40014000 	.word	0x40014000

08004158 <malloc>:
 8004158:	4b02      	ldr	r3, [pc, #8]	@ (8004164 <malloc+0xc>)
 800415a:	4601      	mov	r1, r0
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	f000 b825 	b.w	80041ac <_malloc_r>
 8004162:	bf00      	nop
 8004164:	20000044 	.word	0x20000044

08004168 <sbrk_aligned>:
 8004168:	b570      	push	{r4, r5, r6, lr}
 800416a:	4e0f      	ldr	r6, [pc, #60]	@ (80041a8 <sbrk_aligned+0x40>)
 800416c:	460c      	mov	r4, r1
 800416e:	6831      	ldr	r1, [r6, #0]
 8004170:	4605      	mov	r5, r0
 8004172:	b911      	cbnz	r1, 800417a <sbrk_aligned+0x12>
 8004174:	f000 fb0e 	bl	8004794 <_sbrk_r>
 8004178:	6030      	str	r0, [r6, #0]
 800417a:	4621      	mov	r1, r4
 800417c:	4628      	mov	r0, r5
 800417e:	f000 fb09 	bl	8004794 <_sbrk_r>
 8004182:	1c43      	adds	r3, r0, #1
 8004184:	d103      	bne.n	800418e <sbrk_aligned+0x26>
 8004186:	f04f 34ff 	mov.w	r4, #4294967295
 800418a:	4620      	mov	r0, r4
 800418c:	bd70      	pop	{r4, r5, r6, pc}
 800418e:	1cc4      	adds	r4, r0, #3
 8004190:	f024 0403 	bic.w	r4, r4, #3
 8004194:	42a0      	cmp	r0, r4
 8004196:	d0f8      	beq.n	800418a <sbrk_aligned+0x22>
 8004198:	1a21      	subs	r1, r4, r0
 800419a:	4628      	mov	r0, r5
 800419c:	f000 fafa 	bl	8004794 <_sbrk_r>
 80041a0:	3001      	adds	r0, #1
 80041a2:	d1f2      	bne.n	800418a <sbrk_aligned+0x22>
 80041a4:	e7ef      	b.n	8004186 <sbrk_aligned+0x1e>
 80041a6:	bf00      	nop
 80041a8:	20000360 	.word	0x20000360

080041ac <_malloc_r>:
 80041ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041b0:	1ccd      	adds	r5, r1, #3
 80041b2:	f025 0503 	bic.w	r5, r5, #3
 80041b6:	3508      	adds	r5, #8
 80041b8:	2d0c      	cmp	r5, #12
 80041ba:	bf38      	it	cc
 80041bc:	250c      	movcc	r5, #12
 80041be:	2d00      	cmp	r5, #0
 80041c0:	4606      	mov	r6, r0
 80041c2:	db01      	blt.n	80041c8 <_malloc_r+0x1c>
 80041c4:	42a9      	cmp	r1, r5
 80041c6:	d904      	bls.n	80041d2 <_malloc_r+0x26>
 80041c8:	230c      	movs	r3, #12
 80041ca:	6033      	str	r3, [r6, #0]
 80041cc:	2000      	movs	r0, #0
 80041ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042a8 <_malloc_r+0xfc>
 80041d6:	f000 f869 	bl	80042ac <__malloc_lock>
 80041da:	f8d8 3000 	ldr.w	r3, [r8]
 80041de:	461c      	mov	r4, r3
 80041e0:	bb44      	cbnz	r4, 8004234 <_malloc_r+0x88>
 80041e2:	4629      	mov	r1, r5
 80041e4:	4630      	mov	r0, r6
 80041e6:	f7ff ffbf 	bl	8004168 <sbrk_aligned>
 80041ea:	1c43      	adds	r3, r0, #1
 80041ec:	4604      	mov	r4, r0
 80041ee:	d158      	bne.n	80042a2 <_malloc_r+0xf6>
 80041f0:	f8d8 4000 	ldr.w	r4, [r8]
 80041f4:	4627      	mov	r7, r4
 80041f6:	2f00      	cmp	r7, #0
 80041f8:	d143      	bne.n	8004282 <_malloc_r+0xd6>
 80041fa:	2c00      	cmp	r4, #0
 80041fc:	d04b      	beq.n	8004296 <_malloc_r+0xea>
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	4639      	mov	r1, r7
 8004202:	4630      	mov	r0, r6
 8004204:	eb04 0903 	add.w	r9, r4, r3
 8004208:	f000 fac4 	bl	8004794 <_sbrk_r>
 800420c:	4581      	cmp	r9, r0
 800420e:	d142      	bne.n	8004296 <_malloc_r+0xea>
 8004210:	6821      	ldr	r1, [r4, #0]
 8004212:	1a6d      	subs	r5, r5, r1
 8004214:	4629      	mov	r1, r5
 8004216:	4630      	mov	r0, r6
 8004218:	f7ff ffa6 	bl	8004168 <sbrk_aligned>
 800421c:	3001      	adds	r0, #1
 800421e:	d03a      	beq.n	8004296 <_malloc_r+0xea>
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	442b      	add	r3, r5
 8004224:	6023      	str	r3, [r4, #0]
 8004226:	f8d8 3000 	ldr.w	r3, [r8]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	bb62      	cbnz	r2, 8004288 <_malloc_r+0xdc>
 800422e:	f8c8 7000 	str.w	r7, [r8]
 8004232:	e00f      	b.n	8004254 <_malloc_r+0xa8>
 8004234:	6822      	ldr	r2, [r4, #0]
 8004236:	1b52      	subs	r2, r2, r5
 8004238:	d420      	bmi.n	800427c <_malloc_r+0xd0>
 800423a:	2a0b      	cmp	r2, #11
 800423c:	d917      	bls.n	800426e <_malloc_r+0xc2>
 800423e:	1961      	adds	r1, r4, r5
 8004240:	42a3      	cmp	r3, r4
 8004242:	6025      	str	r5, [r4, #0]
 8004244:	bf18      	it	ne
 8004246:	6059      	strne	r1, [r3, #4]
 8004248:	6863      	ldr	r3, [r4, #4]
 800424a:	bf08      	it	eq
 800424c:	f8c8 1000 	streq.w	r1, [r8]
 8004250:	5162      	str	r2, [r4, r5]
 8004252:	604b      	str	r3, [r1, #4]
 8004254:	4630      	mov	r0, r6
 8004256:	f000 f82f 	bl	80042b8 <__malloc_unlock>
 800425a:	f104 000b 	add.w	r0, r4, #11
 800425e:	1d23      	adds	r3, r4, #4
 8004260:	f020 0007 	bic.w	r0, r0, #7
 8004264:	1ac2      	subs	r2, r0, r3
 8004266:	bf1c      	itt	ne
 8004268:	1a1b      	subne	r3, r3, r0
 800426a:	50a3      	strne	r3, [r4, r2]
 800426c:	e7af      	b.n	80041ce <_malloc_r+0x22>
 800426e:	6862      	ldr	r2, [r4, #4]
 8004270:	42a3      	cmp	r3, r4
 8004272:	bf0c      	ite	eq
 8004274:	f8c8 2000 	streq.w	r2, [r8]
 8004278:	605a      	strne	r2, [r3, #4]
 800427a:	e7eb      	b.n	8004254 <_malloc_r+0xa8>
 800427c:	4623      	mov	r3, r4
 800427e:	6864      	ldr	r4, [r4, #4]
 8004280:	e7ae      	b.n	80041e0 <_malloc_r+0x34>
 8004282:	463c      	mov	r4, r7
 8004284:	687f      	ldr	r7, [r7, #4]
 8004286:	e7b6      	b.n	80041f6 <_malloc_r+0x4a>
 8004288:	461a      	mov	r2, r3
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	42a3      	cmp	r3, r4
 800428e:	d1fb      	bne.n	8004288 <_malloc_r+0xdc>
 8004290:	2300      	movs	r3, #0
 8004292:	6053      	str	r3, [r2, #4]
 8004294:	e7de      	b.n	8004254 <_malloc_r+0xa8>
 8004296:	230c      	movs	r3, #12
 8004298:	6033      	str	r3, [r6, #0]
 800429a:	4630      	mov	r0, r6
 800429c:	f000 f80c 	bl	80042b8 <__malloc_unlock>
 80042a0:	e794      	b.n	80041cc <_malloc_r+0x20>
 80042a2:	6005      	str	r5, [r0, #0]
 80042a4:	e7d6      	b.n	8004254 <_malloc_r+0xa8>
 80042a6:	bf00      	nop
 80042a8:	20000364 	.word	0x20000364

080042ac <__malloc_lock>:
 80042ac:	4801      	ldr	r0, [pc, #4]	@ (80042b4 <__malloc_lock+0x8>)
 80042ae:	f000 babe 	b.w	800482e <__retarget_lock_acquire_recursive>
 80042b2:	bf00      	nop
 80042b4:	200004a8 	.word	0x200004a8

080042b8 <__malloc_unlock>:
 80042b8:	4801      	ldr	r0, [pc, #4]	@ (80042c0 <__malloc_unlock+0x8>)
 80042ba:	f000 bab9 	b.w	8004830 <__retarget_lock_release_recursive>
 80042be:	bf00      	nop
 80042c0:	200004a8 	.word	0x200004a8

080042c4 <std>:
 80042c4:	2300      	movs	r3, #0
 80042c6:	b510      	push	{r4, lr}
 80042c8:	4604      	mov	r4, r0
 80042ca:	e9c0 3300 	strd	r3, r3, [r0]
 80042ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042d2:	6083      	str	r3, [r0, #8]
 80042d4:	8181      	strh	r1, [r0, #12]
 80042d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80042d8:	81c2      	strh	r2, [r0, #14]
 80042da:	6183      	str	r3, [r0, #24]
 80042dc:	4619      	mov	r1, r3
 80042de:	2208      	movs	r2, #8
 80042e0:	305c      	adds	r0, #92	@ 0x5c
 80042e2:	f000 fa1b 	bl	800471c <memset>
 80042e6:	4b0d      	ldr	r3, [pc, #52]	@ (800431c <std+0x58>)
 80042e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80042ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004320 <std+0x5c>)
 80042ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004324 <std+0x60>)
 80042f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004328 <std+0x64>)
 80042f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80042f6:	4b0d      	ldr	r3, [pc, #52]	@ (800432c <std+0x68>)
 80042f8:	6224      	str	r4, [r4, #32]
 80042fa:	429c      	cmp	r4, r3
 80042fc:	d006      	beq.n	800430c <std+0x48>
 80042fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004302:	4294      	cmp	r4, r2
 8004304:	d002      	beq.n	800430c <std+0x48>
 8004306:	33d0      	adds	r3, #208	@ 0xd0
 8004308:	429c      	cmp	r4, r3
 800430a:	d105      	bne.n	8004318 <std+0x54>
 800430c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004314:	f000 ba8a 	b.w	800482c <__retarget_lock_init_recursive>
 8004318:	bd10      	pop	{r4, pc}
 800431a:	bf00      	nop
 800431c:	0800456d 	.word	0x0800456d
 8004320:	0800458f 	.word	0x0800458f
 8004324:	080045c7 	.word	0x080045c7
 8004328:	080045eb 	.word	0x080045eb
 800432c:	20000368 	.word	0x20000368

08004330 <stdio_exit_handler>:
 8004330:	4a02      	ldr	r2, [pc, #8]	@ (800433c <stdio_exit_handler+0xc>)
 8004332:	4903      	ldr	r1, [pc, #12]	@ (8004340 <stdio_exit_handler+0x10>)
 8004334:	4803      	ldr	r0, [pc, #12]	@ (8004344 <stdio_exit_handler+0x14>)
 8004336:	f000 b869 	b.w	800440c <_fwalk_sglue>
 800433a:	bf00      	nop
 800433c:	20000038 	.word	0x20000038
 8004340:	08005239 	.word	0x08005239
 8004344:	20000048 	.word	0x20000048

08004348 <cleanup_stdio>:
 8004348:	6841      	ldr	r1, [r0, #4]
 800434a:	4b0c      	ldr	r3, [pc, #48]	@ (800437c <cleanup_stdio+0x34>)
 800434c:	4299      	cmp	r1, r3
 800434e:	b510      	push	{r4, lr}
 8004350:	4604      	mov	r4, r0
 8004352:	d001      	beq.n	8004358 <cleanup_stdio+0x10>
 8004354:	f000 ff70 	bl	8005238 <_fflush_r>
 8004358:	68a1      	ldr	r1, [r4, #8]
 800435a:	4b09      	ldr	r3, [pc, #36]	@ (8004380 <cleanup_stdio+0x38>)
 800435c:	4299      	cmp	r1, r3
 800435e:	d002      	beq.n	8004366 <cleanup_stdio+0x1e>
 8004360:	4620      	mov	r0, r4
 8004362:	f000 ff69 	bl	8005238 <_fflush_r>
 8004366:	68e1      	ldr	r1, [r4, #12]
 8004368:	4b06      	ldr	r3, [pc, #24]	@ (8004384 <cleanup_stdio+0x3c>)
 800436a:	4299      	cmp	r1, r3
 800436c:	d004      	beq.n	8004378 <cleanup_stdio+0x30>
 800436e:	4620      	mov	r0, r4
 8004370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004374:	f000 bf60 	b.w	8005238 <_fflush_r>
 8004378:	bd10      	pop	{r4, pc}
 800437a:	bf00      	nop
 800437c:	20000368 	.word	0x20000368
 8004380:	200003d0 	.word	0x200003d0
 8004384:	20000438 	.word	0x20000438

08004388 <global_stdio_init.part.0>:
 8004388:	b510      	push	{r4, lr}
 800438a:	4b0b      	ldr	r3, [pc, #44]	@ (80043b8 <global_stdio_init.part.0+0x30>)
 800438c:	4c0b      	ldr	r4, [pc, #44]	@ (80043bc <global_stdio_init.part.0+0x34>)
 800438e:	4a0c      	ldr	r2, [pc, #48]	@ (80043c0 <global_stdio_init.part.0+0x38>)
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	4620      	mov	r0, r4
 8004394:	2200      	movs	r2, #0
 8004396:	2104      	movs	r1, #4
 8004398:	f7ff ff94 	bl	80042c4 <std>
 800439c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80043a0:	2201      	movs	r2, #1
 80043a2:	2109      	movs	r1, #9
 80043a4:	f7ff ff8e 	bl	80042c4 <std>
 80043a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80043ac:	2202      	movs	r2, #2
 80043ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043b2:	2112      	movs	r1, #18
 80043b4:	f7ff bf86 	b.w	80042c4 <std>
 80043b8:	200004a0 	.word	0x200004a0
 80043bc:	20000368 	.word	0x20000368
 80043c0:	08004331 	.word	0x08004331

080043c4 <__sfp_lock_acquire>:
 80043c4:	4801      	ldr	r0, [pc, #4]	@ (80043cc <__sfp_lock_acquire+0x8>)
 80043c6:	f000 ba32 	b.w	800482e <__retarget_lock_acquire_recursive>
 80043ca:	bf00      	nop
 80043cc:	200004a9 	.word	0x200004a9

080043d0 <__sfp_lock_release>:
 80043d0:	4801      	ldr	r0, [pc, #4]	@ (80043d8 <__sfp_lock_release+0x8>)
 80043d2:	f000 ba2d 	b.w	8004830 <__retarget_lock_release_recursive>
 80043d6:	bf00      	nop
 80043d8:	200004a9 	.word	0x200004a9

080043dc <__sinit>:
 80043dc:	b510      	push	{r4, lr}
 80043de:	4604      	mov	r4, r0
 80043e0:	f7ff fff0 	bl	80043c4 <__sfp_lock_acquire>
 80043e4:	6a23      	ldr	r3, [r4, #32]
 80043e6:	b11b      	cbz	r3, 80043f0 <__sinit+0x14>
 80043e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043ec:	f7ff bff0 	b.w	80043d0 <__sfp_lock_release>
 80043f0:	4b04      	ldr	r3, [pc, #16]	@ (8004404 <__sinit+0x28>)
 80043f2:	6223      	str	r3, [r4, #32]
 80043f4:	4b04      	ldr	r3, [pc, #16]	@ (8004408 <__sinit+0x2c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f5      	bne.n	80043e8 <__sinit+0xc>
 80043fc:	f7ff ffc4 	bl	8004388 <global_stdio_init.part.0>
 8004400:	e7f2      	b.n	80043e8 <__sinit+0xc>
 8004402:	bf00      	nop
 8004404:	08004349 	.word	0x08004349
 8004408:	200004a0 	.word	0x200004a0

0800440c <_fwalk_sglue>:
 800440c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004410:	4607      	mov	r7, r0
 8004412:	4688      	mov	r8, r1
 8004414:	4614      	mov	r4, r2
 8004416:	2600      	movs	r6, #0
 8004418:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800441c:	f1b9 0901 	subs.w	r9, r9, #1
 8004420:	d505      	bpl.n	800442e <_fwalk_sglue+0x22>
 8004422:	6824      	ldr	r4, [r4, #0]
 8004424:	2c00      	cmp	r4, #0
 8004426:	d1f7      	bne.n	8004418 <_fwalk_sglue+0xc>
 8004428:	4630      	mov	r0, r6
 800442a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800442e:	89ab      	ldrh	r3, [r5, #12]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d907      	bls.n	8004444 <_fwalk_sglue+0x38>
 8004434:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004438:	3301      	adds	r3, #1
 800443a:	d003      	beq.n	8004444 <_fwalk_sglue+0x38>
 800443c:	4629      	mov	r1, r5
 800443e:	4638      	mov	r0, r7
 8004440:	47c0      	blx	r8
 8004442:	4306      	orrs	r6, r0
 8004444:	3568      	adds	r5, #104	@ 0x68
 8004446:	e7e9      	b.n	800441c <_fwalk_sglue+0x10>

08004448 <iprintf>:
 8004448:	b40f      	push	{r0, r1, r2, r3}
 800444a:	b507      	push	{r0, r1, r2, lr}
 800444c:	4906      	ldr	r1, [pc, #24]	@ (8004468 <iprintf+0x20>)
 800444e:	ab04      	add	r3, sp, #16
 8004450:	6808      	ldr	r0, [r1, #0]
 8004452:	f853 2b04 	ldr.w	r2, [r3], #4
 8004456:	6881      	ldr	r1, [r0, #8]
 8004458:	9301      	str	r3, [sp, #4]
 800445a:	f000 fbc5 	bl	8004be8 <_vfiprintf_r>
 800445e:	b003      	add	sp, #12
 8004460:	f85d eb04 	ldr.w	lr, [sp], #4
 8004464:	b004      	add	sp, #16
 8004466:	4770      	bx	lr
 8004468:	20000044 	.word	0x20000044

0800446c <_puts_r>:
 800446c:	6a03      	ldr	r3, [r0, #32]
 800446e:	b570      	push	{r4, r5, r6, lr}
 8004470:	6884      	ldr	r4, [r0, #8]
 8004472:	4605      	mov	r5, r0
 8004474:	460e      	mov	r6, r1
 8004476:	b90b      	cbnz	r3, 800447c <_puts_r+0x10>
 8004478:	f7ff ffb0 	bl	80043dc <__sinit>
 800447c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800447e:	07db      	lsls	r3, r3, #31
 8004480:	d405      	bmi.n	800448e <_puts_r+0x22>
 8004482:	89a3      	ldrh	r3, [r4, #12]
 8004484:	0598      	lsls	r0, r3, #22
 8004486:	d402      	bmi.n	800448e <_puts_r+0x22>
 8004488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800448a:	f000 f9d0 	bl	800482e <__retarget_lock_acquire_recursive>
 800448e:	89a3      	ldrh	r3, [r4, #12]
 8004490:	0719      	lsls	r1, r3, #28
 8004492:	d502      	bpl.n	800449a <_puts_r+0x2e>
 8004494:	6923      	ldr	r3, [r4, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d135      	bne.n	8004506 <_puts_r+0x9a>
 800449a:	4621      	mov	r1, r4
 800449c:	4628      	mov	r0, r5
 800449e:	f000 f8e7 	bl	8004670 <__swsetup_r>
 80044a2:	b380      	cbz	r0, 8004506 <_puts_r+0x9a>
 80044a4:	f04f 35ff 	mov.w	r5, #4294967295
 80044a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044aa:	07da      	lsls	r2, r3, #31
 80044ac:	d405      	bmi.n	80044ba <_puts_r+0x4e>
 80044ae:	89a3      	ldrh	r3, [r4, #12]
 80044b0:	059b      	lsls	r3, r3, #22
 80044b2:	d402      	bmi.n	80044ba <_puts_r+0x4e>
 80044b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044b6:	f000 f9bb 	bl	8004830 <__retarget_lock_release_recursive>
 80044ba:	4628      	mov	r0, r5
 80044bc:	bd70      	pop	{r4, r5, r6, pc}
 80044be:	2b00      	cmp	r3, #0
 80044c0:	da04      	bge.n	80044cc <_puts_r+0x60>
 80044c2:	69a2      	ldr	r2, [r4, #24]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	dc17      	bgt.n	80044f8 <_puts_r+0x8c>
 80044c8:	290a      	cmp	r1, #10
 80044ca:	d015      	beq.n	80044f8 <_puts_r+0x8c>
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	6022      	str	r2, [r4, #0]
 80044d2:	7019      	strb	r1, [r3, #0]
 80044d4:	68a3      	ldr	r3, [r4, #8]
 80044d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044da:	3b01      	subs	r3, #1
 80044dc:	60a3      	str	r3, [r4, #8]
 80044de:	2900      	cmp	r1, #0
 80044e0:	d1ed      	bne.n	80044be <_puts_r+0x52>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	da11      	bge.n	800450a <_puts_r+0x9e>
 80044e6:	4622      	mov	r2, r4
 80044e8:	210a      	movs	r1, #10
 80044ea:	4628      	mov	r0, r5
 80044ec:	f000 f881 	bl	80045f2 <__swbuf_r>
 80044f0:	3001      	adds	r0, #1
 80044f2:	d0d7      	beq.n	80044a4 <_puts_r+0x38>
 80044f4:	250a      	movs	r5, #10
 80044f6:	e7d7      	b.n	80044a8 <_puts_r+0x3c>
 80044f8:	4622      	mov	r2, r4
 80044fa:	4628      	mov	r0, r5
 80044fc:	f000 f879 	bl	80045f2 <__swbuf_r>
 8004500:	3001      	adds	r0, #1
 8004502:	d1e7      	bne.n	80044d4 <_puts_r+0x68>
 8004504:	e7ce      	b.n	80044a4 <_puts_r+0x38>
 8004506:	3e01      	subs	r6, #1
 8004508:	e7e4      	b.n	80044d4 <_puts_r+0x68>
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	6022      	str	r2, [r4, #0]
 8004510:	220a      	movs	r2, #10
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	e7ee      	b.n	80044f4 <_puts_r+0x88>
	...

08004518 <puts>:
 8004518:	4b02      	ldr	r3, [pc, #8]	@ (8004524 <puts+0xc>)
 800451a:	4601      	mov	r1, r0
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	f7ff bfa5 	b.w	800446c <_puts_r>
 8004522:	bf00      	nop
 8004524:	20000044 	.word	0x20000044

08004528 <siprintf>:
 8004528:	b40e      	push	{r1, r2, r3}
 800452a:	b510      	push	{r4, lr}
 800452c:	b09d      	sub	sp, #116	@ 0x74
 800452e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004530:	9002      	str	r0, [sp, #8]
 8004532:	9006      	str	r0, [sp, #24]
 8004534:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004538:	480a      	ldr	r0, [pc, #40]	@ (8004564 <siprintf+0x3c>)
 800453a:	9107      	str	r1, [sp, #28]
 800453c:	9104      	str	r1, [sp, #16]
 800453e:	490a      	ldr	r1, [pc, #40]	@ (8004568 <siprintf+0x40>)
 8004540:	f853 2b04 	ldr.w	r2, [r3], #4
 8004544:	9105      	str	r1, [sp, #20]
 8004546:	2400      	movs	r4, #0
 8004548:	a902      	add	r1, sp, #8
 800454a:	6800      	ldr	r0, [r0, #0]
 800454c:	9301      	str	r3, [sp, #4]
 800454e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004550:	f000 fa24 	bl	800499c <_svfiprintf_r>
 8004554:	9b02      	ldr	r3, [sp, #8]
 8004556:	701c      	strb	r4, [r3, #0]
 8004558:	b01d      	add	sp, #116	@ 0x74
 800455a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800455e:	b003      	add	sp, #12
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	20000044 	.word	0x20000044
 8004568:	ffff0208 	.word	0xffff0208

0800456c <__sread>:
 800456c:	b510      	push	{r4, lr}
 800456e:	460c      	mov	r4, r1
 8004570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004574:	f000 f8fc 	bl	8004770 <_read_r>
 8004578:	2800      	cmp	r0, #0
 800457a:	bfab      	itete	ge
 800457c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800457e:	89a3      	ldrhlt	r3, [r4, #12]
 8004580:	181b      	addge	r3, r3, r0
 8004582:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004586:	bfac      	ite	ge
 8004588:	6563      	strge	r3, [r4, #84]	@ 0x54
 800458a:	81a3      	strhlt	r3, [r4, #12]
 800458c:	bd10      	pop	{r4, pc}

0800458e <__swrite>:
 800458e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004592:	461f      	mov	r7, r3
 8004594:	898b      	ldrh	r3, [r1, #12]
 8004596:	05db      	lsls	r3, r3, #23
 8004598:	4605      	mov	r5, r0
 800459a:	460c      	mov	r4, r1
 800459c:	4616      	mov	r6, r2
 800459e:	d505      	bpl.n	80045ac <__swrite+0x1e>
 80045a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045a4:	2302      	movs	r3, #2
 80045a6:	2200      	movs	r2, #0
 80045a8:	f000 f8d0 	bl	800474c <_lseek_r>
 80045ac:	89a3      	ldrh	r3, [r4, #12]
 80045ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045b6:	81a3      	strh	r3, [r4, #12]
 80045b8:	4632      	mov	r2, r6
 80045ba:	463b      	mov	r3, r7
 80045bc:	4628      	mov	r0, r5
 80045be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045c2:	f000 b8f7 	b.w	80047b4 <_write_r>

080045c6 <__sseek>:
 80045c6:	b510      	push	{r4, lr}
 80045c8:	460c      	mov	r4, r1
 80045ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ce:	f000 f8bd 	bl	800474c <_lseek_r>
 80045d2:	1c43      	adds	r3, r0, #1
 80045d4:	89a3      	ldrh	r3, [r4, #12]
 80045d6:	bf15      	itete	ne
 80045d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80045da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045e2:	81a3      	strheq	r3, [r4, #12]
 80045e4:	bf18      	it	ne
 80045e6:	81a3      	strhne	r3, [r4, #12]
 80045e8:	bd10      	pop	{r4, pc}

080045ea <__sclose>:
 80045ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ee:	f000 b89d 	b.w	800472c <_close_r>

080045f2 <__swbuf_r>:
 80045f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f4:	460e      	mov	r6, r1
 80045f6:	4614      	mov	r4, r2
 80045f8:	4605      	mov	r5, r0
 80045fa:	b118      	cbz	r0, 8004604 <__swbuf_r+0x12>
 80045fc:	6a03      	ldr	r3, [r0, #32]
 80045fe:	b90b      	cbnz	r3, 8004604 <__swbuf_r+0x12>
 8004600:	f7ff feec 	bl	80043dc <__sinit>
 8004604:	69a3      	ldr	r3, [r4, #24]
 8004606:	60a3      	str	r3, [r4, #8]
 8004608:	89a3      	ldrh	r3, [r4, #12]
 800460a:	071a      	lsls	r2, r3, #28
 800460c:	d501      	bpl.n	8004612 <__swbuf_r+0x20>
 800460e:	6923      	ldr	r3, [r4, #16]
 8004610:	b943      	cbnz	r3, 8004624 <__swbuf_r+0x32>
 8004612:	4621      	mov	r1, r4
 8004614:	4628      	mov	r0, r5
 8004616:	f000 f82b 	bl	8004670 <__swsetup_r>
 800461a:	b118      	cbz	r0, 8004624 <__swbuf_r+0x32>
 800461c:	f04f 37ff 	mov.w	r7, #4294967295
 8004620:	4638      	mov	r0, r7
 8004622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	6922      	ldr	r2, [r4, #16]
 8004628:	1a98      	subs	r0, r3, r2
 800462a:	6963      	ldr	r3, [r4, #20]
 800462c:	b2f6      	uxtb	r6, r6
 800462e:	4283      	cmp	r3, r0
 8004630:	4637      	mov	r7, r6
 8004632:	dc05      	bgt.n	8004640 <__swbuf_r+0x4e>
 8004634:	4621      	mov	r1, r4
 8004636:	4628      	mov	r0, r5
 8004638:	f000 fdfe 	bl	8005238 <_fflush_r>
 800463c:	2800      	cmp	r0, #0
 800463e:	d1ed      	bne.n	800461c <__swbuf_r+0x2a>
 8004640:	68a3      	ldr	r3, [r4, #8]
 8004642:	3b01      	subs	r3, #1
 8004644:	60a3      	str	r3, [r4, #8]
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	6022      	str	r2, [r4, #0]
 800464c:	701e      	strb	r6, [r3, #0]
 800464e:	6962      	ldr	r2, [r4, #20]
 8004650:	1c43      	adds	r3, r0, #1
 8004652:	429a      	cmp	r2, r3
 8004654:	d004      	beq.n	8004660 <__swbuf_r+0x6e>
 8004656:	89a3      	ldrh	r3, [r4, #12]
 8004658:	07db      	lsls	r3, r3, #31
 800465a:	d5e1      	bpl.n	8004620 <__swbuf_r+0x2e>
 800465c:	2e0a      	cmp	r6, #10
 800465e:	d1df      	bne.n	8004620 <__swbuf_r+0x2e>
 8004660:	4621      	mov	r1, r4
 8004662:	4628      	mov	r0, r5
 8004664:	f000 fde8 	bl	8005238 <_fflush_r>
 8004668:	2800      	cmp	r0, #0
 800466a:	d0d9      	beq.n	8004620 <__swbuf_r+0x2e>
 800466c:	e7d6      	b.n	800461c <__swbuf_r+0x2a>
	...

08004670 <__swsetup_r>:
 8004670:	b538      	push	{r3, r4, r5, lr}
 8004672:	4b29      	ldr	r3, [pc, #164]	@ (8004718 <__swsetup_r+0xa8>)
 8004674:	4605      	mov	r5, r0
 8004676:	6818      	ldr	r0, [r3, #0]
 8004678:	460c      	mov	r4, r1
 800467a:	b118      	cbz	r0, 8004684 <__swsetup_r+0x14>
 800467c:	6a03      	ldr	r3, [r0, #32]
 800467e:	b90b      	cbnz	r3, 8004684 <__swsetup_r+0x14>
 8004680:	f7ff feac 	bl	80043dc <__sinit>
 8004684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004688:	0719      	lsls	r1, r3, #28
 800468a:	d422      	bmi.n	80046d2 <__swsetup_r+0x62>
 800468c:	06da      	lsls	r2, r3, #27
 800468e:	d407      	bmi.n	80046a0 <__swsetup_r+0x30>
 8004690:	2209      	movs	r2, #9
 8004692:	602a      	str	r2, [r5, #0]
 8004694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004698:	81a3      	strh	r3, [r4, #12]
 800469a:	f04f 30ff 	mov.w	r0, #4294967295
 800469e:	e033      	b.n	8004708 <__swsetup_r+0x98>
 80046a0:	0758      	lsls	r0, r3, #29
 80046a2:	d512      	bpl.n	80046ca <__swsetup_r+0x5a>
 80046a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80046a6:	b141      	cbz	r1, 80046ba <__swsetup_r+0x4a>
 80046a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80046ac:	4299      	cmp	r1, r3
 80046ae:	d002      	beq.n	80046b6 <__swsetup_r+0x46>
 80046b0:	4628      	mov	r0, r5
 80046b2:	f000 f8cd 	bl	8004850 <_free_r>
 80046b6:	2300      	movs	r3, #0
 80046b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80046ba:	89a3      	ldrh	r3, [r4, #12]
 80046bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80046c0:	81a3      	strh	r3, [r4, #12]
 80046c2:	2300      	movs	r3, #0
 80046c4:	6063      	str	r3, [r4, #4]
 80046c6:	6923      	ldr	r3, [r4, #16]
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	89a3      	ldrh	r3, [r4, #12]
 80046cc:	f043 0308 	orr.w	r3, r3, #8
 80046d0:	81a3      	strh	r3, [r4, #12]
 80046d2:	6923      	ldr	r3, [r4, #16]
 80046d4:	b94b      	cbnz	r3, 80046ea <__swsetup_r+0x7a>
 80046d6:	89a3      	ldrh	r3, [r4, #12]
 80046d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80046dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e0:	d003      	beq.n	80046ea <__swsetup_r+0x7a>
 80046e2:	4621      	mov	r1, r4
 80046e4:	4628      	mov	r0, r5
 80046e6:	f000 fdf5 	bl	80052d4 <__smakebuf_r>
 80046ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046ee:	f013 0201 	ands.w	r2, r3, #1
 80046f2:	d00a      	beq.n	800470a <__swsetup_r+0x9a>
 80046f4:	2200      	movs	r2, #0
 80046f6:	60a2      	str	r2, [r4, #8]
 80046f8:	6962      	ldr	r2, [r4, #20]
 80046fa:	4252      	negs	r2, r2
 80046fc:	61a2      	str	r2, [r4, #24]
 80046fe:	6922      	ldr	r2, [r4, #16]
 8004700:	b942      	cbnz	r2, 8004714 <__swsetup_r+0xa4>
 8004702:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004706:	d1c5      	bne.n	8004694 <__swsetup_r+0x24>
 8004708:	bd38      	pop	{r3, r4, r5, pc}
 800470a:	0799      	lsls	r1, r3, #30
 800470c:	bf58      	it	pl
 800470e:	6962      	ldrpl	r2, [r4, #20]
 8004710:	60a2      	str	r2, [r4, #8]
 8004712:	e7f4      	b.n	80046fe <__swsetup_r+0x8e>
 8004714:	2000      	movs	r0, #0
 8004716:	e7f7      	b.n	8004708 <__swsetup_r+0x98>
 8004718:	20000044 	.word	0x20000044

0800471c <memset>:
 800471c:	4402      	add	r2, r0
 800471e:	4603      	mov	r3, r0
 8004720:	4293      	cmp	r3, r2
 8004722:	d100      	bne.n	8004726 <memset+0xa>
 8004724:	4770      	bx	lr
 8004726:	f803 1b01 	strb.w	r1, [r3], #1
 800472a:	e7f9      	b.n	8004720 <memset+0x4>

0800472c <_close_r>:
 800472c:	b538      	push	{r3, r4, r5, lr}
 800472e:	4d06      	ldr	r5, [pc, #24]	@ (8004748 <_close_r+0x1c>)
 8004730:	2300      	movs	r3, #0
 8004732:	4604      	mov	r4, r0
 8004734:	4608      	mov	r0, r1
 8004736:	602b      	str	r3, [r5, #0]
 8004738:	f7fd f8a4 	bl	8001884 <_close>
 800473c:	1c43      	adds	r3, r0, #1
 800473e:	d102      	bne.n	8004746 <_close_r+0x1a>
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	b103      	cbz	r3, 8004746 <_close_r+0x1a>
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	bd38      	pop	{r3, r4, r5, pc}
 8004748:	200004a4 	.word	0x200004a4

0800474c <_lseek_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4d07      	ldr	r5, [pc, #28]	@ (800476c <_lseek_r+0x20>)
 8004750:	4604      	mov	r4, r0
 8004752:	4608      	mov	r0, r1
 8004754:	4611      	mov	r1, r2
 8004756:	2200      	movs	r2, #0
 8004758:	602a      	str	r2, [r5, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	f7fd f8b9 	bl	80018d2 <_lseek>
 8004760:	1c43      	adds	r3, r0, #1
 8004762:	d102      	bne.n	800476a <_lseek_r+0x1e>
 8004764:	682b      	ldr	r3, [r5, #0]
 8004766:	b103      	cbz	r3, 800476a <_lseek_r+0x1e>
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	bd38      	pop	{r3, r4, r5, pc}
 800476c:	200004a4 	.word	0x200004a4

08004770 <_read_r>:
 8004770:	b538      	push	{r3, r4, r5, lr}
 8004772:	4d07      	ldr	r5, [pc, #28]	@ (8004790 <_read_r+0x20>)
 8004774:	4604      	mov	r4, r0
 8004776:	4608      	mov	r0, r1
 8004778:	4611      	mov	r1, r2
 800477a:	2200      	movs	r2, #0
 800477c:	602a      	str	r2, [r5, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	f7fd f863 	bl	800184a <_read>
 8004784:	1c43      	adds	r3, r0, #1
 8004786:	d102      	bne.n	800478e <_read_r+0x1e>
 8004788:	682b      	ldr	r3, [r5, #0]
 800478a:	b103      	cbz	r3, 800478e <_read_r+0x1e>
 800478c:	6023      	str	r3, [r4, #0]
 800478e:	bd38      	pop	{r3, r4, r5, pc}
 8004790:	200004a4 	.word	0x200004a4

08004794 <_sbrk_r>:
 8004794:	b538      	push	{r3, r4, r5, lr}
 8004796:	4d06      	ldr	r5, [pc, #24]	@ (80047b0 <_sbrk_r+0x1c>)
 8004798:	2300      	movs	r3, #0
 800479a:	4604      	mov	r4, r0
 800479c:	4608      	mov	r0, r1
 800479e:	602b      	str	r3, [r5, #0]
 80047a0:	f7fd f8a4 	bl	80018ec <_sbrk>
 80047a4:	1c43      	adds	r3, r0, #1
 80047a6:	d102      	bne.n	80047ae <_sbrk_r+0x1a>
 80047a8:	682b      	ldr	r3, [r5, #0]
 80047aa:	b103      	cbz	r3, 80047ae <_sbrk_r+0x1a>
 80047ac:	6023      	str	r3, [r4, #0]
 80047ae:	bd38      	pop	{r3, r4, r5, pc}
 80047b0:	200004a4 	.word	0x200004a4

080047b4 <_write_r>:
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	4d07      	ldr	r5, [pc, #28]	@ (80047d4 <_write_r+0x20>)
 80047b8:	4604      	mov	r4, r0
 80047ba:	4608      	mov	r0, r1
 80047bc:	4611      	mov	r1, r2
 80047be:	2200      	movs	r2, #0
 80047c0:	602a      	str	r2, [r5, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	f7fc ff5e 	bl	8001684 <_write>
 80047c8:	1c43      	adds	r3, r0, #1
 80047ca:	d102      	bne.n	80047d2 <_write_r+0x1e>
 80047cc:	682b      	ldr	r3, [r5, #0]
 80047ce:	b103      	cbz	r3, 80047d2 <_write_r+0x1e>
 80047d0:	6023      	str	r3, [r4, #0]
 80047d2:	bd38      	pop	{r3, r4, r5, pc}
 80047d4:	200004a4 	.word	0x200004a4

080047d8 <__errno>:
 80047d8:	4b01      	ldr	r3, [pc, #4]	@ (80047e0 <__errno+0x8>)
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	20000044 	.word	0x20000044

080047e4 <__libc_init_array>:
 80047e4:	b570      	push	{r4, r5, r6, lr}
 80047e6:	4d0d      	ldr	r5, [pc, #52]	@ (800481c <__libc_init_array+0x38>)
 80047e8:	4c0d      	ldr	r4, [pc, #52]	@ (8004820 <__libc_init_array+0x3c>)
 80047ea:	1b64      	subs	r4, r4, r5
 80047ec:	10a4      	asrs	r4, r4, #2
 80047ee:	2600      	movs	r6, #0
 80047f0:	42a6      	cmp	r6, r4
 80047f2:	d109      	bne.n	8004808 <__libc_init_array+0x24>
 80047f4:	4d0b      	ldr	r5, [pc, #44]	@ (8004824 <__libc_init_array+0x40>)
 80047f6:	4c0c      	ldr	r4, [pc, #48]	@ (8004828 <__libc_init_array+0x44>)
 80047f8:	f000 fe1a 	bl	8005430 <_init>
 80047fc:	1b64      	subs	r4, r4, r5
 80047fe:	10a4      	asrs	r4, r4, #2
 8004800:	2600      	movs	r6, #0
 8004802:	42a6      	cmp	r6, r4
 8004804:	d105      	bne.n	8004812 <__libc_init_array+0x2e>
 8004806:	bd70      	pop	{r4, r5, r6, pc}
 8004808:	f855 3b04 	ldr.w	r3, [r5], #4
 800480c:	4798      	blx	r3
 800480e:	3601      	adds	r6, #1
 8004810:	e7ee      	b.n	80047f0 <__libc_init_array+0xc>
 8004812:	f855 3b04 	ldr.w	r3, [r5], #4
 8004816:	4798      	blx	r3
 8004818:	3601      	adds	r6, #1
 800481a:	e7f2      	b.n	8004802 <__libc_init_array+0x1e>
 800481c:	08005d94 	.word	0x08005d94
 8004820:	08005d94 	.word	0x08005d94
 8004824:	08005d94 	.word	0x08005d94
 8004828:	08005d98 	.word	0x08005d98

0800482c <__retarget_lock_init_recursive>:
 800482c:	4770      	bx	lr

0800482e <__retarget_lock_acquire_recursive>:
 800482e:	4770      	bx	lr

08004830 <__retarget_lock_release_recursive>:
 8004830:	4770      	bx	lr

08004832 <memcpy>:
 8004832:	440a      	add	r2, r1
 8004834:	4291      	cmp	r1, r2
 8004836:	f100 33ff 	add.w	r3, r0, #4294967295
 800483a:	d100      	bne.n	800483e <memcpy+0xc>
 800483c:	4770      	bx	lr
 800483e:	b510      	push	{r4, lr}
 8004840:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004844:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004848:	4291      	cmp	r1, r2
 800484a:	d1f9      	bne.n	8004840 <memcpy+0xe>
 800484c:	bd10      	pop	{r4, pc}
	...

08004850 <_free_r>:
 8004850:	b538      	push	{r3, r4, r5, lr}
 8004852:	4605      	mov	r5, r0
 8004854:	2900      	cmp	r1, #0
 8004856:	d041      	beq.n	80048dc <_free_r+0x8c>
 8004858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800485c:	1f0c      	subs	r4, r1, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	bfb8      	it	lt
 8004862:	18e4      	addlt	r4, r4, r3
 8004864:	f7ff fd22 	bl	80042ac <__malloc_lock>
 8004868:	4a1d      	ldr	r2, [pc, #116]	@ (80048e0 <_free_r+0x90>)
 800486a:	6813      	ldr	r3, [r2, #0]
 800486c:	b933      	cbnz	r3, 800487c <_free_r+0x2c>
 800486e:	6063      	str	r3, [r4, #4]
 8004870:	6014      	str	r4, [r2, #0]
 8004872:	4628      	mov	r0, r5
 8004874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004878:	f7ff bd1e 	b.w	80042b8 <__malloc_unlock>
 800487c:	42a3      	cmp	r3, r4
 800487e:	d908      	bls.n	8004892 <_free_r+0x42>
 8004880:	6820      	ldr	r0, [r4, #0]
 8004882:	1821      	adds	r1, r4, r0
 8004884:	428b      	cmp	r3, r1
 8004886:	bf01      	itttt	eq
 8004888:	6819      	ldreq	r1, [r3, #0]
 800488a:	685b      	ldreq	r3, [r3, #4]
 800488c:	1809      	addeq	r1, r1, r0
 800488e:	6021      	streq	r1, [r4, #0]
 8004890:	e7ed      	b.n	800486e <_free_r+0x1e>
 8004892:	461a      	mov	r2, r3
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	b10b      	cbz	r3, 800489c <_free_r+0x4c>
 8004898:	42a3      	cmp	r3, r4
 800489a:	d9fa      	bls.n	8004892 <_free_r+0x42>
 800489c:	6811      	ldr	r1, [r2, #0]
 800489e:	1850      	adds	r0, r2, r1
 80048a0:	42a0      	cmp	r0, r4
 80048a2:	d10b      	bne.n	80048bc <_free_r+0x6c>
 80048a4:	6820      	ldr	r0, [r4, #0]
 80048a6:	4401      	add	r1, r0
 80048a8:	1850      	adds	r0, r2, r1
 80048aa:	4283      	cmp	r3, r0
 80048ac:	6011      	str	r1, [r2, #0]
 80048ae:	d1e0      	bne.n	8004872 <_free_r+0x22>
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	6053      	str	r3, [r2, #4]
 80048b6:	4408      	add	r0, r1
 80048b8:	6010      	str	r0, [r2, #0]
 80048ba:	e7da      	b.n	8004872 <_free_r+0x22>
 80048bc:	d902      	bls.n	80048c4 <_free_r+0x74>
 80048be:	230c      	movs	r3, #12
 80048c0:	602b      	str	r3, [r5, #0]
 80048c2:	e7d6      	b.n	8004872 <_free_r+0x22>
 80048c4:	6820      	ldr	r0, [r4, #0]
 80048c6:	1821      	adds	r1, r4, r0
 80048c8:	428b      	cmp	r3, r1
 80048ca:	bf04      	itt	eq
 80048cc:	6819      	ldreq	r1, [r3, #0]
 80048ce:	685b      	ldreq	r3, [r3, #4]
 80048d0:	6063      	str	r3, [r4, #4]
 80048d2:	bf04      	itt	eq
 80048d4:	1809      	addeq	r1, r1, r0
 80048d6:	6021      	streq	r1, [r4, #0]
 80048d8:	6054      	str	r4, [r2, #4]
 80048da:	e7ca      	b.n	8004872 <_free_r+0x22>
 80048dc:	bd38      	pop	{r3, r4, r5, pc}
 80048de:	bf00      	nop
 80048e0:	20000364 	.word	0x20000364

080048e4 <__ssputs_r>:
 80048e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e8:	688e      	ldr	r6, [r1, #8]
 80048ea:	461f      	mov	r7, r3
 80048ec:	42be      	cmp	r6, r7
 80048ee:	680b      	ldr	r3, [r1, #0]
 80048f0:	4682      	mov	sl, r0
 80048f2:	460c      	mov	r4, r1
 80048f4:	4690      	mov	r8, r2
 80048f6:	d82d      	bhi.n	8004954 <__ssputs_r+0x70>
 80048f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004900:	d026      	beq.n	8004950 <__ssputs_r+0x6c>
 8004902:	6965      	ldr	r5, [r4, #20]
 8004904:	6909      	ldr	r1, [r1, #16]
 8004906:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800490a:	eba3 0901 	sub.w	r9, r3, r1
 800490e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004912:	1c7b      	adds	r3, r7, #1
 8004914:	444b      	add	r3, r9
 8004916:	106d      	asrs	r5, r5, #1
 8004918:	429d      	cmp	r5, r3
 800491a:	bf38      	it	cc
 800491c:	461d      	movcc	r5, r3
 800491e:	0553      	lsls	r3, r2, #21
 8004920:	d527      	bpl.n	8004972 <__ssputs_r+0x8e>
 8004922:	4629      	mov	r1, r5
 8004924:	f7ff fc42 	bl	80041ac <_malloc_r>
 8004928:	4606      	mov	r6, r0
 800492a:	b360      	cbz	r0, 8004986 <__ssputs_r+0xa2>
 800492c:	6921      	ldr	r1, [r4, #16]
 800492e:	464a      	mov	r2, r9
 8004930:	f7ff ff7f 	bl	8004832 <memcpy>
 8004934:	89a3      	ldrh	r3, [r4, #12]
 8004936:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800493a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800493e:	81a3      	strh	r3, [r4, #12]
 8004940:	6126      	str	r6, [r4, #16]
 8004942:	6165      	str	r5, [r4, #20]
 8004944:	444e      	add	r6, r9
 8004946:	eba5 0509 	sub.w	r5, r5, r9
 800494a:	6026      	str	r6, [r4, #0]
 800494c:	60a5      	str	r5, [r4, #8]
 800494e:	463e      	mov	r6, r7
 8004950:	42be      	cmp	r6, r7
 8004952:	d900      	bls.n	8004956 <__ssputs_r+0x72>
 8004954:	463e      	mov	r6, r7
 8004956:	6820      	ldr	r0, [r4, #0]
 8004958:	4632      	mov	r2, r6
 800495a:	4641      	mov	r1, r8
 800495c:	f000 fcf6 	bl	800534c <memmove>
 8004960:	68a3      	ldr	r3, [r4, #8]
 8004962:	1b9b      	subs	r3, r3, r6
 8004964:	60a3      	str	r3, [r4, #8]
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	4433      	add	r3, r6
 800496a:	6023      	str	r3, [r4, #0]
 800496c:	2000      	movs	r0, #0
 800496e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004972:	462a      	mov	r2, r5
 8004974:	f000 fd26 	bl	80053c4 <_realloc_r>
 8004978:	4606      	mov	r6, r0
 800497a:	2800      	cmp	r0, #0
 800497c:	d1e0      	bne.n	8004940 <__ssputs_r+0x5c>
 800497e:	6921      	ldr	r1, [r4, #16]
 8004980:	4650      	mov	r0, sl
 8004982:	f7ff ff65 	bl	8004850 <_free_r>
 8004986:	230c      	movs	r3, #12
 8004988:	f8ca 3000 	str.w	r3, [sl]
 800498c:	89a3      	ldrh	r3, [r4, #12]
 800498e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004992:	81a3      	strh	r3, [r4, #12]
 8004994:	f04f 30ff 	mov.w	r0, #4294967295
 8004998:	e7e9      	b.n	800496e <__ssputs_r+0x8a>
	...

0800499c <_svfiprintf_r>:
 800499c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a0:	4698      	mov	r8, r3
 80049a2:	898b      	ldrh	r3, [r1, #12]
 80049a4:	061b      	lsls	r3, r3, #24
 80049a6:	b09d      	sub	sp, #116	@ 0x74
 80049a8:	4607      	mov	r7, r0
 80049aa:	460d      	mov	r5, r1
 80049ac:	4614      	mov	r4, r2
 80049ae:	d510      	bpl.n	80049d2 <_svfiprintf_r+0x36>
 80049b0:	690b      	ldr	r3, [r1, #16]
 80049b2:	b973      	cbnz	r3, 80049d2 <_svfiprintf_r+0x36>
 80049b4:	2140      	movs	r1, #64	@ 0x40
 80049b6:	f7ff fbf9 	bl	80041ac <_malloc_r>
 80049ba:	6028      	str	r0, [r5, #0]
 80049bc:	6128      	str	r0, [r5, #16]
 80049be:	b930      	cbnz	r0, 80049ce <_svfiprintf_r+0x32>
 80049c0:	230c      	movs	r3, #12
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	f04f 30ff 	mov.w	r0, #4294967295
 80049c8:	b01d      	add	sp, #116	@ 0x74
 80049ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ce:	2340      	movs	r3, #64	@ 0x40
 80049d0:	616b      	str	r3, [r5, #20]
 80049d2:	2300      	movs	r3, #0
 80049d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80049d6:	2320      	movs	r3, #32
 80049d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80049e0:	2330      	movs	r3, #48	@ 0x30
 80049e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004b80 <_svfiprintf_r+0x1e4>
 80049e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049ea:	f04f 0901 	mov.w	r9, #1
 80049ee:	4623      	mov	r3, r4
 80049f0:	469a      	mov	sl, r3
 80049f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049f6:	b10a      	cbz	r2, 80049fc <_svfiprintf_r+0x60>
 80049f8:	2a25      	cmp	r2, #37	@ 0x25
 80049fa:	d1f9      	bne.n	80049f0 <_svfiprintf_r+0x54>
 80049fc:	ebba 0b04 	subs.w	fp, sl, r4
 8004a00:	d00b      	beq.n	8004a1a <_svfiprintf_r+0x7e>
 8004a02:	465b      	mov	r3, fp
 8004a04:	4622      	mov	r2, r4
 8004a06:	4629      	mov	r1, r5
 8004a08:	4638      	mov	r0, r7
 8004a0a:	f7ff ff6b 	bl	80048e4 <__ssputs_r>
 8004a0e:	3001      	adds	r0, #1
 8004a10:	f000 80a7 	beq.w	8004b62 <_svfiprintf_r+0x1c6>
 8004a14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a16:	445a      	add	r2, fp
 8004a18:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 809f 	beq.w	8004b62 <_svfiprintf_r+0x1c6>
 8004a24:	2300      	movs	r3, #0
 8004a26:	f04f 32ff 	mov.w	r2, #4294967295
 8004a2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a2e:	f10a 0a01 	add.w	sl, sl, #1
 8004a32:	9304      	str	r3, [sp, #16]
 8004a34:	9307      	str	r3, [sp, #28]
 8004a36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a3c:	4654      	mov	r4, sl
 8004a3e:	2205      	movs	r2, #5
 8004a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a44:	484e      	ldr	r0, [pc, #312]	@ (8004b80 <_svfiprintf_r+0x1e4>)
 8004a46:	f7fb fbcb 	bl	80001e0 <memchr>
 8004a4a:	9a04      	ldr	r2, [sp, #16]
 8004a4c:	b9d8      	cbnz	r0, 8004a86 <_svfiprintf_r+0xea>
 8004a4e:	06d0      	lsls	r0, r2, #27
 8004a50:	bf44      	itt	mi
 8004a52:	2320      	movmi	r3, #32
 8004a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a58:	0711      	lsls	r1, r2, #28
 8004a5a:	bf44      	itt	mi
 8004a5c:	232b      	movmi	r3, #43	@ 0x2b
 8004a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a62:	f89a 3000 	ldrb.w	r3, [sl]
 8004a66:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a68:	d015      	beq.n	8004a96 <_svfiprintf_r+0xfa>
 8004a6a:	9a07      	ldr	r2, [sp, #28]
 8004a6c:	4654      	mov	r4, sl
 8004a6e:	2000      	movs	r0, #0
 8004a70:	f04f 0c0a 	mov.w	ip, #10
 8004a74:	4621      	mov	r1, r4
 8004a76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a7a:	3b30      	subs	r3, #48	@ 0x30
 8004a7c:	2b09      	cmp	r3, #9
 8004a7e:	d94b      	bls.n	8004b18 <_svfiprintf_r+0x17c>
 8004a80:	b1b0      	cbz	r0, 8004ab0 <_svfiprintf_r+0x114>
 8004a82:	9207      	str	r2, [sp, #28]
 8004a84:	e014      	b.n	8004ab0 <_svfiprintf_r+0x114>
 8004a86:	eba0 0308 	sub.w	r3, r0, r8
 8004a8a:	fa09 f303 	lsl.w	r3, r9, r3
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	9304      	str	r3, [sp, #16]
 8004a92:	46a2      	mov	sl, r4
 8004a94:	e7d2      	b.n	8004a3c <_svfiprintf_r+0xa0>
 8004a96:	9b03      	ldr	r3, [sp, #12]
 8004a98:	1d19      	adds	r1, r3, #4
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	9103      	str	r1, [sp, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	bfbb      	ittet	lt
 8004aa2:	425b      	neglt	r3, r3
 8004aa4:	f042 0202 	orrlt.w	r2, r2, #2
 8004aa8:	9307      	strge	r3, [sp, #28]
 8004aaa:	9307      	strlt	r3, [sp, #28]
 8004aac:	bfb8      	it	lt
 8004aae:	9204      	strlt	r2, [sp, #16]
 8004ab0:	7823      	ldrb	r3, [r4, #0]
 8004ab2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ab4:	d10a      	bne.n	8004acc <_svfiprintf_r+0x130>
 8004ab6:	7863      	ldrb	r3, [r4, #1]
 8004ab8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004aba:	d132      	bne.n	8004b22 <_svfiprintf_r+0x186>
 8004abc:	9b03      	ldr	r3, [sp, #12]
 8004abe:	1d1a      	adds	r2, r3, #4
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	9203      	str	r2, [sp, #12]
 8004ac4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ac8:	3402      	adds	r4, #2
 8004aca:	9305      	str	r3, [sp, #20]
 8004acc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004b90 <_svfiprintf_r+0x1f4>
 8004ad0:	7821      	ldrb	r1, [r4, #0]
 8004ad2:	2203      	movs	r2, #3
 8004ad4:	4650      	mov	r0, sl
 8004ad6:	f7fb fb83 	bl	80001e0 <memchr>
 8004ada:	b138      	cbz	r0, 8004aec <_svfiprintf_r+0x150>
 8004adc:	9b04      	ldr	r3, [sp, #16]
 8004ade:	eba0 000a 	sub.w	r0, r0, sl
 8004ae2:	2240      	movs	r2, #64	@ 0x40
 8004ae4:	4082      	lsls	r2, r0
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	3401      	adds	r4, #1
 8004aea:	9304      	str	r3, [sp, #16]
 8004aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004af0:	4824      	ldr	r0, [pc, #144]	@ (8004b84 <_svfiprintf_r+0x1e8>)
 8004af2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004af6:	2206      	movs	r2, #6
 8004af8:	f7fb fb72 	bl	80001e0 <memchr>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	d036      	beq.n	8004b6e <_svfiprintf_r+0x1d2>
 8004b00:	4b21      	ldr	r3, [pc, #132]	@ (8004b88 <_svfiprintf_r+0x1ec>)
 8004b02:	bb1b      	cbnz	r3, 8004b4c <_svfiprintf_r+0x1b0>
 8004b04:	9b03      	ldr	r3, [sp, #12]
 8004b06:	3307      	adds	r3, #7
 8004b08:	f023 0307 	bic.w	r3, r3, #7
 8004b0c:	3308      	adds	r3, #8
 8004b0e:	9303      	str	r3, [sp, #12]
 8004b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b12:	4433      	add	r3, r6
 8004b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b16:	e76a      	b.n	80049ee <_svfiprintf_r+0x52>
 8004b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b1c:	460c      	mov	r4, r1
 8004b1e:	2001      	movs	r0, #1
 8004b20:	e7a8      	b.n	8004a74 <_svfiprintf_r+0xd8>
 8004b22:	2300      	movs	r3, #0
 8004b24:	3401      	adds	r4, #1
 8004b26:	9305      	str	r3, [sp, #20]
 8004b28:	4619      	mov	r1, r3
 8004b2a:	f04f 0c0a 	mov.w	ip, #10
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b34:	3a30      	subs	r2, #48	@ 0x30
 8004b36:	2a09      	cmp	r2, #9
 8004b38:	d903      	bls.n	8004b42 <_svfiprintf_r+0x1a6>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0c6      	beq.n	8004acc <_svfiprintf_r+0x130>
 8004b3e:	9105      	str	r1, [sp, #20]
 8004b40:	e7c4      	b.n	8004acc <_svfiprintf_r+0x130>
 8004b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b46:	4604      	mov	r4, r0
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e7f0      	b.n	8004b2e <_svfiprintf_r+0x192>
 8004b4c:	ab03      	add	r3, sp, #12
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	462a      	mov	r2, r5
 8004b52:	4b0e      	ldr	r3, [pc, #56]	@ (8004b8c <_svfiprintf_r+0x1f0>)
 8004b54:	a904      	add	r1, sp, #16
 8004b56:	4638      	mov	r0, r7
 8004b58:	f3af 8000 	nop.w
 8004b5c:	1c42      	adds	r2, r0, #1
 8004b5e:	4606      	mov	r6, r0
 8004b60:	d1d6      	bne.n	8004b10 <_svfiprintf_r+0x174>
 8004b62:	89ab      	ldrh	r3, [r5, #12]
 8004b64:	065b      	lsls	r3, r3, #25
 8004b66:	f53f af2d 	bmi.w	80049c4 <_svfiprintf_r+0x28>
 8004b6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b6c:	e72c      	b.n	80049c8 <_svfiprintf_r+0x2c>
 8004b6e:	ab03      	add	r3, sp, #12
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	462a      	mov	r2, r5
 8004b74:	4b05      	ldr	r3, [pc, #20]	@ (8004b8c <_svfiprintf_r+0x1f0>)
 8004b76:	a904      	add	r1, sp, #16
 8004b78:	4638      	mov	r0, r7
 8004b7a:	f000 f9bb 	bl	8004ef4 <_printf_i>
 8004b7e:	e7ed      	b.n	8004b5c <_svfiprintf_r+0x1c0>
 8004b80:	08005d58 	.word	0x08005d58
 8004b84:	08005d62 	.word	0x08005d62
 8004b88:	00000000 	.word	0x00000000
 8004b8c:	080048e5 	.word	0x080048e5
 8004b90:	08005d5e 	.word	0x08005d5e

08004b94 <__sfputc_r>:
 8004b94:	6893      	ldr	r3, [r2, #8]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	b410      	push	{r4}
 8004b9c:	6093      	str	r3, [r2, #8]
 8004b9e:	da08      	bge.n	8004bb2 <__sfputc_r+0x1e>
 8004ba0:	6994      	ldr	r4, [r2, #24]
 8004ba2:	42a3      	cmp	r3, r4
 8004ba4:	db01      	blt.n	8004baa <__sfputc_r+0x16>
 8004ba6:	290a      	cmp	r1, #10
 8004ba8:	d103      	bne.n	8004bb2 <__sfputc_r+0x1e>
 8004baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bae:	f7ff bd20 	b.w	80045f2 <__swbuf_r>
 8004bb2:	6813      	ldr	r3, [r2, #0]
 8004bb4:	1c58      	adds	r0, r3, #1
 8004bb6:	6010      	str	r0, [r2, #0]
 8004bb8:	7019      	strb	r1, [r3, #0]
 8004bba:	4608      	mov	r0, r1
 8004bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <__sfputs_r>:
 8004bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc4:	4606      	mov	r6, r0
 8004bc6:	460f      	mov	r7, r1
 8004bc8:	4614      	mov	r4, r2
 8004bca:	18d5      	adds	r5, r2, r3
 8004bcc:	42ac      	cmp	r4, r5
 8004bce:	d101      	bne.n	8004bd4 <__sfputs_r+0x12>
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	e007      	b.n	8004be4 <__sfputs_r+0x22>
 8004bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bd8:	463a      	mov	r2, r7
 8004bda:	4630      	mov	r0, r6
 8004bdc:	f7ff ffda 	bl	8004b94 <__sfputc_r>
 8004be0:	1c43      	adds	r3, r0, #1
 8004be2:	d1f3      	bne.n	8004bcc <__sfputs_r+0xa>
 8004be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004be8 <_vfiprintf_r>:
 8004be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bec:	460d      	mov	r5, r1
 8004bee:	b09d      	sub	sp, #116	@ 0x74
 8004bf0:	4614      	mov	r4, r2
 8004bf2:	4698      	mov	r8, r3
 8004bf4:	4606      	mov	r6, r0
 8004bf6:	b118      	cbz	r0, 8004c00 <_vfiprintf_r+0x18>
 8004bf8:	6a03      	ldr	r3, [r0, #32]
 8004bfa:	b90b      	cbnz	r3, 8004c00 <_vfiprintf_r+0x18>
 8004bfc:	f7ff fbee 	bl	80043dc <__sinit>
 8004c00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c02:	07d9      	lsls	r1, r3, #31
 8004c04:	d405      	bmi.n	8004c12 <_vfiprintf_r+0x2a>
 8004c06:	89ab      	ldrh	r3, [r5, #12]
 8004c08:	059a      	lsls	r2, r3, #22
 8004c0a:	d402      	bmi.n	8004c12 <_vfiprintf_r+0x2a>
 8004c0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c0e:	f7ff fe0e 	bl	800482e <__retarget_lock_acquire_recursive>
 8004c12:	89ab      	ldrh	r3, [r5, #12]
 8004c14:	071b      	lsls	r3, r3, #28
 8004c16:	d501      	bpl.n	8004c1c <_vfiprintf_r+0x34>
 8004c18:	692b      	ldr	r3, [r5, #16]
 8004c1a:	b99b      	cbnz	r3, 8004c44 <_vfiprintf_r+0x5c>
 8004c1c:	4629      	mov	r1, r5
 8004c1e:	4630      	mov	r0, r6
 8004c20:	f7ff fd26 	bl	8004670 <__swsetup_r>
 8004c24:	b170      	cbz	r0, 8004c44 <_vfiprintf_r+0x5c>
 8004c26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c28:	07dc      	lsls	r4, r3, #31
 8004c2a:	d504      	bpl.n	8004c36 <_vfiprintf_r+0x4e>
 8004c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c30:	b01d      	add	sp, #116	@ 0x74
 8004c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c36:	89ab      	ldrh	r3, [r5, #12]
 8004c38:	0598      	lsls	r0, r3, #22
 8004c3a:	d4f7      	bmi.n	8004c2c <_vfiprintf_r+0x44>
 8004c3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c3e:	f7ff fdf7 	bl	8004830 <__retarget_lock_release_recursive>
 8004c42:	e7f3      	b.n	8004c2c <_vfiprintf_r+0x44>
 8004c44:	2300      	movs	r3, #0
 8004c46:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c48:	2320      	movs	r3, #32
 8004c4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c52:	2330      	movs	r3, #48	@ 0x30
 8004c54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004e04 <_vfiprintf_r+0x21c>
 8004c58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c5c:	f04f 0901 	mov.w	r9, #1
 8004c60:	4623      	mov	r3, r4
 8004c62:	469a      	mov	sl, r3
 8004c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c68:	b10a      	cbz	r2, 8004c6e <_vfiprintf_r+0x86>
 8004c6a:	2a25      	cmp	r2, #37	@ 0x25
 8004c6c:	d1f9      	bne.n	8004c62 <_vfiprintf_r+0x7a>
 8004c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8004c72:	d00b      	beq.n	8004c8c <_vfiprintf_r+0xa4>
 8004c74:	465b      	mov	r3, fp
 8004c76:	4622      	mov	r2, r4
 8004c78:	4629      	mov	r1, r5
 8004c7a:	4630      	mov	r0, r6
 8004c7c:	f7ff ffa1 	bl	8004bc2 <__sfputs_r>
 8004c80:	3001      	adds	r0, #1
 8004c82:	f000 80a7 	beq.w	8004dd4 <_vfiprintf_r+0x1ec>
 8004c86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c88:	445a      	add	r2, fp
 8004c8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 809f 	beq.w	8004dd4 <_vfiprintf_r+0x1ec>
 8004c96:	2300      	movs	r3, #0
 8004c98:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ca0:	f10a 0a01 	add.w	sl, sl, #1
 8004ca4:	9304      	str	r3, [sp, #16]
 8004ca6:	9307      	str	r3, [sp, #28]
 8004ca8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cac:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cae:	4654      	mov	r4, sl
 8004cb0:	2205      	movs	r2, #5
 8004cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cb6:	4853      	ldr	r0, [pc, #332]	@ (8004e04 <_vfiprintf_r+0x21c>)
 8004cb8:	f7fb fa92 	bl	80001e0 <memchr>
 8004cbc:	9a04      	ldr	r2, [sp, #16]
 8004cbe:	b9d8      	cbnz	r0, 8004cf8 <_vfiprintf_r+0x110>
 8004cc0:	06d1      	lsls	r1, r2, #27
 8004cc2:	bf44      	itt	mi
 8004cc4:	2320      	movmi	r3, #32
 8004cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cca:	0713      	lsls	r3, r2, #28
 8004ccc:	bf44      	itt	mi
 8004cce:	232b      	movmi	r3, #43	@ 0x2b
 8004cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8004cd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cda:	d015      	beq.n	8004d08 <_vfiprintf_r+0x120>
 8004cdc:	9a07      	ldr	r2, [sp, #28]
 8004cde:	4654      	mov	r4, sl
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	f04f 0c0a 	mov.w	ip, #10
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cec:	3b30      	subs	r3, #48	@ 0x30
 8004cee:	2b09      	cmp	r3, #9
 8004cf0:	d94b      	bls.n	8004d8a <_vfiprintf_r+0x1a2>
 8004cf2:	b1b0      	cbz	r0, 8004d22 <_vfiprintf_r+0x13a>
 8004cf4:	9207      	str	r2, [sp, #28]
 8004cf6:	e014      	b.n	8004d22 <_vfiprintf_r+0x13a>
 8004cf8:	eba0 0308 	sub.w	r3, r0, r8
 8004cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8004d00:	4313      	orrs	r3, r2
 8004d02:	9304      	str	r3, [sp, #16]
 8004d04:	46a2      	mov	sl, r4
 8004d06:	e7d2      	b.n	8004cae <_vfiprintf_r+0xc6>
 8004d08:	9b03      	ldr	r3, [sp, #12]
 8004d0a:	1d19      	adds	r1, r3, #4
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	9103      	str	r1, [sp, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	bfbb      	ittet	lt
 8004d14:	425b      	neglt	r3, r3
 8004d16:	f042 0202 	orrlt.w	r2, r2, #2
 8004d1a:	9307      	strge	r3, [sp, #28]
 8004d1c:	9307      	strlt	r3, [sp, #28]
 8004d1e:	bfb8      	it	lt
 8004d20:	9204      	strlt	r2, [sp, #16]
 8004d22:	7823      	ldrb	r3, [r4, #0]
 8004d24:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d26:	d10a      	bne.n	8004d3e <_vfiprintf_r+0x156>
 8004d28:	7863      	ldrb	r3, [r4, #1]
 8004d2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d2c:	d132      	bne.n	8004d94 <_vfiprintf_r+0x1ac>
 8004d2e:	9b03      	ldr	r3, [sp, #12]
 8004d30:	1d1a      	adds	r2, r3, #4
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	9203      	str	r2, [sp, #12]
 8004d36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d3a:	3402      	adds	r4, #2
 8004d3c:	9305      	str	r3, [sp, #20]
 8004d3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004e14 <_vfiprintf_r+0x22c>
 8004d42:	7821      	ldrb	r1, [r4, #0]
 8004d44:	2203      	movs	r2, #3
 8004d46:	4650      	mov	r0, sl
 8004d48:	f7fb fa4a 	bl	80001e0 <memchr>
 8004d4c:	b138      	cbz	r0, 8004d5e <_vfiprintf_r+0x176>
 8004d4e:	9b04      	ldr	r3, [sp, #16]
 8004d50:	eba0 000a 	sub.w	r0, r0, sl
 8004d54:	2240      	movs	r2, #64	@ 0x40
 8004d56:	4082      	lsls	r2, r0
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	3401      	adds	r4, #1
 8004d5c:	9304      	str	r3, [sp, #16]
 8004d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d62:	4829      	ldr	r0, [pc, #164]	@ (8004e08 <_vfiprintf_r+0x220>)
 8004d64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d68:	2206      	movs	r2, #6
 8004d6a:	f7fb fa39 	bl	80001e0 <memchr>
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	d03f      	beq.n	8004df2 <_vfiprintf_r+0x20a>
 8004d72:	4b26      	ldr	r3, [pc, #152]	@ (8004e0c <_vfiprintf_r+0x224>)
 8004d74:	bb1b      	cbnz	r3, 8004dbe <_vfiprintf_r+0x1d6>
 8004d76:	9b03      	ldr	r3, [sp, #12]
 8004d78:	3307      	adds	r3, #7
 8004d7a:	f023 0307 	bic.w	r3, r3, #7
 8004d7e:	3308      	adds	r3, #8
 8004d80:	9303      	str	r3, [sp, #12]
 8004d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d84:	443b      	add	r3, r7
 8004d86:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d88:	e76a      	b.n	8004c60 <_vfiprintf_r+0x78>
 8004d8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d8e:	460c      	mov	r4, r1
 8004d90:	2001      	movs	r0, #1
 8004d92:	e7a8      	b.n	8004ce6 <_vfiprintf_r+0xfe>
 8004d94:	2300      	movs	r3, #0
 8004d96:	3401      	adds	r4, #1
 8004d98:	9305      	str	r3, [sp, #20]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	f04f 0c0a 	mov.w	ip, #10
 8004da0:	4620      	mov	r0, r4
 8004da2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004da6:	3a30      	subs	r2, #48	@ 0x30
 8004da8:	2a09      	cmp	r2, #9
 8004daa:	d903      	bls.n	8004db4 <_vfiprintf_r+0x1cc>
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0c6      	beq.n	8004d3e <_vfiprintf_r+0x156>
 8004db0:	9105      	str	r1, [sp, #20]
 8004db2:	e7c4      	b.n	8004d3e <_vfiprintf_r+0x156>
 8004db4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004db8:	4604      	mov	r4, r0
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e7f0      	b.n	8004da0 <_vfiprintf_r+0x1b8>
 8004dbe:	ab03      	add	r3, sp, #12
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	462a      	mov	r2, r5
 8004dc4:	4b12      	ldr	r3, [pc, #72]	@ (8004e10 <_vfiprintf_r+0x228>)
 8004dc6:	a904      	add	r1, sp, #16
 8004dc8:	4630      	mov	r0, r6
 8004dca:	f3af 8000 	nop.w
 8004dce:	4607      	mov	r7, r0
 8004dd0:	1c78      	adds	r0, r7, #1
 8004dd2:	d1d6      	bne.n	8004d82 <_vfiprintf_r+0x19a>
 8004dd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dd6:	07d9      	lsls	r1, r3, #31
 8004dd8:	d405      	bmi.n	8004de6 <_vfiprintf_r+0x1fe>
 8004dda:	89ab      	ldrh	r3, [r5, #12]
 8004ddc:	059a      	lsls	r2, r3, #22
 8004dde:	d402      	bmi.n	8004de6 <_vfiprintf_r+0x1fe>
 8004de0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004de2:	f7ff fd25 	bl	8004830 <__retarget_lock_release_recursive>
 8004de6:	89ab      	ldrh	r3, [r5, #12]
 8004de8:	065b      	lsls	r3, r3, #25
 8004dea:	f53f af1f 	bmi.w	8004c2c <_vfiprintf_r+0x44>
 8004dee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004df0:	e71e      	b.n	8004c30 <_vfiprintf_r+0x48>
 8004df2:	ab03      	add	r3, sp, #12
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	462a      	mov	r2, r5
 8004df8:	4b05      	ldr	r3, [pc, #20]	@ (8004e10 <_vfiprintf_r+0x228>)
 8004dfa:	a904      	add	r1, sp, #16
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	f000 f879 	bl	8004ef4 <_printf_i>
 8004e02:	e7e4      	b.n	8004dce <_vfiprintf_r+0x1e6>
 8004e04:	08005d58 	.word	0x08005d58
 8004e08:	08005d62 	.word	0x08005d62
 8004e0c:	00000000 	.word	0x00000000
 8004e10:	08004bc3 	.word	0x08004bc3
 8004e14:	08005d5e 	.word	0x08005d5e

08004e18 <_printf_common>:
 8004e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1c:	4616      	mov	r6, r2
 8004e1e:	4698      	mov	r8, r3
 8004e20:	688a      	ldr	r2, [r1, #8]
 8004e22:	690b      	ldr	r3, [r1, #16]
 8004e24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	bfb8      	it	lt
 8004e2c:	4613      	movlt	r3, r2
 8004e2e:	6033      	str	r3, [r6, #0]
 8004e30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e34:	4607      	mov	r7, r0
 8004e36:	460c      	mov	r4, r1
 8004e38:	b10a      	cbz	r2, 8004e3e <_printf_common+0x26>
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	6033      	str	r3, [r6, #0]
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	0699      	lsls	r1, r3, #26
 8004e42:	bf42      	ittt	mi
 8004e44:	6833      	ldrmi	r3, [r6, #0]
 8004e46:	3302      	addmi	r3, #2
 8004e48:	6033      	strmi	r3, [r6, #0]
 8004e4a:	6825      	ldr	r5, [r4, #0]
 8004e4c:	f015 0506 	ands.w	r5, r5, #6
 8004e50:	d106      	bne.n	8004e60 <_printf_common+0x48>
 8004e52:	f104 0a19 	add.w	sl, r4, #25
 8004e56:	68e3      	ldr	r3, [r4, #12]
 8004e58:	6832      	ldr	r2, [r6, #0]
 8004e5a:	1a9b      	subs	r3, r3, r2
 8004e5c:	42ab      	cmp	r3, r5
 8004e5e:	dc26      	bgt.n	8004eae <_printf_common+0x96>
 8004e60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e64:	6822      	ldr	r2, [r4, #0]
 8004e66:	3b00      	subs	r3, #0
 8004e68:	bf18      	it	ne
 8004e6a:	2301      	movne	r3, #1
 8004e6c:	0692      	lsls	r2, r2, #26
 8004e6e:	d42b      	bmi.n	8004ec8 <_printf_common+0xb0>
 8004e70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e74:	4641      	mov	r1, r8
 8004e76:	4638      	mov	r0, r7
 8004e78:	47c8      	blx	r9
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	d01e      	beq.n	8004ebc <_printf_common+0xa4>
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	6922      	ldr	r2, [r4, #16]
 8004e82:	f003 0306 	and.w	r3, r3, #6
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	bf02      	ittt	eq
 8004e8a:	68e5      	ldreq	r5, [r4, #12]
 8004e8c:	6833      	ldreq	r3, [r6, #0]
 8004e8e:	1aed      	subeq	r5, r5, r3
 8004e90:	68a3      	ldr	r3, [r4, #8]
 8004e92:	bf0c      	ite	eq
 8004e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e98:	2500      	movne	r5, #0
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	bfc4      	itt	gt
 8004e9e:	1a9b      	subgt	r3, r3, r2
 8004ea0:	18ed      	addgt	r5, r5, r3
 8004ea2:	2600      	movs	r6, #0
 8004ea4:	341a      	adds	r4, #26
 8004ea6:	42b5      	cmp	r5, r6
 8004ea8:	d11a      	bne.n	8004ee0 <_printf_common+0xc8>
 8004eaa:	2000      	movs	r0, #0
 8004eac:	e008      	b.n	8004ec0 <_printf_common+0xa8>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	4652      	mov	r2, sl
 8004eb2:	4641      	mov	r1, r8
 8004eb4:	4638      	mov	r0, r7
 8004eb6:	47c8      	blx	r9
 8004eb8:	3001      	adds	r0, #1
 8004eba:	d103      	bne.n	8004ec4 <_printf_common+0xac>
 8004ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec4:	3501      	adds	r5, #1
 8004ec6:	e7c6      	b.n	8004e56 <_printf_common+0x3e>
 8004ec8:	18e1      	adds	r1, r4, r3
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	2030      	movs	r0, #48	@ 0x30
 8004ece:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ed2:	4422      	add	r2, r4
 8004ed4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ed8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004edc:	3302      	adds	r3, #2
 8004ede:	e7c7      	b.n	8004e70 <_printf_common+0x58>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	4622      	mov	r2, r4
 8004ee4:	4641      	mov	r1, r8
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	47c8      	blx	r9
 8004eea:	3001      	adds	r0, #1
 8004eec:	d0e6      	beq.n	8004ebc <_printf_common+0xa4>
 8004eee:	3601      	adds	r6, #1
 8004ef0:	e7d9      	b.n	8004ea6 <_printf_common+0x8e>
	...

08004ef4 <_printf_i>:
 8004ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef8:	7e0f      	ldrb	r7, [r1, #24]
 8004efa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004efc:	2f78      	cmp	r7, #120	@ 0x78
 8004efe:	4691      	mov	r9, r2
 8004f00:	4680      	mov	r8, r0
 8004f02:	460c      	mov	r4, r1
 8004f04:	469a      	mov	sl, r3
 8004f06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f0a:	d807      	bhi.n	8004f1c <_printf_i+0x28>
 8004f0c:	2f62      	cmp	r7, #98	@ 0x62
 8004f0e:	d80a      	bhi.n	8004f26 <_printf_i+0x32>
 8004f10:	2f00      	cmp	r7, #0
 8004f12:	f000 80d1 	beq.w	80050b8 <_printf_i+0x1c4>
 8004f16:	2f58      	cmp	r7, #88	@ 0x58
 8004f18:	f000 80b8 	beq.w	800508c <_printf_i+0x198>
 8004f1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f24:	e03a      	b.n	8004f9c <_printf_i+0xa8>
 8004f26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f2a:	2b15      	cmp	r3, #21
 8004f2c:	d8f6      	bhi.n	8004f1c <_printf_i+0x28>
 8004f2e:	a101      	add	r1, pc, #4	@ (adr r1, 8004f34 <_printf_i+0x40>)
 8004f30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f34:	08004f8d 	.word	0x08004f8d
 8004f38:	08004fa1 	.word	0x08004fa1
 8004f3c:	08004f1d 	.word	0x08004f1d
 8004f40:	08004f1d 	.word	0x08004f1d
 8004f44:	08004f1d 	.word	0x08004f1d
 8004f48:	08004f1d 	.word	0x08004f1d
 8004f4c:	08004fa1 	.word	0x08004fa1
 8004f50:	08004f1d 	.word	0x08004f1d
 8004f54:	08004f1d 	.word	0x08004f1d
 8004f58:	08004f1d 	.word	0x08004f1d
 8004f5c:	08004f1d 	.word	0x08004f1d
 8004f60:	0800509f 	.word	0x0800509f
 8004f64:	08004fcb 	.word	0x08004fcb
 8004f68:	08005059 	.word	0x08005059
 8004f6c:	08004f1d 	.word	0x08004f1d
 8004f70:	08004f1d 	.word	0x08004f1d
 8004f74:	080050c1 	.word	0x080050c1
 8004f78:	08004f1d 	.word	0x08004f1d
 8004f7c:	08004fcb 	.word	0x08004fcb
 8004f80:	08004f1d 	.word	0x08004f1d
 8004f84:	08004f1d 	.word	0x08004f1d
 8004f88:	08005061 	.word	0x08005061
 8004f8c:	6833      	ldr	r3, [r6, #0]
 8004f8e:	1d1a      	adds	r2, r3, #4
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6032      	str	r2, [r6, #0]
 8004f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e09c      	b.n	80050da <_printf_i+0x1e6>
 8004fa0:	6833      	ldr	r3, [r6, #0]
 8004fa2:	6820      	ldr	r0, [r4, #0]
 8004fa4:	1d19      	adds	r1, r3, #4
 8004fa6:	6031      	str	r1, [r6, #0]
 8004fa8:	0606      	lsls	r6, r0, #24
 8004faa:	d501      	bpl.n	8004fb0 <_printf_i+0xbc>
 8004fac:	681d      	ldr	r5, [r3, #0]
 8004fae:	e003      	b.n	8004fb8 <_printf_i+0xc4>
 8004fb0:	0645      	lsls	r5, r0, #25
 8004fb2:	d5fb      	bpl.n	8004fac <_printf_i+0xb8>
 8004fb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fb8:	2d00      	cmp	r5, #0
 8004fba:	da03      	bge.n	8004fc4 <_printf_i+0xd0>
 8004fbc:	232d      	movs	r3, #45	@ 0x2d
 8004fbe:	426d      	negs	r5, r5
 8004fc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fc4:	4858      	ldr	r0, [pc, #352]	@ (8005128 <_printf_i+0x234>)
 8004fc6:	230a      	movs	r3, #10
 8004fc8:	e011      	b.n	8004fee <_printf_i+0xfa>
 8004fca:	6821      	ldr	r1, [r4, #0]
 8004fcc:	6833      	ldr	r3, [r6, #0]
 8004fce:	0608      	lsls	r0, r1, #24
 8004fd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fd4:	d402      	bmi.n	8004fdc <_printf_i+0xe8>
 8004fd6:	0649      	lsls	r1, r1, #25
 8004fd8:	bf48      	it	mi
 8004fda:	b2ad      	uxthmi	r5, r5
 8004fdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fde:	4852      	ldr	r0, [pc, #328]	@ (8005128 <_printf_i+0x234>)
 8004fe0:	6033      	str	r3, [r6, #0]
 8004fe2:	bf14      	ite	ne
 8004fe4:	230a      	movne	r3, #10
 8004fe6:	2308      	moveq	r3, #8
 8004fe8:	2100      	movs	r1, #0
 8004fea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fee:	6866      	ldr	r6, [r4, #4]
 8004ff0:	60a6      	str	r6, [r4, #8]
 8004ff2:	2e00      	cmp	r6, #0
 8004ff4:	db05      	blt.n	8005002 <_printf_i+0x10e>
 8004ff6:	6821      	ldr	r1, [r4, #0]
 8004ff8:	432e      	orrs	r6, r5
 8004ffa:	f021 0104 	bic.w	r1, r1, #4
 8004ffe:	6021      	str	r1, [r4, #0]
 8005000:	d04b      	beq.n	800509a <_printf_i+0x1a6>
 8005002:	4616      	mov	r6, r2
 8005004:	fbb5 f1f3 	udiv	r1, r5, r3
 8005008:	fb03 5711 	mls	r7, r3, r1, r5
 800500c:	5dc7      	ldrb	r7, [r0, r7]
 800500e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005012:	462f      	mov	r7, r5
 8005014:	42bb      	cmp	r3, r7
 8005016:	460d      	mov	r5, r1
 8005018:	d9f4      	bls.n	8005004 <_printf_i+0x110>
 800501a:	2b08      	cmp	r3, #8
 800501c:	d10b      	bne.n	8005036 <_printf_i+0x142>
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	07df      	lsls	r7, r3, #31
 8005022:	d508      	bpl.n	8005036 <_printf_i+0x142>
 8005024:	6923      	ldr	r3, [r4, #16]
 8005026:	6861      	ldr	r1, [r4, #4]
 8005028:	4299      	cmp	r1, r3
 800502a:	bfde      	ittt	le
 800502c:	2330      	movle	r3, #48	@ 0x30
 800502e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005032:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005036:	1b92      	subs	r2, r2, r6
 8005038:	6122      	str	r2, [r4, #16]
 800503a:	f8cd a000 	str.w	sl, [sp]
 800503e:	464b      	mov	r3, r9
 8005040:	aa03      	add	r2, sp, #12
 8005042:	4621      	mov	r1, r4
 8005044:	4640      	mov	r0, r8
 8005046:	f7ff fee7 	bl	8004e18 <_printf_common>
 800504a:	3001      	adds	r0, #1
 800504c:	d14a      	bne.n	80050e4 <_printf_i+0x1f0>
 800504e:	f04f 30ff 	mov.w	r0, #4294967295
 8005052:	b004      	add	sp, #16
 8005054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	f043 0320 	orr.w	r3, r3, #32
 800505e:	6023      	str	r3, [r4, #0]
 8005060:	4832      	ldr	r0, [pc, #200]	@ (800512c <_printf_i+0x238>)
 8005062:	2778      	movs	r7, #120	@ 0x78
 8005064:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	6831      	ldr	r1, [r6, #0]
 800506c:	061f      	lsls	r7, r3, #24
 800506e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005072:	d402      	bmi.n	800507a <_printf_i+0x186>
 8005074:	065f      	lsls	r7, r3, #25
 8005076:	bf48      	it	mi
 8005078:	b2ad      	uxthmi	r5, r5
 800507a:	6031      	str	r1, [r6, #0]
 800507c:	07d9      	lsls	r1, r3, #31
 800507e:	bf44      	itt	mi
 8005080:	f043 0320 	orrmi.w	r3, r3, #32
 8005084:	6023      	strmi	r3, [r4, #0]
 8005086:	b11d      	cbz	r5, 8005090 <_printf_i+0x19c>
 8005088:	2310      	movs	r3, #16
 800508a:	e7ad      	b.n	8004fe8 <_printf_i+0xf4>
 800508c:	4826      	ldr	r0, [pc, #152]	@ (8005128 <_printf_i+0x234>)
 800508e:	e7e9      	b.n	8005064 <_printf_i+0x170>
 8005090:	6823      	ldr	r3, [r4, #0]
 8005092:	f023 0320 	bic.w	r3, r3, #32
 8005096:	6023      	str	r3, [r4, #0]
 8005098:	e7f6      	b.n	8005088 <_printf_i+0x194>
 800509a:	4616      	mov	r6, r2
 800509c:	e7bd      	b.n	800501a <_printf_i+0x126>
 800509e:	6833      	ldr	r3, [r6, #0]
 80050a0:	6825      	ldr	r5, [r4, #0]
 80050a2:	6961      	ldr	r1, [r4, #20]
 80050a4:	1d18      	adds	r0, r3, #4
 80050a6:	6030      	str	r0, [r6, #0]
 80050a8:	062e      	lsls	r6, r5, #24
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	d501      	bpl.n	80050b2 <_printf_i+0x1be>
 80050ae:	6019      	str	r1, [r3, #0]
 80050b0:	e002      	b.n	80050b8 <_printf_i+0x1c4>
 80050b2:	0668      	lsls	r0, r5, #25
 80050b4:	d5fb      	bpl.n	80050ae <_printf_i+0x1ba>
 80050b6:	8019      	strh	r1, [r3, #0]
 80050b8:	2300      	movs	r3, #0
 80050ba:	6123      	str	r3, [r4, #16]
 80050bc:	4616      	mov	r6, r2
 80050be:	e7bc      	b.n	800503a <_printf_i+0x146>
 80050c0:	6833      	ldr	r3, [r6, #0]
 80050c2:	1d1a      	adds	r2, r3, #4
 80050c4:	6032      	str	r2, [r6, #0]
 80050c6:	681e      	ldr	r6, [r3, #0]
 80050c8:	6862      	ldr	r2, [r4, #4]
 80050ca:	2100      	movs	r1, #0
 80050cc:	4630      	mov	r0, r6
 80050ce:	f7fb f887 	bl	80001e0 <memchr>
 80050d2:	b108      	cbz	r0, 80050d8 <_printf_i+0x1e4>
 80050d4:	1b80      	subs	r0, r0, r6
 80050d6:	6060      	str	r0, [r4, #4]
 80050d8:	6863      	ldr	r3, [r4, #4]
 80050da:	6123      	str	r3, [r4, #16]
 80050dc:	2300      	movs	r3, #0
 80050de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050e2:	e7aa      	b.n	800503a <_printf_i+0x146>
 80050e4:	6923      	ldr	r3, [r4, #16]
 80050e6:	4632      	mov	r2, r6
 80050e8:	4649      	mov	r1, r9
 80050ea:	4640      	mov	r0, r8
 80050ec:	47d0      	blx	sl
 80050ee:	3001      	adds	r0, #1
 80050f0:	d0ad      	beq.n	800504e <_printf_i+0x15a>
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	079b      	lsls	r3, r3, #30
 80050f6:	d413      	bmi.n	8005120 <_printf_i+0x22c>
 80050f8:	68e0      	ldr	r0, [r4, #12]
 80050fa:	9b03      	ldr	r3, [sp, #12]
 80050fc:	4298      	cmp	r0, r3
 80050fe:	bfb8      	it	lt
 8005100:	4618      	movlt	r0, r3
 8005102:	e7a6      	b.n	8005052 <_printf_i+0x15e>
 8005104:	2301      	movs	r3, #1
 8005106:	4632      	mov	r2, r6
 8005108:	4649      	mov	r1, r9
 800510a:	4640      	mov	r0, r8
 800510c:	47d0      	blx	sl
 800510e:	3001      	adds	r0, #1
 8005110:	d09d      	beq.n	800504e <_printf_i+0x15a>
 8005112:	3501      	adds	r5, #1
 8005114:	68e3      	ldr	r3, [r4, #12]
 8005116:	9903      	ldr	r1, [sp, #12]
 8005118:	1a5b      	subs	r3, r3, r1
 800511a:	42ab      	cmp	r3, r5
 800511c:	dcf2      	bgt.n	8005104 <_printf_i+0x210>
 800511e:	e7eb      	b.n	80050f8 <_printf_i+0x204>
 8005120:	2500      	movs	r5, #0
 8005122:	f104 0619 	add.w	r6, r4, #25
 8005126:	e7f5      	b.n	8005114 <_printf_i+0x220>
 8005128:	08005d69 	.word	0x08005d69
 800512c:	08005d7a 	.word	0x08005d7a

08005130 <__sflush_r>:
 8005130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005138:	0716      	lsls	r6, r2, #28
 800513a:	4605      	mov	r5, r0
 800513c:	460c      	mov	r4, r1
 800513e:	d454      	bmi.n	80051ea <__sflush_r+0xba>
 8005140:	684b      	ldr	r3, [r1, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	dc02      	bgt.n	800514c <__sflush_r+0x1c>
 8005146:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	dd48      	ble.n	80051de <__sflush_r+0xae>
 800514c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800514e:	2e00      	cmp	r6, #0
 8005150:	d045      	beq.n	80051de <__sflush_r+0xae>
 8005152:	2300      	movs	r3, #0
 8005154:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005158:	682f      	ldr	r7, [r5, #0]
 800515a:	6a21      	ldr	r1, [r4, #32]
 800515c:	602b      	str	r3, [r5, #0]
 800515e:	d030      	beq.n	80051c2 <__sflush_r+0x92>
 8005160:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005162:	89a3      	ldrh	r3, [r4, #12]
 8005164:	0759      	lsls	r1, r3, #29
 8005166:	d505      	bpl.n	8005174 <__sflush_r+0x44>
 8005168:	6863      	ldr	r3, [r4, #4]
 800516a:	1ad2      	subs	r2, r2, r3
 800516c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800516e:	b10b      	cbz	r3, 8005174 <__sflush_r+0x44>
 8005170:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005172:	1ad2      	subs	r2, r2, r3
 8005174:	2300      	movs	r3, #0
 8005176:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005178:	6a21      	ldr	r1, [r4, #32]
 800517a:	4628      	mov	r0, r5
 800517c:	47b0      	blx	r6
 800517e:	1c43      	adds	r3, r0, #1
 8005180:	89a3      	ldrh	r3, [r4, #12]
 8005182:	d106      	bne.n	8005192 <__sflush_r+0x62>
 8005184:	6829      	ldr	r1, [r5, #0]
 8005186:	291d      	cmp	r1, #29
 8005188:	d82b      	bhi.n	80051e2 <__sflush_r+0xb2>
 800518a:	4a2a      	ldr	r2, [pc, #168]	@ (8005234 <__sflush_r+0x104>)
 800518c:	40ca      	lsrs	r2, r1
 800518e:	07d6      	lsls	r6, r2, #31
 8005190:	d527      	bpl.n	80051e2 <__sflush_r+0xb2>
 8005192:	2200      	movs	r2, #0
 8005194:	6062      	str	r2, [r4, #4]
 8005196:	04d9      	lsls	r1, r3, #19
 8005198:	6922      	ldr	r2, [r4, #16]
 800519a:	6022      	str	r2, [r4, #0]
 800519c:	d504      	bpl.n	80051a8 <__sflush_r+0x78>
 800519e:	1c42      	adds	r2, r0, #1
 80051a0:	d101      	bne.n	80051a6 <__sflush_r+0x76>
 80051a2:	682b      	ldr	r3, [r5, #0]
 80051a4:	b903      	cbnz	r3, 80051a8 <__sflush_r+0x78>
 80051a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80051a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051aa:	602f      	str	r7, [r5, #0]
 80051ac:	b1b9      	cbz	r1, 80051de <__sflush_r+0xae>
 80051ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051b2:	4299      	cmp	r1, r3
 80051b4:	d002      	beq.n	80051bc <__sflush_r+0x8c>
 80051b6:	4628      	mov	r0, r5
 80051b8:	f7ff fb4a 	bl	8004850 <_free_r>
 80051bc:	2300      	movs	r3, #0
 80051be:	6363      	str	r3, [r4, #52]	@ 0x34
 80051c0:	e00d      	b.n	80051de <__sflush_r+0xae>
 80051c2:	2301      	movs	r3, #1
 80051c4:	4628      	mov	r0, r5
 80051c6:	47b0      	blx	r6
 80051c8:	4602      	mov	r2, r0
 80051ca:	1c50      	adds	r0, r2, #1
 80051cc:	d1c9      	bne.n	8005162 <__sflush_r+0x32>
 80051ce:	682b      	ldr	r3, [r5, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0c6      	beq.n	8005162 <__sflush_r+0x32>
 80051d4:	2b1d      	cmp	r3, #29
 80051d6:	d001      	beq.n	80051dc <__sflush_r+0xac>
 80051d8:	2b16      	cmp	r3, #22
 80051da:	d11e      	bne.n	800521a <__sflush_r+0xea>
 80051dc:	602f      	str	r7, [r5, #0]
 80051de:	2000      	movs	r0, #0
 80051e0:	e022      	b.n	8005228 <__sflush_r+0xf8>
 80051e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051e6:	b21b      	sxth	r3, r3
 80051e8:	e01b      	b.n	8005222 <__sflush_r+0xf2>
 80051ea:	690f      	ldr	r7, [r1, #16]
 80051ec:	2f00      	cmp	r7, #0
 80051ee:	d0f6      	beq.n	80051de <__sflush_r+0xae>
 80051f0:	0793      	lsls	r3, r2, #30
 80051f2:	680e      	ldr	r6, [r1, #0]
 80051f4:	bf08      	it	eq
 80051f6:	694b      	ldreq	r3, [r1, #20]
 80051f8:	600f      	str	r7, [r1, #0]
 80051fa:	bf18      	it	ne
 80051fc:	2300      	movne	r3, #0
 80051fe:	eba6 0807 	sub.w	r8, r6, r7
 8005202:	608b      	str	r3, [r1, #8]
 8005204:	f1b8 0f00 	cmp.w	r8, #0
 8005208:	dde9      	ble.n	80051de <__sflush_r+0xae>
 800520a:	6a21      	ldr	r1, [r4, #32]
 800520c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800520e:	4643      	mov	r3, r8
 8005210:	463a      	mov	r2, r7
 8005212:	4628      	mov	r0, r5
 8005214:	47b0      	blx	r6
 8005216:	2800      	cmp	r0, #0
 8005218:	dc08      	bgt.n	800522c <__sflush_r+0xfc>
 800521a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800521e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005222:	81a3      	strh	r3, [r4, #12]
 8005224:	f04f 30ff 	mov.w	r0, #4294967295
 8005228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800522c:	4407      	add	r7, r0
 800522e:	eba8 0800 	sub.w	r8, r8, r0
 8005232:	e7e7      	b.n	8005204 <__sflush_r+0xd4>
 8005234:	20400001 	.word	0x20400001

08005238 <_fflush_r>:
 8005238:	b538      	push	{r3, r4, r5, lr}
 800523a:	690b      	ldr	r3, [r1, #16]
 800523c:	4605      	mov	r5, r0
 800523e:	460c      	mov	r4, r1
 8005240:	b913      	cbnz	r3, 8005248 <_fflush_r+0x10>
 8005242:	2500      	movs	r5, #0
 8005244:	4628      	mov	r0, r5
 8005246:	bd38      	pop	{r3, r4, r5, pc}
 8005248:	b118      	cbz	r0, 8005252 <_fflush_r+0x1a>
 800524a:	6a03      	ldr	r3, [r0, #32]
 800524c:	b90b      	cbnz	r3, 8005252 <_fflush_r+0x1a>
 800524e:	f7ff f8c5 	bl	80043dc <__sinit>
 8005252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0f3      	beq.n	8005242 <_fflush_r+0xa>
 800525a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800525c:	07d0      	lsls	r0, r2, #31
 800525e:	d404      	bmi.n	800526a <_fflush_r+0x32>
 8005260:	0599      	lsls	r1, r3, #22
 8005262:	d402      	bmi.n	800526a <_fflush_r+0x32>
 8005264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005266:	f7ff fae2 	bl	800482e <__retarget_lock_acquire_recursive>
 800526a:	4628      	mov	r0, r5
 800526c:	4621      	mov	r1, r4
 800526e:	f7ff ff5f 	bl	8005130 <__sflush_r>
 8005272:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005274:	07da      	lsls	r2, r3, #31
 8005276:	4605      	mov	r5, r0
 8005278:	d4e4      	bmi.n	8005244 <_fflush_r+0xc>
 800527a:	89a3      	ldrh	r3, [r4, #12]
 800527c:	059b      	lsls	r3, r3, #22
 800527e:	d4e1      	bmi.n	8005244 <_fflush_r+0xc>
 8005280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005282:	f7ff fad5 	bl	8004830 <__retarget_lock_release_recursive>
 8005286:	e7dd      	b.n	8005244 <_fflush_r+0xc>

08005288 <__swhatbuf_r>:
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	460c      	mov	r4, r1
 800528c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005290:	2900      	cmp	r1, #0
 8005292:	b096      	sub	sp, #88	@ 0x58
 8005294:	4615      	mov	r5, r2
 8005296:	461e      	mov	r6, r3
 8005298:	da0d      	bge.n	80052b6 <__swhatbuf_r+0x2e>
 800529a:	89a3      	ldrh	r3, [r4, #12]
 800529c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80052a0:	f04f 0100 	mov.w	r1, #0
 80052a4:	bf14      	ite	ne
 80052a6:	2340      	movne	r3, #64	@ 0x40
 80052a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80052ac:	2000      	movs	r0, #0
 80052ae:	6031      	str	r1, [r6, #0]
 80052b0:	602b      	str	r3, [r5, #0]
 80052b2:	b016      	add	sp, #88	@ 0x58
 80052b4:	bd70      	pop	{r4, r5, r6, pc}
 80052b6:	466a      	mov	r2, sp
 80052b8:	f000 f862 	bl	8005380 <_fstat_r>
 80052bc:	2800      	cmp	r0, #0
 80052be:	dbec      	blt.n	800529a <__swhatbuf_r+0x12>
 80052c0:	9901      	ldr	r1, [sp, #4]
 80052c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80052c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80052ca:	4259      	negs	r1, r3
 80052cc:	4159      	adcs	r1, r3
 80052ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052d2:	e7eb      	b.n	80052ac <__swhatbuf_r+0x24>

080052d4 <__smakebuf_r>:
 80052d4:	898b      	ldrh	r3, [r1, #12]
 80052d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052d8:	079d      	lsls	r5, r3, #30
 80052da:	4606      	mov	r6, r0
 80052dc:	460c      	mov	r4, r1
 80052de:	d507      	bpl.n	80052f0 <__smakebuf_r+0x1c>
 80052e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	6123      	str	r3, [r4, #16]
 80052e8:	2301      	movs	r3, #1
 80052ea:	6163      	str	r3, [r4, #20]
 80052ec:	b003      	add	sp, #12
 80052ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052f0:	ab01      	add	r3, sp, #4
 80052f2:	466a      	mov	r2, sp
 80052f4:	f7ff ffc8 	bl	8005288 <__swhatbuf_r>
 80052f8:	9f00      	ldr	r7, [sp, #0]
 80052fa:	4605      	mov	r5, r0
 80052fc:	4639      	mov	r1, r7
 80052fe:	4630      	mov	r0, r6
 8005300:	f7fe ff54 	bl	80041ac <_malloc_r>
 8005304:	b948      	cbnz	r0, 800531a <__smakebuf_r+0x46>
 8005306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800530a:	059a      	lsls	r2, r3, #22
 800530c:	d4ee      	bmi.n	80052ec <__smakebuf_r+0x18>
 800530e:	f023 0303 	bic.w	r3, r3, #3
 8005312:	f043 0302 	orr.w	r3, r3, #2
 8005316:	81a3      	strh	r3, [r4, #12]
 8005318:	e7e2      	b.n	80052e0 <__smakebuf_r+0xc>
 800531a:	89a3      	ldrh	r3, [r4, #12]
 800531c:	6020      	str	r0, [r4, #0]
 800531e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005322:	81a3      	strh	r3, [r4, #12]
 8005324:	9b01      	ldr	r3, [sp, #4]
 8005326:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800532a:	b15b      	cbz	r3, 8005344 <__smakebuf_r+0x70>
 800532c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005330:	4630      	mov	r0, r6
 8005332:	f000 f837 	bl	80053a4 <_isatty_r>
 8005336:	b128      	cbz	r0, 8005344 <__smakebuf_r+0x70>
 8005338:	89a3      	ldrh	r3, [r4, #12]
 800533a:	f023 0303 	bic.w	r3, r3, #3
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	81a3      	strh	r3, [r4, #12]
 8005344:	89a3      	ldrh	r3, [r4, #12]
 8005346:	431d      	orrs	r5, r3
 8005348:	81a5      	strh	r5, [r4, #12]
 800534a:	e7cf      	b.n	80052ec <__smakebuf_r+0x18>

0800534c <memmove>:
 800534c:	4288      	cmp	r0, r1
 800534e:	b510      	push	{r4, lr}
 8005350:	eb01 0402 	add.w	r4, r1, r2
 8005354:	d902      	bls.n	800535c <memmove+0x10>
 8005356:	4284      	cmp	r4, r0
 8005358:	4623      	mov	r3, r4
 800535a:	d807      	bhi.n	800536c <memmove+0x20>
 800535c:	1e43      	subs	r3, r0, #1
 800535e:	42a1      	cmp	r1, r4
 8005360:	d008      	beq.n	8005374 <memmove+0x28>
 8005362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005366:	f803 2f01 	strb.w	r2, [r3, #1]!
 800536a:	e7f8      	b.n	800535e <memmove+0x12>
 800536c:	4402      	add	r2, r0
 800536e:	4601      	mov	r1, r0
 8005370:	428a      	cmp	r2, r1
 8005372:	d100      	bne.n	8005376 <memmove+0x2a>
 8005374:	bd10      	pop	{r4, pc}
 8005376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800537a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800537e:	e7f7      	b.n	8005370 <memmove+0x24>

08005380 <_fstat_r>:
 8005380:	b538      	push	{r3, r4, r5, lr}
 8005382:	4d07      	ldr	r5, [pc, #28]	@ (80053a0 <_fstat_r+0x20>)
 8005384:	2300      	movs	r3, #0
 8005386:	4604      	mov	r4, r0
 8005388:	4608      	mov	r0, r1
 800538a:	4611      	mov	r1, r2
 800538c:	602b      	str	r3, [r5, #0]
 800538e:	f7fc fa85 	bl	800189c <_fstat>
 8005392:	1c43      	adds	r3, r0, #1
 8005394:	d102      	bne.n	800539c <_fstat_r+0x1c>
 8005396:	682b      	ldr	r3, [r5, #0]
 8005398:	b103      	cbz	r3, 800539c <_fstat_r+0x1c>
 800539a:	6023      	str	r3, [r4, #0]
 800539c:	bd38      	pop	{r3, r4, r5, pc}
 800539e:	bf00      	nop
 80053a0:	200004a4 	.word	0x200004a4

080053a4 <_isatty_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4d06      	ldr	r5, [pc, #24]	@ (80053c0 <_isatty_r+0x1c>)
 80053a8:	2300      	movs	r3, #0
 80053aa:	4604      	mov	r4, r0
 80053ac:	4608      	mov	r0, r1
 80053ae:	602b      	str	r3, [r5, #0]
 80053b0:	f7fc fa84 	bl	80018bc <_isatty>
 80053b4:	1c43      	adds	r3, r0, #1
 80053b6:	d102      	bne.n	80053be <_isatty_r+0x1a>
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	b103      	cbz	r3, 80053be <_isatty_r+0x1a>
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	bd38      	pop	{r3, r4, r5, pc}
 80053c0:	200004a4 	.word	0x200004a4

080053c4 <_realloc_r>:
 80053c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053c8:	4607      	mov	r7, r0
 80053ca:	4614      	mov	r4, r2
 80053cc:	460d      	mov	r5, r1
 80053ce:	b921      	cbnz	r1, 80053da <_realloc_r+0x16>
 80053d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053d4:	4611      	mov	r1, r2
 80053d6:	f7fe bee9 	b.w	80041ac <_malloc_r>
 80053da:	b92a      	cbnz	r2, 80053e8 <_realloc_r+0x24>
 80053dc:	f7ff fa38 	bl	8004850 <_free_r>
 80053e0:	4625      	mov	r5, r4
 80053e2:	4628      	mov	r0, r5
 80053e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053e8:	f000 f81a 	bl	8005420 <_malloc_usable_size_r>
 80053ec:	4284      	cmp	r4, r0
 80053ee:	4606      	mov	r6, r0
 80053f0:	d802      	bhi.n	80053f8 <_realloc_r+0x34>
 80053f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053f6:	d8f4      	bhi.n	80053e2 <_realloc_r+0x1e>
 80053f8:	4621      	mov	r1, r4
 80053fa:	4638      	mov	r0, r7
 80053fc:	f7fe fed6 	bl	80041ac <_malloc_r>
 8005400:	4680      	mov	r8, r0
 8005402:	b908      	cbnz	r0, 8005408 <_realloc_r+0x44>
 8005404:	4645      	mov	r5, r8
 8005406:	e7ec      	b.n	80053e2 <_realloc_r+0x1e>
 8005408:	42b4      	cmp	r4, r6
 800540a:	4622      	mov	r2, r4
 800540c:	4629      	mov	r1, r5
 800540e:	bf28      	it	cs
 8005410:	4632      	movcs	r2, r6
 8005412:	f7ff fa0e 	bl	8004832 <memcpy>
 8005416:	4629      	mov	r1, r5
 8005418:	4638      	mov	r0, r7
 800541a:	f7ff fa19 	bl	8004850 <_free_r>
 800541e:	e7f1      	b.n	8005404 <_realloc_r+0x40>

08005420 <_malloc_usable_size_r>:
 8005420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005424:	1f18      	subs	r0, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	bfbc      	itt	lt
 800542a:	580b      	ldrlt	r3, [r1, r0]
 800542c:	18c0      	addlt	r0, r0, r3
 800542e:	4770      	bx	lr

08005430 <_init>:
 8005430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005432:	bf00      	nop
 8005434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005436:	bc08      	pop	{r3}
 8005438:	469e      	mov	lr, r3
 800543a:	4770      	bx	lr

0800543c <_fini>:
 800543c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543e:	bf00      	nop
 8005440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005442:	bc08      	pop	{r3}
 8005444:	469e      	mov	lr, r3
 8005446:	4770      	bx	lr
